
R version 3.4.4 (2018-03-15) -- "Someone to Lean On"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "greed"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "greed-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('greed')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("models-classes")
> ### * models-classes
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: models-classes
> ### Title: Clustering models classes
> ### Aliases: models-classes icl_model icl_model-class sbm sbm-class mm
> ###   mm-class dcsbm-class mreg-class
> 
> ### ** Examples
> 
> new("dcsbm")
An object of class "dcsbm"
Slot "name":
[1] "dcsbm"

Slot "alpha":
[1] 1

> new("mm")
An object of class "mm"
Slot "beta":
[1] 1

Slot "name":
[1] "mm"

Slot "alpha":
[1] 1

> new("mm",alpha=1,beta=1)
An object of class "mm"
Slot "beta":
[1] 1

Slot "name":
[1] "mm"

Slot "alpha":
[1] 1

> new("mreg")
An object of class "mreg"
Slot "reg":
[1] 0.01

Slot "a0":
[1] 1

Slot "b0":
[1] 1

Slot "name":
[1] "mreg"

Slot "alpha":
[1] 1

> new("mreg",alpha=1,reg=5,a0=0.5,b0=0.5)
An object of class "mreg"
Slot "reg":
[1] 5

Slot "a0":
[1] 0.5

Slot "b0":
[1] 0.5

Slot "name":
[1] "mreg"

Slot "alpha":
[1] 1

> new("sbm")
An object of class "sbm"
Slot "a0":
[1] 1

Slot "b0":
[1] 1

Slot "name":
[1] "sbm"

Slot "alpha":
[1] 1

> new("sbm",a0=0.5,b0=0.5,alpha=1)
An object of class "sbm"
Slot "a0":
[1] 0.5

Slot "b0":
[1] 0.5

Slot "name":
[1] "sbm"

Slot "alpha":
[1] 1

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("models-classes", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("rsbm")
> ### * rsbm
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: rsbm
> ### Title: Generate graph adjacency matrix using a SBM
> ### Aliases: rsbm
> 
> ### ** Examples
> 
> simu = rsbm(100,rep(1/5,5),diag(rep(0.1,5))+0.001)
> x  = simu$x
> xl = simu$cl
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("rsbm", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.864 0.012 0.875 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
