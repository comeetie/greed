}
bi_plot(sol)
bi_plot = function(x){
K = x@Krow
D = x@Kcol
ccrow = cumsum(table(x@clrow))
cccol = cumsum(table(x@clcol))
gg=data.frame(kc=rep(ccrow,D),
lc=rep(cccol,each=K),
sizek = rep(table(x@clrow),D),
sizel = rep(table(x@clcol),each=K),
count=as.vector(x@obs_stats$co_x_counts))
ylab  = round(100*table(x@clcol)/sum(table(x@clcol)))
xlab = round(100*table(x@clrow)/sum(table(x@clrow)))
theme_mm = ggplot2::theme(axis.title.x=ggplot2::element_blank(),
axis.text.x=ggplot2::element_blank(),
axis.ticks.x=ggplot2::element_blank(),
axis.title.y=ggplot2::element_blank(),
axis.text.y=ggplot2::element_blank(),
axis.ticks.y=ggplot2::element_blank())
mat = ggplot2::ggplot(gg)+ggplot2::geom_tile(ggplot2::aes_(y=~kc-sizek/2,x=~lc-sizel/2,height=~sizek,width=~sizel,fill=~count/(sizek*sizel),alpha=~count/(sizek*sizel)))+
ggplot2::scale_fill_distiller("E[X]",type="seq",direction = 1)+
ggplot2::scale_alpha("E[X]")+
ggplot2::scale_x_continuous("Col clusters",breaks=cccol,labels=ifelse(ylab>5,paste0(ylab,"%"),""),minor_breaks = NULL)+
ggplot2::scale_y_continuous("Row clusters",breaks=ccrow,labels =ifelse(xlab>5,paste0(xlab,"%"),""),minor_breaks = NULL)+
ggplot2::theme_bw()+theme_mm
ggtree = x@ggtreerow
rowt = ggplot2::ggplot()+ggplot2::geom_segment(data=ggtree[ggtree$node %in% ggtree$tree,],ggplot2::aes_(y=~xmin,x=~H,yend=~xmax,xend=~H))+
ggplot2::geom_segment(data=ggtree[ggtree$Hend!=-1,],ggplot2::aes_(x=~H,y=~x,yend=~x,xend=~Hend))+
ggplot2::scale_y_continuous("",breaks=c())+
ggplot2::scale_x_reverse("",breaks=c())+
ggplot2::theme_bw()+theme_mm
if(x@K<max(x@ggtree$K)){
hc = x@ggtree$H[x@ggtree$K==x@K]
rowt=rowt+ggplot2::geom_hline(ggplot2::aes(yintercept=hc),color='red',size=0.8,linetype="dashed",alpha=0.8)
}
ggtree = x@ggtreecol
colt = ggplot2::ggplot()+ggplot2::geom_segment(data=ggtree[ggtree$node %in% ggtree$tree,],ggplot2::aes_(x=~xmin,y=~H,xend=~xmax,yend=~H))+
ggplot2::geom_segment(data=ggtree[ggtree$Hend!=-1,],ggplot2::aes_(x=~x,y=~H,xend=~x,yend=~Hend))+
ggplot2::scale_x_continuous("",breaks=c())+
ggplot2::ylab(expression(paste("-log(",alpha,")")))+
ggplot2::ggtitle(paste0(x@Kcol," column clusters"))+
ggplot2::theme_bw()
if(x@K<max(x@ggtree$K)){
hc = x@ggtree$H[x@ggtree$K==x@K]
colt=colt+ggplot2::geom_hline(aes(yintercept=hc),color='red',size=0.8,linetype="dashed",alpha=0.8)
}
ggpubr::ggarrange(rowt,mat,common.legend = TRUE)
}
bi_plot(sol)
bi_plot = function(x){
K = x@Krow
D = x@Kcol
ccrow = cumsum(table(x@clrow))
cccol = cumsum(table(x@clcol))
gg=data.frame(kc=rep(ccrow,D),
lc=rep(cccol,each=K),
sizek = rep(table(x@clrow),D),
sizel = rep(table(x@clcol),each=K),
count=as.vector(x@obs_stats$co_x_counts))
ylab  = round(100*table(x@clcol)/sum(table(x@clcol)))
xlab = round(100*table(x@clrow)/sum(table(x@clrow)))
theme_mm = ggplot2::theme(axis.title.x=ggplot2::element_blank(),
axis.text.x=ggplot2::element_blank(),
axis.ticks.x=ggplot2::element_blank(),
axis.title.y=ggplot2::element_blank(),
axis.text.y=ggplot2::element_blank(),
axis.ticks.y=ggplot2::element_blank(),
panel.border = ggplot2::element_blank())
mat = ggplot2::ggplot(gg)+ggplot2::geom_tile(ggplot2::aes_(y=~kc-sizek/2,x=~lc-sizel/2,height=~sizek,width=~sizel,fill=~count/(sizek*sizel),alpha=~count/(sizek*sizel)))+
ggplot2::scale_fill_distiller("E[X]",type="seq",direction = 1)+
ggplot2::scale_alpha("E[X]")+
ggplot2::scale_x_continuous("Col clusters",breaks=cccol,labels=ifelse(ylab>5,paste0(ylab,"%"),""),minor_breaks = NULL)+
ggplot2::scale_y_continuous("Row clusters",breaks=ccrow,labels =ifelse(xlab>5,paste0(xlab,"%"),""),minor_breaks = NULL)+
ggplot2::theme_bw()+theme_mm
ggtree = x@ggtreerow
rowt = ggplot2::ggplot()+ggplot2::geom_segment(data=ggtree[ggtree$node %in% ggtree$tree,],ggplot2::aes_(y=~xmin,x=~H,yend=~xmax,xend=~H))+
ggplot2::geom_segment(data=ggtree[ggtree$Hend!=-1,],ggplot2::aes_(x=~H,y=~x,yend=~x,xend=~Hend))+
ggplot2::scale_y_continuous("",breaks=c())+
ggplot2::scale_x_reverse("",breaks=c())+
ggplot2::theme_bw()+theme_mm
if(x@K<max(x@ggtree$K)){
hc = x@ggtree$H[x@ggtree$K==x@K]
rowt=rowt+ggplot2::geom_hline(ggplot2::aes(yintercept=hc),color='red',size=0.8,linetype="dashed",alpha=0.8)
}
ggtree = x@ggtreecol
colt = ggplot2::ggplot()+ggplot2::geom_segment(data=ggtree[ggtree$node %in% ggtree$tree,],ggplot2::aes_(x=~xmin,y=~H,xend=~xmax,yend=~H))+
ggplot2::geom_segment(data=ggtree[ggtree$Hend!=-1,],ggplot2::aes_(x=~x,y=~H,xend=~x,yend=~Hend))+
ggplot2::scale_x_continuous("",breaks=c())+
ggplot2::ylab(expression(paste("-log(",alpha,")")))+
ggplot2::ggtitle(paste0(x@Kcol," column clusters"))+
ggplot2::theme_bw()
if(x@K<max(x@ggtree$K)){
hc = x@ggtree$H[x@ggtree$K==x@K]
colt=colt+ggplot2::geom_hline(aes(yintercept=hc),color='red',size=0.8,linetype="dashed",alpha=0.8)
}
ggpubr::ggarrange(rowt,mat,common.legend = TRUE)
}
bi_plot(sol)
bi_plot = function(x){
K = x@Krow
D = x@Kcol
ccrow = cumsum(table(x@clrow))
cccol = cumsum(table(x@clcol))
gg=data.frame(kc=rep(ccrow,D),
lc=rep(cccol,each=K),
sizek = rep(table(x@clrow),D),
sizel = rep(table(x@clcol),each=K),
count=as.vector(x@obs_stats$co_x_counts))
ylab  = round(100*table(x@clcol)/sum(table(x@clcol)))
xlab = round(100*table(x@clrow)/sum(table(x@clrow)))
theme_mm = ggplot2::theme(axis.title.x=ggplot2::element_blank(),
axis.text.x=ggplot2::element_blank(),
axis.ticks.x=ggplot2::element_blank(),
axis.title.y=ggplot2::element_blank(),
axis.text.y=ggplot2::element_blank(),
axis.ticks.y=ggplot2::element_blank(),
panel.border = ggplot2::element_blank())
mat = ggplot2::ggplot(gg)+ggplot2::geom_tile(ggplot2::aes_(y=~kc-sizek/2,x=~lc-sizel/2,height=~sizek,width=~sizel,fill=~count/(sizek*sizel),alpha=~count/(sizek*sizel)))+
ggplot2::scale_fill_distiller("E[X]",type="seq",direction = 1)+
ggplot2::scale_alpha("E[X]")+
ggplot2::scale_x_continuous("Col clusters",breaks=cccol,labels=ifelse(ylab>5,paste0(ylab,"%"),""),minor_breaks = NULL)+
ggplot2::scale_y_continuous("Row clusters",breaks=ccrow,labels =ifelse(xlab>5,paste0(xlab,"%"),""),minor_breaks = NULL)+
ggplot2::theme_bw()+theme_mm
ggtree = x@ggtreerow
rowt = ggplot2::ggplot()+ggplot2::geom_segment(data=ggtree[ggtree$node %in% ggtree$tree,],ggplot2::aes_(y=~xmin,x=~H,yend=~xmax,xend=~H))+
ggplot2::geom_segment(data=ggtree[ggtree$Hend!=-1,],ggplot2::aes_(x=~H,y=~x,yend=~x,xend=~Hend))+
ggplot2::scale_y_continuous("",breaks=c())+
ggplot2::scale_x_reverse("",breaks=c())+
ggplot2::theme_bw()+theme_mm
if(x@K<max(x@ggtree$K)){
hc = x@ggtree$H[x@ggtree$K==x@K]
rowt=rowt+ggplot2::geom_hline(ggplot2::aes(yintercept=hc),color='red',size=0.8,linetype="dashed",alpha=0.8)
}
ggtree = x@ggtreecol
colt = ggplot2::ggplot()+ggplot2::geom_segment(data=ggtree[ggtree$node %in% ggtree$tree,],ggplot2::aes_(x=~xmin,y=~H,xend=~xmax,yend=~H))+
ggplot2::geom_segment(data=ggtree[ggtree$Hend!=-1,],ggplot2::aes_(x=~x,y=~H,xend=~x,yend=~Hend))+
ggplot2::scale_x_continuous("",breaks=c())+
ggplot2::ylab(expression(paste("-log(",alpha,")")))+
ggplot2::ggtitle(paste0(x@Kcol," column clusters"))+
ggplot2::theme_bw()
if(x@K<max(x@ggtree$K)){
hc = x@ggtree$H[x@ggtree$K==x@K]
colt=colt+ggplot2::geom_hline(aes(yintercept=hc),color='red',size=0.8,linetype="dashed",alpha=0.8)
}
ggpubr::ggarrange(rowt,mat,common.legend = TRUE,widths = c(1,2))
}
bi_plot(sol)
?ggarrange
? as.dist
?runif
?kmeans
devtools::document()
devtools::document()
library(greed)
devtools::document()
devtools::document()
library(greed)
devtools::document()
library(greed)
?cut
data("Xvlegislature")
dim(Xvlegislature$X)
Xvlegislature$col_meta
devtools::document()
devtools::document()
library(greed)
devtools::document()
library(greed)
library(greed)
devtools::document()
library(greed)
devtools::document()
library(greed)
sol=greed(FrenchParliament$X)
sol@obs_stats$counts
devtools::document()
devtools::document()
library(greed)
devtools::document()
devtools::document()
devtools::document()
library(greed)
sol@path[[1]]
sol@path[[1]]$logalpha
devtools::document()
?plot
devtools::document()
library(greed)
devtools::document()
library(greed)
devtools::document()
devtools::document()
library(greed)
devtools::test()
library(greed)
sol@name
library(greed)
devtools::document()
library(greed)
devtools::document()
library(greed)
devtools::document()
devtools::document()
devtools::document()
library(greed)
devtools::test()
N = 500
K = 10
pi = rep(1/K,K)
mu = lapply(1:5,function(x){cbind(diag(rep(10,K)),matrix(0,K,20))+matrix(runif(K*(20+K)),K,20+K)})
mu = do.call(cbind,mu)
mm = rmm(N,pi,mu,15)
sol=greed(mm$x,model=new("co_dcsbm"),alg=new("seed"),K=40)
warnings()
plot(solc,type='tree')
plot(sol,type='tree')
N = 500
K = 10
pi = rep(1/K,K)
mu = cbind(diag(rep(5,K)),matrix(0,K,20))+matrix(runif(K*(20+K)),K,20+K)
mm = rmm(N,pi,mu,40)
sol=greed(mm$x,model=new('co_dcsbm'))
plot(sol)
sol=greed(mm$x,model=new("co_dcsbm"),alg=new("seed"),K=20)
warnings()
sol=greed(mm$x,model=new("co_dcsbm"),alg=new("seed"),K=40)
warnings()
library(greed)
sol=greed(mm$x,model=new("co_dcsbm"),alg=new("seed"),K=40)
plot(sol)
library(greed)
devtools::test()
N = 500
K = 10
pi = rep(1/K,K)
mu = lapply(1:5,function(x){cbind(diag(rep(10,K)),matrix(0,K,20))+matrix(runif(K*(20+K)),K,20+K)})
mu = do.call(cbind,mu)
mm = rmm(N,pi,mu,15)
sol=greed(mm$x,model=new("co_dcsbm"),alg=new("seed"),K=40)
plot(sol())
plot(sol
)
mu
image(mu)
plot(sol)
plot(sol,type='tree')
N = 500
K = 10
pi = rep(1/K,K)
mu = lapply(1:5,function(x){cbind(diag(rep(10,K)),matrix(0,K,20))+matrix(runif(K*(20+K)),K,20+K)})
mu = do.call(cbind,mu)
mm = rmm(N,pi,mu,15)
sol=greed(mm$x,model=new("co_dcsbm"),alg=new("hybrid"),K=40)
plot(sol,type='tree')
plot(sol)
plot(sol,type='tree')
greed:::dendo(sol)
plot(sol,type='tree')
greed:::dendo(sol)
plot(sol,type='tree')
greed:::dendo(sol)
plot(sol,type='tree')
sol@ggtreecol
View(sol@ggtreecol)
tree= sol@ggtree[order(sol@ggtree$H),]
tree
tree= sol@ggtree[order(sol@ggtree$H,sol@ggtree$node),]
tree
N = 500
K = 10
pi = rep(1/K,K)
mu = lapply(1:5,function(x){cbind(diag(rep(10,K)),matrix(0,K,20))+matrix(runif(K*(20+K)),K,20+K)})
mu = do.call(cbind,mu)
mm = rmm(N,pi,mu,15)
sol=greed(mm$x,model=new("co_dcsbm"),alg=new("hybrid"),K=40)
library(greed)
sol=greed(mm$x,model=new("co_dcsbm"),alg=new("hybrid"),K=40)
plot(sol,type='tree')
tree=sol@ggtreerow
tree
tree %>% group_by(tree) %>% count()
library(dplyr)
tree %>% group_by(tree) %>% count()
?tapply
aggregate(rep(1,nrow(tree)),list(tree$tree),sum)
nbch=aggregate(rep(1,nrow(tree)),list(tree$tree),sum)
nbch=by(rep(1,nrow(tree)),list(tree$tree),sum)
nbch
nbch=tapply(, index, function)(rep(1,nrow(tree)),list(tree$tree),sum)
nbch=tapply(rep(1,nrow(tree)),list(tree$tree),sum)
nbch
nbch[1:length(nbch)]
nbch[:length(nbch)]
nbch[2:length(nbch)]
nbch[2:length(nbch)]>1
nbch[2:length(nbch)]<2
which(nbch[2:length(nbch)]<2)
rownmaes(which(nbch[2:length(nbch)]<2))
rownames(which(nbch[2:length(nbch)]<2))
names(which(nbch[2:length(nbch)]<2))
devtools::document()
devtools::document()
devtools::document()
N=600
X = rbind(MASS::mvrnorm(N/3,c(-5,0),diag(2)),MASS::mvrnorm(N/3,c(0,5),diag(2)),MASS::mvrnorm(N/3,c(5,0),diag(2)))
sol=greed(X,alg=new("seed"))
sol
sol@obs_stats$regs
X
devtools::document()
devtools::build_manual()
?devtools::build_manual()
devtools::build_manual(path = ".")
devtools::build(vignettes = T, manual = T)
library(greed)
library(greed)
devtools::document()
library(greed)
devtools::document()
library(greed)
library(greed)
library(greed)
devtools::document()
library(greed)
?matrix
devtools::document()
library(greed)
devtools::document()
library(greed)
devtools::document()
library(greed)
gamma(1)
gamma(0)
install.packages("CholWishard")
install.packages("CholWishart")
mvgamma(5,10)
library(CholWishart)
mvgamma(5,10)
mvgamma(3,10)
setwd("/data/Projets/biSBMR/R")
##### example for biSBM.R #####
### loading and compiling biSBM function
if(Sys.info()["sysname"]=="Windows") {
source("biSBMWin.R") } else {
source("biSBM.R")
}
##### TEST 1 - Southern Women #####
edges <- read.table("southernWomen.edgelist");  ## edgelist
types <- read.table("southernWomen.types");     ## nodeType
### call to the function: by default deg.corr=1 and iter = 10.
g <- biSBM(data = edges, nodeType = types, ka = 2, kb = 3, deg.corr = 1, iter = 3);
source("biSBM.R")
##### TEST 1 - Southern Women #####
edges <- read.table("southernWomen.edgelist");  ## edgelist
library(greed)
data("Xvlegislature")
##### TEST 1 - Southern Women #####
edges <- read.table("southernWomen.edgelist");  ## edgelist
types <- read.table("southernWomen.types");     ## nodeType
edges
### call to the function: by default deg.corr=1 and iter = 10.
g <- biSBM(data = edges, nodeType = types, ka = 2, kb = 3, deg.corr = 1, iter = 3);
types <- read.table("southernWomen.types");     ## nodeType
types
edges
### call to the function: by default deg.corr=1 and iter = 10.
g <- biSBM(data = edges, nodeType = types, ka = 2, kb = 3, deg.corr = 1, iter = 3);
apply(edges,2,max)
apply(edges,2,max)
### call to the function: by default deg.corr=1 and iter = 10.
g <- biSBM(data = edges, nodeType = types, ka = 2, kb = 3, deg.corr = 1, iter = 3);
### call to the function: by default deg.corr=1 and iter = 10.
g <- biSBM(data = edges[,1:2], nodeType = types, ka = 2, kb = 3, deg.corr = 1, iter = 3);
g
length(g)
library(Matrix)
MsparseMatrix(edges[,1],edges[,2],x = rep(1,32))
M=sparseMatrix(edges[,1],edges[,2],x = rep(1,32))
M=sparseMatrix(edges[,1],edges[,2],x = rep(1,nrow(edges)))
M[types==1,types==2]
M[which(types==1),which(types==2)]
Mc=M[which(types==1),which(types==2)]
greed(Mc)
sol=greed(Mc)
table(g,sol@cl)
edges <- read.table("malaria.edgelist");  ## edgelist
types <- read.table("malaria.types");     ## nodeType
g <- biSBM(data = edges[,1:2], nodeType = types, ka = 3, kb = 3, deg.corr = 1, iter = 3);
M=sparseMatrix(edges[,1],edges[,2],x = rep(1,nrow(edges)))
Mc=M[which(types==1),which(types==2)]
sol=greed(Mc)
table(g,sol@cl)
plot(sol)
table(g,cut(sol,6)@cl)
library(future)
plan(multisession)
sol=greed(Mc)
table(g,cut(sol,6)@cl)
plot(sol)
Mc
greed:::spy(Mc[order(sol@clrow),order(sol@clcol)])
mo=new("co_dcsbm")
data=greed:::preprocess(mo,Mc,40)
solB=greed:::fit_greed(mo,data,g,"none")
solB
solB@icl
sol@icl
library(dplyr)
imdb=read_csv("./IMDB-Movie-Data.csv")
library(readr)
imdb=read_csv("./IMDB-Movie-Data.csv")
imdb$Actors
library(stringr)
str_split(imdb$Actors,",")
Actors.List=str_split(imdb$Actors,",")
unique(unlist(Actors.List))
Actors=unique(unlist(Actors.List))
map(Actors.List,function(acts){which(acts %in% Actors)})
library(purrr)
map(Actors.List,function(acts){which(acts %in% Actors)})
Actors.List[[1]] %in% Actors
Actors
map(Actors.List,function(acts){which(Actors %in% acts)})
map(Actors.List,1:length(Actors.List),function(acts,filmid){cbind(filmid,which(acts %in% Actors))})
map2(Actors.List,1:length(Actors.List),function(acts,filmid){cbind(filmid,which(acts %in% Actors))})
map2(Actors.List,1:length(Actors.List),function(acts,filmid){cbind(filmid,which(Actors %in% acts))})
edges= do.call(rbind,map2(Actors.List,1:length(Actors.List),function(acts,filmid){cbind(filmid,which(Actors %in% acts))}))
edges
M=sparseMatrix(edges[,1],edges[,2],rep(1,nrow(edges)))
M=sparseMatrix(edges[,1],edges[,2]x=,rep(1,nrow(edges)))
M=sparseMatrix(edges[,1],edges[,2],x=rep(1,nrow(edges)))
sol=greed(M)
plot(sol)
table(imdb$Genre,sol@clrow)
imdb$Genre
imdb$Genre[sol@clrow==1]
imdb[sol@clrow==1,]
imdb[sol@clrow==1,"Title"]
imdb[sol@clrow==2,"Title"]
imdb[sol@clrow==3,"Title"]
imdb[sol@clrow==4,"Title"]
imdb[sol@clrow==5,"Title"]
imdb[sol@clrow==6,"Title"]
imdb[sol@clrow==7,"Title"]
length(sol@clrow)
nrow(imdb)
sol=greed(M,K=40)
plot(sol)
imdb[sol@clrow==7,"Title"]
imdb[sol@clrow==11,"Title"]
imdb[sol@clrow==12,"Title"]
str_split(imdb$genre)
str_split(imdb$genre,",")
str_split(imdb$Genre,",")
map(str_split(imdb$Genre,","),function(g){g[1]})
unlist(map(str_split(imdb$Genre,","),function(g){g[1]}))
G1=unlist(map(str_split(imdb$Genre,","),function(g){g[1]}))
trable(G1,sol@clrow)
table(G1,sol@clrow)
G1=unlist(map(str_split(imdb$Genre,","),function(g){g[2]}))
table(G1,sol@clrow)
table(grepl("Western",imdb$Genre),sol@clrow)
table(grepl("Thriller",imdb$Genre),sol@clrow)
table(grepl("Romance",imdb$Genre),sol@clrow)
table(grepl("Horror",imdb$Genre),sol@clrow)
table(grepl("Comedy",imdb$Genre),sol@clrow)
Actors[sol@clcol==1]
Actors[sol@clcol==2]
Actors[sol@clcol==3]
Actors[sol@clcol==4]
Actors[sol@clcol==5]
Actors[sol@clcol==6]
Actors[sol@clcol==7]
Actors[sol@clcol==8]
Actors[sol@clcol==9]
Actors[sol@clcol==8]
unqie(imdb$Director[sol@clrow==8])
unique(imdb$Director[sol@clrow==8])
unique(imdb$Director[sol@clrow==1])
unique(imdb$Director[sol@clrow==2])
unique(imdb$Director[sol@clrow==3])
imdb$Rating
table(round(imdb$Rating),sol@clrow)
edges <- read.table("malaria.edgelist");  ## edgelist
types <- read.table("malaria.types");     ## nodeType
M=sparseMatrix(edges[,1],edges[,2],x = rep(1,nrow(edges)))
Mc=M[which(types==1),which(types==2)]
sol=greed(Mc)
sol=greed(Mc,K=40)
plot(sol)
plot(sol,type='nodelink')
plot(sol,type='tree')
plot(cut(sol,8))
sol=greed(Mc,K=40,alg=new("seed"))
sol
sol=greed(Mc,K=40,alg=new("seed"))
sol
sol=greed(Mc,K=40,alg=new("seed"))
sol=greed(Mc,K=40,alg=new("seed"))
sol
dim(Mc)
library(greed)
data(Blogs)
all(Blogs$X==t(Blogs$X))
library(Matrix)
all(Blogs$X==t(Blogs$X))
Blogs$X
Blogs$X-t(Blogs$X)
greed::spectral(Blogs$X)
greed::spectral
getwd()
