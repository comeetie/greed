Xc=Xc[,colSums(Xc)>2]
library(future)
plan(multisession)
sol=greed(Xc,K=40,alg=new("hybrid"))
library(Matrix)
library(greed)
data("Jazz_full")
model=new("co_dcsbm")
Xc=Jazz_full$X[rowSums(Jazz_full$X)>2,]
Xc=Xc[,colSums(Xc)>2]
library(future)
plan(multisession)
sol=greed(Xc,K=40,alg=new("hybrid"))
sol@obs_stats$co_x_counts
plot(sol)
library(greed)
N=1500
K=15
pi=rep(1/K,K)
lambda  = 0.1
lambda_o = 0.025
Ks=5
mu = bdiag(lapply(1:(K/Ks), function(k){matrix(lambda_o,Ks,Ks)+diag(rep(lambda,Ks))}))+0.001
sbm = rsbm(N,pi,mu)
fit = greed(sbm$x,model=new("sbm"),alg=new("hybrid",pop_size=40))
library(Matrix)
N=1500
K=15
pi=rep(1/K,K)
lambda  = 0.1
lambda_o = 0.025
Ks=5
mu = bdiag(lapply(1:(K/Ks), function(k){matrix(lambda_o,Ks,Ks)+diag(rep(lambda,Ks))}))+0.001
sbm = rsbm(N,pi,mu)
fit = greed(sbm$x,model=new("sbm"),alg=new("hybrid",pop_size=40))
plot(fit)
library(greed)
plot(fit)
library(greed)
library(qwraps2)
lazyload_cache_dir("realnetex_cache/lates")
lazyload_cache_dir("realnetex_cache/latex")
lazyload_cache_dir("./realnetex_cache/latex/")
fit_cojazz
getwd()
library(greed)
data("Jazz_full")
Xc=Jazz_full$X
Xc[rowSums(Xc)>2,]
Xc=Xc[rowSums(Xc)>2,]
library()
library(Matrix)
Xc=Xc[rowSums(Xc)>2,]
Xc=Xc[,colSums(Xc)>2]
sol=greed(Xc)
plot(sol)
i=33
cps = sol@path[[i]]$obs_stats
ic= which(cps$dc>0)
ir= which(cps$dr>0)
cps$x_counts[ir,ic]
cps
cps = sol@path[[i]]$cl
cps
library(greed)
sol=greed(Xc)
plot(sol)
i=33
cps = sol@path[[i]]$obs_stats
ic= which(cps$dc>0)
ir= which(cps$dr>0)
cps$x_counts[ir,ic]
i=32
cps = sol@path[[i]]$obs_stats
ic= which(cps$dc>0)
ir= which(cps$dr>0)
cps$x_counts[ir,ic]
i=31
cps = sol@path[[i]]$obs_stats
ic= which(cps$dc>0)
ir= which(cps$dr>0)
cps$x_counts[ir,ic]
i=29
cps = sol@path[[i]]$obs_stats
ic= which(cps$dc>0)
ir= which(cps$dr>0)
cps$x_counts[ir,ic]
i=27
cps = sol@path[[i]]$obs_stats
ic= which(cps$dc>0)
ir= which(cps$dr>0)
cps$x_counts[ir,ic]
plot(sol)
plot(sol,type='tree')
sol@ggtree
sol@ggtree$H
length(sol@path)
seq(36,1)
cps = sol@path[[i]]$obs_stats
cps
plot(sol)
i
i=35
cps = sol@path[[i]]$obs_stats
cps
cps = sol@path[[i]]
cps
i=34
cps = sol@path[[i]]
cps
max(cps$cl)
fit_pol
library(osmr)
library(osmdata)
rponts = opq("france") %>% add_osm_feature("junction","roundabout")
rponts = opq("france") %>% add_osm_feature("junction","roundabout") %>% osmdata_sf()
?osmdata_sf
rponts = opq("paris france") %>% add_osm_feature("junction","roundabout") %>% osmdata_sf()
update.packages("osmdata")
hampi_sf <- opq ("hampi india") %>%
add_osm_feature (key="historic", value="ruins") %>%
osmdata_sf ()
hampi_sf <- opq ("hampi india") %>%
add_osm_feature (key="historic", value="ruins") %>%
osmdata_sf ()
plot(hampi_sf$osm_points)
library(sf)
plot(hampi_sf$osm_points)
rponts = opq("paris france") %>% add_osm_feature("junction","roundabout") %>% osmdata_sf()
rponts = opq("paris france") %>% add_osm_feature("junction","roundabout") %>% osmdata_sf()
plot(rponts$osm_points)
rponts = opq("france") %>% add_osm_feature("junction","roundabout") %>% osmdata_sf()
rponts = opq("france") %>% add_osm_feature("junction","roundabout") %>% osmdata_sf()
library(greed)
N=200
X1 = MASS::mvrnorm(N/2,c(-5,0),diag(2))
X2 = MASS::mvrnorm(N/2,c(0,5),diag(2))
R1 = greed:::gmm_marginal(X1,0.1,3,diag(2),c(0,0))
fL=function(tau){-greed:::gmm_marginal(X1,0.001,2,tau*diag(2),c(0,0))}
fL=function(tau){-greed:::gmm_marginal(matrix(X1[1,],1,2),0.001,2,tau*diag(2),c(0,0))}
##### Implementing the golden section search method
##### a modification of the bisection method with the golden ratio
##### By Eric Cai - The Chemical Statistician
golden.section.search = function(f, lower.bound, upper.bound, tolerance)
{
golden.ratio = 2/(sqrt(5) + 1)
### Use the golden ratio to set the initial test points
x1 = upper.bound - golden.ratio*(upper.bound - lower.bound)
x2 = lower.bound + golden.ratio*(upper.bound - lower.bound)
### Evaluate the function at the test points
f1 = f(x1)
f2 = f(x2)
iteration = 0
while (abs(upper.bound - lower.bound) > tolerance)
{
iteration = iteration + 1
cat('', '\n')
cat('Iteration #', iteration, '\n')
cat('f1 =', f1, '\n')
cat('f2 =', f2, '\n')
if (f2 > f1)
# then the minimum is to the left of x2
# let x2 be the new upper bound
# let x1 be the new upper test point
{
cat('f2 > f1', '\n')
### Set the new upper bound
upper.bound = x2
cat('New Upper Bound =', upper.bound, '\n')
cat('New Lower Bound =', lower.bound, '\n')
### Set the new upper test point
### Use the special result of the golden ratio
x2 = x1
cat('New Upper Test Point = ', x2, '\n')
f2 = f1
### Set the new lower test point
x1 = upper.bound - golden.ratio*(upper.bound - lower.bound)
cat('New Lower Test Point = ', x1, '\n')
f1 = f(x1)
}
else
{
cat('f2 < f1', '\n')
# the minimum is to the right of x1
# let x1 be the new lower bound
# let x2 be the new lower test point
### Set the new lower bound
lower.bound = x1
cat('New Upper Bound =', upper.bound, '\n')
cat('New Lower Bound =', lower.bound, '\n')
### Set the new lower test point
x1 = x2
cat('New Lower Test Point = ', x1, '\n')
f1 = f2
### Set the new upper test point
x2 = lower.bound + golden.ratio*(upper.bound - lower.bound)
cat('New Upper Test Point = ', x2, '\n')
f2 = f(x2)
}
}
### Use the mid-point of the final interval as the estimate of the optimzer
cat('', '\n')
cat('Final Lower Bound =', lower.bound, '\n')
cat('Final Upper Bound =', upper.bound, '\n')
estimated.minimizer = (lower.bound + upper.bound)/2
cat('Estimated Minimizer =', estimated.minimizer, '\n')
}
golden.section.search(fL,0.001,1,0.01)
fL=function(tau){-greed:::gmm_marginal(matrix(X1[1,],1,2),0.001,2,tau*diag(2),c(0,0))$log_evidence}
golden.section.search(fL,0.001,1,0.01)
fL=function(tau){-greed:::gmm_marginal(matrix(X1[1,],1,2),0.001,2,tau*diag(2),c(-5,0))$log_evidence}
golden.section.search(fL,0.001,1,0.01)
library(greed)
N=200
X1 = MASS::mvrnorm(N/2,c(-5,0),diag(2))
X2 = MASS::mvrnorm(N/2,c(0,5),diag(2))
R1 = greed:::gmm_marginal(X1,0.1,3,diag(2),c(0,0))
R1 = greed:::gmm_marginal_eb(X1,0.1,3,diag(2),c(0,0))
R1
library(greed)
R1 = greed:::gmm_marginal_eb(X1,0.001,2,diag(2),c(0,0))
R1
R1 = greed:::gmm_marginal_eb(X1,0.1,2,diag(2),c(0,0))
R1
R1 = greed:::gmm_marginal_eb(X1,0.1,2,cov(cbind(X1,X2)),c(0,0))
X2
R1 = greed:::gmm_marginal_eb(X1,0.1,2,cov(rbind(X1,X2)),c(0,0))
R1
R1 = greed:::gmm_marginal_eb(X1,0.0001,2,cov(rbind(X1,X2)),c(0,0))
R1
R1 = greed:::gmm_marginal_eb(X1,0.000001,2,cov(rbind(X1,X2)),c(0,0))
R1
R1 = greed:::gmm_marginal_eb(X1,1,2,cov(rbind(X1,X2)),c(0,0))
R1
library(greed)
library(MASS)
N=600
X = rbind(mvrnorm(N/3,c(-5,0),diag(2)),mvrnorm(N/3,c(0,5),diag(2)),mvrnorm(N/3,c(5,0),diag(2)))
sol=greed(X)
sol@obs_stats
sol@obs_stats$regs[[1]]
data("crabs")
crabs
crabs=as.matrix(crabs[,5:8])
sol=greed(crabs)
sol@obs_stats$regs[[1]]
sol@obs_stats$regs[[2]]
sol@obs_stats$regs[[3]]
library(greed)
sol@obs_stats$regs[[3]]
sol=greed(crabs)
sol@cl
sol@obs_stats$regs[[3]]
sol@obs_stats$regs[[1]]
sol@obs_stats$regs[[2]]
library(greed)
library(ggplot2)
library(tidyr)
library(tibble)
crux = function(N,m,noise){
x1 = rnorm(N/2)
x2 = rnorm(N/2)
X = rbind(cbind(x1,x1+rnorm(N/2)*noise),cbind(x2,-x2+rnorm(N/2)*noise))
X+rep(m,each=N)
}
Ng = 300
noise=0.2
X=rbind(crux(Ng,c(-10,10),noise),
crux(Ng,c(-10,-10),noise),
crux(Ng,c(10,-10),noise),
crux(Ng,c(10,10),noise))
ggplot(tibble(x=X[,1],y=X[,2]))+
geom_point(aes(x=x,y=y))+
theme_bw()
sol=greed(X)
sol@obs_stats$regs[[1]]
sol=greed(X)
sol=greed(X,alg=new("hybrid",prob_mutation=0.8))
sol=greed(X,alg=new("hybrid",prob_mutation=1))
sol=greed(X,alg=new("hybrid",prob_mutation=1,pop_size=40))
R1 = greed:::gmm_marginal_eb(X[1:300,],1,2,cov(X),c(0,0))
R1
R1 = greed:::gmm_marginal_eb(X[1:150,],1,2,cov(X),c(0,0))
R = greed:::gmm_marginal_eb(X[1:300,],1,2,cov(X),c(0,0))
R1 = greed:::gmm_marginal_eb(X[1:150,],1,2,cov(X),c(0,0))
R1 = greed:::gmm_marginal_eb(X[151:300,],1,2,cov(X),c(0,0))
R1 = greed:::gmm_marginal_eb(X[1:150,],1,2,cov(X),c(0,0))
R2 = greed:::gmm_marginal_eb(X[151:300,],1,2,cov(X),c(0,0))
R1$log_evidence+R2$log_evidence
R$log_evidence
R1$eps
R2$eps
library(greed)
sol=greed(X)
sol=greed(X[1:300],K=2)
sol=greed(X[1:300,],K=2)
sol=greed(X[1:300,],K=2)
sol=greed(X[1:300,],K=2,model=new("gmm",N0=2,epsilon=cov(X),mu=c(0,0),tau=1))
sol=greed(X[1:300,],K=2,model=new("gmm",N0=2,epsilon=cov(X)/2,mu=c(0,0),tau=1))
dim(X)
new("gmm",N0=2,epsilon=cov(X)/2,mu=c(0,0),tau=1)
sol=greed(X[1:300,],K=2,model=new("gmm",N0=2,epsilon=cov(X)/2,mu=c(0,0),tau=1))
sol=greed(X[1:300,],K=2,model=new("gmm",N0=2,epsilon=cov(X)/2,mu=c(0,0),tau=0.1))
sol=greed(X[1:300,],K=2,model=new("gmm",N0=2,epsilon=cov(X)/2,mu=c(0,0),tau=0.1))
sol=greed(X[1:300,],K=2,model=new("gmm",N0=2,epsilon=cov(X)/2,mu=c(0,0),tau=0.1))
sol=greed(X[1:300,],K=2,model=new("gmm",N0=2,epsilon=cov(X)/2,mu=c(0,0),tau=0.01))
sol=greed(X[1:300,],K=2,model=new("gmm",N0=2,epsilon=cov(X)/2,mu=c(0,0),tau=0.01))
sol=greed(X[1:300,],K=2,model=new("gmm",N0=2,epsilon=cov(X)/2,mu=c(0,0),tau=0.01))
sol=greed(X[1:300,],K=2,model=new("gmm",N0=2,epsilon=cov(X)/2,mu=c(0,0),tau=0.01))
library(greed)
sol=greed(X)
sol=greed(X,alg=new("hybrid",prob_mutation=0.8,pop_size=30))
library(greed)
sol=greed(X,alg=new("hybrid",prob_mutation=0.8,pop_size=30),verbose = TRUE*)
sol=greed(X,alg=new("hybrid",prob_mutation=0.8,pop_size=30),verbose = TRUE)
sol=greed(X)
sol=greed(X,alg=new("hybrid",prob_mutation=0.8,pop_size=30))
sol=greed(X,alg=new("hybrid",prob_mutation=0.25,pop_size=30))
sol@cl
table(sol@cl)
sol=greed(X,alg=new("hybrid",prob_mutation=0.25,pop_size=20))
library(greed)
new("hybrid")
sol=greed(X)
sol=greed(crabs)
sol@obs_stats$regs[[1]]$eps
sol@obs_stats$regs[[2]]$eps
sol@obs_stats$regs[[2]]$eps
sol@obs_stats$regs[[3]]$eps
sol=greed(crabs,model=new("gmm",N0=2,epsilon=cov(crabs)/2,mu=apply(X,2,mean),tau=0.001),alg=new("hybrid",prob_mutation=0.25,pop_size=20))
sol=greed(crabs,model=new("gmm",N0=2,epsilon=cov(crabs)/2,mu=apply(crabs,2,mean),tau=0.001),alg=new("hybrid",prob_mutation=0.25,pop_size=20))
sol=greed(crabs,model=new("gmm",N0=2,epsilon=cov(crabs)/2,mu=apply(crabs,2,mean),tau=0.01),alg=new("hybrid",prob_mutation=0.25,pop_size=20))
crabs
sol=greed(crabs,model=new("gmm",N0=2,epsilon=cov(crabs)/2,mu=apply(crabs,2,mean),tau=0.0001),alg=new("hybrid",prob_mutation=0.25,pop_size=20))
sol=greed(crabs,model=new("gmm",N0=ncol(crabs),epsilon=cov(crabs)/ncol(crabs),mu=apply(crabs,2,mean),tau=0.0001),alg=new("hybrid",prob_mutation=0.25,pop_size=20))
sol=greed(crabs,model=new("gmm",N0=ncol(crabs),epsilon=cov(crabs)/ncol(crabs),mu=apply(crabs,2,mean),tau=0.00001),alg=new("hybrid",prob_mutation=0.25,pop_size=20))
sol=greed(crabs,model=new("gmm",N0=ncol(crabs),epsilon=cov(crabs)/ncol(crabs),mu=apply(crabs,2,mean),10),alg=new("hybrid",prob_mutation=0.25,pop_size=20))
sol=greed(crabs,model=new("gmm",N0=ncol(crabs),epsilon=cov(crabs)/ncol(crabs),mu=apply(crabs,2,mean),tau=10),alg=new("hybrid",prob_mutation=0.25,pop_size=20))
sol=greed(crabs,model=new("gmm",N0=ncol(crabs),epsilon=cov(crabs),mu=apply(crabs,2,mean),tau=10),alg=new("hybrid",prob_mutation=0.25,pop_size=20))
sol=greed(crabs,model=new("gmm",N0=ncol(crabs),epsilon=cov(crabs),mu=apply(crabs,2,mean),tau=0.001),alg=new("hybrid",prob_mutation=0.25,pop_size=20))
sol@cl
model=new("gmm",N0=ncol(crabs),epsilon=cov(crabs),mu=apply(crabs,2,mean),tau=0.001)
data=greed:::preprocess(model,crabs)
sol=greed:::fit_greed(model,data,rep(1:4,each=50))
sol
sol=greed:::fit_greed(model,data,rep(1:4,each=50),type = 'none')
sol@icl
sol=greed(crabs,model=new("gmm",N0=ncol(crabs),epsilon=cov(crabs),mu=apply(crabs,2,mean),tau=0.001),alg=new("hybrid",prob_mutation=0.25,pop_size=20))
sol=greed(crabs,model=model,alg=new("hybrid",prob_mutation=0.25,pop_size=20))
dim(crabs)
sol=greed:::fit_greed(model,data,rep(1:4,each=50),type = 'none')
sol@icl
model=new("gmm",N0=ncol(crabs),epsilon=cov(crabs),mu=apply(crabs,2,mean),tau=0.00001)
sol=greed:::fit_greed(model,data,rep(1:4,each=50),type = 'none')
model=new("gmm",N0=ncol(crabs),epsilon=cov(crabs),mu=apply(crabs,2,mean),tau=0.00001)
sol@icl
model=new("gmm",N0=ncol(crabs),epsilon=cov(crabs),mu=apply(crabs,2,mean),tau=0.1)
sol@icl
sol=greed:::fit_greed(model,data,rep(1:4,each=50),type = 'none')
sol@icl
model=new("gmm",N0=ncol(crabs),epsilon=cov(crabs),mu=apply(crabs,2,mean),tau=10)
sol=greed:::fit_greed(model,data,rep(1:4,each=50),type = 'none')
sol@icl
model=new("gmm",N0=ncol(crabs),epsilon=cov(crabs),mu=apply(crabs,2,mean),tau=1)
sol=greed(crabs,model=model,alg=new("hybrid",prob_mutation=0.25,pop_size=20))
library(greed)
library(ggplot2)
library(tidyr)
library(tibble)
crux = function(N,m,noise){
x1 = rnorm(N/2)
x2 = rnorm(N/2)
X = rbind(cbind(x1,x1+rnorm(N/2)*noise),cbind(x2,-x2+rnorm(N/2)*noise))
X+rep(m,each=N)
}
Ng = 300
noise=0.2
X=rbind(crux(Ng,c(-10,10),noise),
crux(Ng,c(-10,-10),noise),
crux(Ng,c(10,-10),noise),
crux(Ng,c(10,10),noise))
ggplot(tibble(x=X[,1],y=X[,2]))+
geom_point(aes(x=x,y=y))+
theme_bw()
library(mclust)
Mclust(X)
solmc=Mclust(X)
plot(solmc)
solmc=Mclust(X,1:20)
plot(solmc)
sol=greed(X,alg=new("seed"))
sol
plot(sol)
table(sol@cl)
sol=greed(X,alg=new("seed"))
sol
plot(sol)
mu=diag(50)
mu
mu=diag(50)*5
MASS::mvrnorm(100,mu,sigma)
mu=diag(50)*5
MASS::mvrnorm(100,mu,mu)
MASS::mvrnorm(100,mu[1,],mu)
X=do.call(rbind(lapply(1:50, function(k){MASS::mvrnorm(100,mu[k,],mu)}))
X=do.call(rbind(lapply(1:50, function(k){MASS::mvrnorm(100,mu[k,],mu)}))
)
X=do.call(rbind,lapply(1:50, function(k){MASS::mvrnorm(100,mu[k,],mu)}))
50*100
sol=greed(X,alg=new("seed"),K=70)
mu=diag(20)*5
X=do.call(rbind,lapply(1:20, function(k){MASS::mvrnorm(100,mu[k,],mu/10)}))
dim(X)
sol=greed(X,alg=new("seed"),K=30)
sol@cl
table(sol@cl)
solmc=Mclust(X,1:30)
plot(solmc)
?Mclust
solmc=Mclust(X,1:30,"VVV")
plot(solmc)
solmc
X
sol=greed(X)
library("future")
plan(multiprocess)
sol=greed(X)
model=new("gmm",N0=20,tau=0.01,epsilon=cov(X),mu=apply(X,2,mean))
data=greed:::preprocess(model,X)
sol=greed:::fit_greed(model,data,rep(1:20,each=100),type='none')
sol@icl
sol@obs_stats$regs[[1]]
sol@obs_stats$regs[[1]]
sol@obs_stats$regs[[1]]$eps
sol=greed:::fit_greed(model,data,rep(1:20,each=100),type='both')
sol@icl
table(sol@cl)
table(sol@cl,rep(1:20,each=100))
hist(X[,1],500)
hist(X[,2],500)
hist(X[,3],500)
hist(X[1:100,1],500)
model=new("gmm",N0=20,tau=0.1,epsilon=diag(20),mu=apply(X,2,mean))
sol=greed:::fit_greed(model,data,rep(1:20,each=100),type='merge')
sol
table(sol@cl)
sol@obs_stats$regs[[5]]
plot(sol@obs_stats$regs[[5]]$m)
plot(1:20,sol@obs_stats$regs[[5]]$m)
plot(sol,type="tree")
model=new("gmm",N0=20,tau=100,epsilon=diag(20),mu=apply(X,2,mean))
sol=greed:::fit_greed(model,data,rep(1:20,each=100),type='merge')
plot(1:20,sol@obs_stats$regs[[5]]$m)
model=new("gmm",N0=20,tau=0.00000001,epsilon=diag(20),mu=apply(X,2,mean))
sol=greed:::fit_greed(model,data,rep(1:20,each=100),type='merge')
plot(1:20,sol@obs_stats$regs[[5]]$m)
model=new("gmm",N0=20,tau=0.000000000001,epsilon=diag(20),mu=apply(X,2,mean))
sol=greed:::fit_greed(model,data,rep(1:20,each=100),type='merge')
plot(1:20,sol@obs_stats$regs[[5]]$m)
library(greed)
sol=greed:::fit_greed(model,data,rep(1:20,each=100),type='merge')
plot(1:20,sol@obs_stats$regs[[5]]$m)
model=new("gmm",N0=20,tau=0.001,epsilon=diag(20),mu=apply(X,2,mean))
sol=greed:::fit_greed(model,data,rep(1:20,each=100),type='merge')
plot(1:20,sol@obs_stats$regs[[5]]$m)
sol@obs_stats$regs[[5]]$eps
library(greed)
library(ggplot2)
library(tidyr)
library(tibble)
crux = function(N,m,noise){
x1 = rnorm(N/2)
x2 = rnorm(N/2)
X = rbind(cbind(x1,x1+rnorm(N/2)*noise),cbind(x2,-x2+rnorm(N/2)*noise))
X+rep(m,each=N)
}
Ng = 300
noise=0.2
X=rbind(crux(Ng,c(-10,10),noise),
crux(Ng,c(-10,-10),noise),
crux(Ng,c(10,-10),noise),
crux(Ng,c(10,10),noise))
sol=greed(X)
sol=greed(X)
sol=greed(X)
library(greed)
library(greed)
sol=greed(X)
library(greed)
sol=greed(X)
sol=greed(crabs)
library(greed)
sol=greed(crabs)
0^5
library(greed)
library(greed)
sol=greed(crabs)
sol@cl
sol@obs_stats$regs[[5]]
library(greed)
sol@obs_stats$regs[[5]]
sol=greed(crabs)
sol@obs_stats$regs[[5]]$eps
sol@cl
sol@obs_stats$regs[[7]]$eps
data=read_csv("../sageo-ricardo/SAGEO_RICardo_edges.csv")
library(readr)
data=read_csv("../sageo-ricardo/SAGEO_RICardo_edges.csv")
data[is.na(data$volume),]
data[is.na(data$volume),"volume"]
data[is.na(data$volume),"volume"]=0
write_csv(data,"../sageo-ricardo/SAGEO_RICardo_edges.csv")
