library(greed)
library(greed)
N = 1000
pi = c(1/2,1/2)
mu = rbind(c(0.95,0.01,0.01,0.01,0.01,0.01),c(0.01,0.95,0.01,0.01,0.01,0.01))
mm=rmm(N,pi,mu,100)
clt = mm$cl
clt[sample(N,10)]=3
val=fit_icl(new("mm"),mm$x,5)
val$cl
val$counts
val=fit_icl(new("mm"),mm$x,5)
val=fit_icl(new("mm"),mm$x,5)
library(greed)
val=fit_icl(new("mm"),mm$x,5)
val$counts
table(val$cl,mm$cl)
val=fit_icl(new("sbm"),sbm$x,100)
N = 5000
K = 50
pi = rep(1/K,K)
mu = matrix(0.0001,K,K)
mu = mu+diag(rep(1/8,K))
sbm = rsbm(N,pi,mu)
val=fit_icl(new("sbm"),sbm$x,100)
new("sbm")
library(greed)
val=fit_icl(new("sbm"),sbm$x,100)
library(greed)
val=fit_icl(new("mm"),mm$x,5)
library(greed)
val=fit_icl(new("mm"),mm$x,5)
new("mm")
library(greed)
new("mm")
val=fit_icl(new("mm"),mm$x,5)
library(greed)
val=fit_icl(new("mm"),mm$x,5)
val=fit_icl(new("mm"),mm$x,50)
library(greed)
val=fit_icl(new("mm"),mm$x,50)
val=fit_icl(new("mm"),mm$x,50)
val=fit_icl(new("mm"),mm$x,50)
val=fit_icl(new("mm"),mm$x,50)
val=fit_icl(new("mm"),mm$x,50)
val=fit_icl(new("mm"),mm$x,50)
val=fit_icl(new("mm"),mm$x,50)
library(greed)
library(future)
N = 5000
K = 50
pi = rep(1/K,K)
mu = matrix(0.0001,K,K)
mu = mu+diag(rep(1/8,K))
sbm = rsbm(N,pi,mu)
plot_adjmat(sbm$x[order(sbm$cl),order(sbm$cl)])
sol_greed=fit(new("sbm"),sbm$x,100,new("greed",nb_start=1))
table(sol_greed$cl)
sol_gen=fit(new("sbm"),sbm$x,100,new("genetic"))
table(sol_gen$cl)
library(greed)
sol_gen=fit(new("sbm"),sbm$x,100,new("genetic"))
library(greed)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(greed)
devtools::document()
devtools::document()
library(greed)
library(greed)
library(greed)
devtools::document()
devtools::document()
devtools::document()
library(greed)
library(greed)
graphics::plot()
graphics::plot
library(greed)
devtools::document()
devtools::document()
library(greed)
devtools::document()
library(greed)
devtools::document()
devtools::document()
devtools::document()
library(greed)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(greed)
library(greed)
devtools::document()
library(greed)
library(greed)
devtools::document()
library(greed)
devtools::document()
library(greed)
library(greed)
devtools::document()
library(greed)
devtools::document()
library(greed)
library(greed)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
devtools::document()
devtools::document()
library(greed)
library(greed)
?greed
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
sbm = rsbm(100,rep(1/5,5),diag(rep(0.1,5))+0.001)
library(greed)
sbm = rsbm(100,rep(1/5,5),diag(rep(0.1,5))+0.001)
sbm = greed::rsbm(100,rep(1/5,5),diag(rep(0.1,5))+0.001)
library(greed)
sbm = greed::rsbm(100,rep(1/5,5),diag(rep(0.1,5))+0.001)
library(greed)
simu = rsbm(100,rep(1/5,5),diag(rep(0.1,5))+0.001)
devtools::load_all("~/Projets/greed")
simu = rsbm(100,rep(1/5,5),diag(rep(0.1,5))+0.001)
simu = rsbm(100,rep(1/5,5),diag(rep(0.1,5))+0.001)
library(greed)
simu = rsbm(100,rep(1/5,5),diag(rep(0.1,5))+0.001)
library(greed)
simu = rsbm(100,rep(1/5,5),diag(rep(0.1,5))+0.001)
library(greed)
simu = rsbm(100,rep(1/5,5),diag(rep(0.1,5))+0.001)
library(greed)
library(greed)
library(greed)
simu = rsbm(100,rep(1/5,5),diag(rep(0.1,5))+0.001)
library(greed)
library(greed)
library(greed)
library(greed)
require(greed)
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
devtools::load_all("~/Projets/greed")
library(greed)
library(greed)
library(greed)
library(greed)
new("icl_fit")
library(greed)
rsbm(500,rep(1/5,5),diag(rep(0.1,5))+0.001)
rgraph=rsbm(500,rep(1/5,5),diag(rep(0.1,5))+0.001)
fit(rgrap$x,10,new("sbm"))
fit(rgraph$x,10,new("sbm"))
library(greed)
library(greed)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
mu[1:4,1:4]=diag(rep(1,4))+mu[1:4,1:4]
library(greed)
N=1000
D=20
pi=c(0.25,0.25,0.25,0.25)
mu=matrix(0.01,4,D)
mu[1:4,1:4]=diag(rep(1,4))+mu[1:4,1:4]
mu=mu/rowSums(mu)
mm=rmm(N,pi,mu,30)
sol=fit(mm$x,10)
sol=fit(mm$x,10)
table(sol@cl,mm$cl)
table(sol@cl,mm$cl)
plot(sol)
stats
isGeneric("plot")
?isGeneric
library(greed)
library(greed)
plot(1:5)
plot(1:5,1:5)
library(greed)
library(greed)
log(1)
methods::new()
library(greed)
library(greed)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
N=500
D=20
library(greed)
N=500
D=20
mu=matrix(0.01,4,D)
mu[1:4,1:4]=diag(rep(1,4))+mu[1:4,1:4]
mu=mu/rowSums(mu)
mm=rmm(N,pi,mu,30)
sol=fit(mm$x,10)
sol=fit(mm$x,10)
table(sol@cl,mm$cl)
clustplot(sol)
K=8
pi=rep(1/K,K)
epsilon = 0.0001
lambda  = 0.1
mu=matrix(epsilon,K,K)+diag(rep(lambda,K))
sbm = rsbm(N,pi,mu)
sol=fit(sbm$x,10)
table(sol@cl,sbm$cl)
clustplot(sol)
library(greed)
source('~/Projets/greed/R/alg_classes.R', echo=TRUE)
greed::
devtools::document()
icl_model()
library(greed)
devtools::document()
library(greed)
library(greed)
library(greed)
dendo =function(resH){
ggtree=data.frame(node=1:length(resH$tree),father=resH$tree,H=c(rep(0,resH$stats0$K),-resH$logalpha),x=0,xmin=0,xmax=0,k=c(rep(resH$stats0$K,resH$stats0$K),(resH$stats0$K-1):1))
fathers = c(which(resH$tree==0))
w = 1/2
for(l in 1:resH$stats0$K){
for(f in fathers){
sons=which(ggtree$father==f)
ggtree$x[sons[1]]=ggtree$x[f]+w
ggtree$x[sons[2]]=ggtree$x[f]-w
}
fathers=ggtree$node[ggtree$father %in% fathers]
w =w*0.5
}
leafs = which(ggtree$H==0)
or = order(ggtree[leafs,"x"])
ggtree$x[leafs[or]]=seq(-1,1,length.out = length(leafs))
for(n in setdiff(1:nrow(ggtree),leafs)){
sons=which(ggtree$father==n)
ggtree$x[n]=mean(ggtree$x[sons])
ggtree$xmin[n] = min(ggtree$x[sons])
ggtree$xmax[n] = max(ggtree$x[sons])
}
ggleaf=ggtree[ggtree$father!=0,]
#roots = ggtree[ggtree$k>=k,]
#roots = roots[!(roots$father %in% roots$node),]
#print(dim(roots))
ggplot()+geom_segment(aes(x=ggleaf$x,y=ggleaf$H,xend=ggleaf$x,yend=ggtree$H[ggleaf$father]))+
geom_segment(data=ggtree[ggtree$H>0,],aes(x=xmin,y=H,xend=xmax,yend=H))+
#geom_point(data=roots,aes(x=x,y=H),color="red")+
scale_x_continuous("",labels = c(),breaks = c())+
scale_y_continuous("-log(alpha)")+theme_bw()
}
clust_permutation = function(resH,K){
ggtree=data.frame(node=1:length(resH$tree),father=resH$tree,H=c(rep(0,resH$stats0$K),-resH$logalpha),k=c(rep(resH$stats0$K,resH$stats0$K),(resH$stats0$K-1):1),x=0,xmin=0,xmax=0)
fathers = c(which(resH$tree==0))
w = 1/2
for(l in 1:resH$stats0$K){
for(f in fathers){
sons=which(ggtree$father==f)
ggtree$x[sons[1]]=ggtree$x[f]+w
ggtree$x[sons[2]]=ggtree$x[f]-w
}
fathers=ggtree$node[ggtree$father %in% fathers]
w =w*0.5
}
roots = ggtree[ggtree$k>=K,]
roots = roots[!(roots$father %in% roots$node),]
order(roots$x)
}
K=8
pi=rep(1/K,K)
epsilon = 0.0001
lambda  = 0.1
mu=matrix(epsilon,K,K)+diag(rep(lambda,K))
sbm = rsbm(N,pi,mu)
sol=fit(sbm$x,10)
source('~/Projets/greed/R/alg_classes.R', echo=TRUE)
K=8
pi=rep(1/K,K)
epsilon = 0.0001
lambda  = 0.1
mu=matrix(epsilon,K,K)+diag(rep(lambda,K))
sbm = rsbm(N,pi,mu)
sol=fit(sbm$x,10)
hierch = fit_greed_path(sbm$x,sol)
hierch
hierch@path
library(greed)
hierch = fit_greed_path(sbm$x,sol)
hierch@path
sapply(hierch@path,function(p){p$icl})
data.frame(icl=sapply(hierch@path,function(p){p$icl}),logalpha=sapply(hierch@path,function(p){p$logaplha}),K=sapply(hierch@path,function(p){p$K}))
data.frame(icl=sapply(hierch@path,function(p){p$icl}),logalpha=sapply(hierch@path,function(p){p$logalpha}),K=sapply(hierch@path,function(p){p$K}))
gg=data.frame(icl=sapply(hierch@path,function(p){p$icl}),logalpha=sapply(hierch@path,function(p){p$logalpha}),K=sapply(hierch@path,function(p){p$K}))
library(ggplot2)
ggplot(gg)+geom_abline(aes(slope=K-1,intercept=icl))
?geom_abline
ggplot(gg)+geom_point(aes(x=logalpha,y=icl+(k-1)*logaplha))+geom_abline(aes(slope=K-1,intercept=icl))
ggplot(gg)+geom_point(aes(x=logalpha,y=icl+(K-1)*logaplha))+geom_abline(aes(slope=K-1,intercept=icl))
ggplot(gg)+geom_point(aes(x=logalpha,y=icl+(K-1)*logalpha))+geom_abline(aes(slope=K-1,intercept=icl))
ggplot(gg)+geom_point(aes(x=logalpha,y=icl+(K-1)*logalpha))+geom_abline(aes(slope=K-1,intercept=icl))
gg$logalpha[1:6]=gg$logalpha[2:7]
ggplot(gg)+geom_abline(aes(slope=K-1,intercept=icl))
ggplot(gg)+geom_point(aes(x=logalpha,y=icl+(K-1)*logalpha))+geom_abline(aes(slope=K-1,intercept=icl))
gg=data.frame(icl=sapply(hierch@path,function(p){p$icl}),logalpha=sapply(hierch@path,function(p){p$logalpha}),K=sapply(hierch@path,function(p){p$K}))
ggplot(gg)+geom_point(aes(x=logalpha,y=icl+(K-1)*logalpha))+geom_abline(aes(slope=K-1,intercept=icl))
ggplot(gg)+geom_point(aes(x=logalpha,y=icl+(K-2)*logalpha))+geom_abline(aes(slope=K-1,intercept=icl))
gg=data.frame(icl=sapply(hierch@path,function(p){p$icl}),logalpha=sapply(hierch@path,function(p){p$logalpha}),K=sapply(hierch@path,function(p){p$K}))
ggplot(gg)+geom_point(aes(x=logalpha,y=icl+(K-2)*logalpha))+geom_abline(aes(slope=K-1,intercept=icl))
ggplot(gg)+geom_point(aes(x=logalpha,y=icl+(K-1)*logalpha))+geom_abline(aes(slope=(K-1),intercept=icl))
diff(gg$icl)
hierch@path
gg=data.frame(icl=sapply(hierch@path,function(p){p$icl1}),logalpha=sapply(hierch@path,function(p){p$logalpha}),K=sapply(hierch@path,function(p){p$K}))
ggplot(gg)+geom_point(aes(x=logalpha,y=icl+(K-1)*logalpha))+geom_abline(aes(slope=(K-1),intercept=icl))
gg
diff(gg$icl)
gg$logalpha[2:7]=diff(gg$icl)
ggplot(gg)+geom_point(aes(x=logalpha,y=icl+(K-1)*logalpha))+geom_abline(aes(slope=(K-1),intercept=icl))
