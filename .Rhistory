fit_o = greed::fit_greed(mo,sbm$x,sample(1:20,nrow(sbm$x),replace = TRUE),type = "both")
sbm$x
fit_o = greed::fit_greed(mo,sbm$x,cl,type = "both")
cl=sample(1:20,nrow(sbm$x),replace = TRUE)
length(cl)
fit_o = greed::fit_greed(mo,sbm$x,cl,type = "both")
fit_o = greed::fit_greed(mo,list(X=sbm$x),cl,type = "both")
plot(fit_o)
plot(fit_o,type='nodelink')
p2=plot(fit)+ggtitle("hybrid + hierarchical ordering")
p1=plot(fit_o)+ggtitle("greedy")
p4=plot(fit,type='nodelink')+ggtitle("")
p3=plot(fit_o,type='nodelink')+ggtitle("")
ggarrange(p1,p2,p3,p4,nrow = 2,ncol=2,common.legend = TRUE)
ggarrange(p1,p2,p3,p4,nrow = 2,ncol=2,common.legend = TRUE)
N=1500
K=15
pi=rep(1/K,K)
lambda  = 0.1
lambda_o = 0.03
Ks=5
mu = bdiag(lapply(1:(K/Ks), function(k){matrix(lambda_o,Ks,Ks)+diag(rep(lambda,Ks))}))+0.001
sbm = rsbm(N,pi,mu)
fit = greed(sbm$x,model=new("sbm"))
fit_o = greed::fit_greed(new("sbm"),list(X=sbm$x),sample(1:20,nrow(sbm$x),replace = TRUE))
p2=plot(fit)+ggtitle("hybrid + hierarchical ordering")
p1=plot(fit_o)+ggtitle("greedy")
p4=plot(fit,type='nodelink')+ggtitle("")
p3=plot(fit_o,type='nodelink')+ggtitle("")
ggarrange(p1,p2,p3,p4,nrow = 2,ncol=2,common.legend = TRUE)
N=1500
K=15
pi=rep(1/K,K)
lambda  = 0.1
lambda_o = 0.025
Ks=5
mu = bdiag(lapply(1:(K/Ks), function(k){matrix(lambda_o,Ks,Ks)+diag(rep(lambda,Ks))}))+0.001
sbm = rsbm(N,pi,mu)
fit = greed(sbm$x,model=new("sbm"))
fit_o = greed::fit_greed(new("sbm"),list(X=sbm$x),sample(1:20,nrow(sbm$x),replace = TRUE))
p2=plot(fit)+ggtitle("hybrid + hierarchical ordering")
p1=plot(fit_o)+ggtitle("greedy")
p4=plot(fit,type='nodelink')+ggtitle("")
p3=plot(fit_o,type='nodelink')+ggtitle("")
ggarrange(p1,p2,p3,p4,nrow = 2,ncol=2,common.legend = TRUE)
library(future)
plan(multicore)
fit = greed(sbm$x,model=new("sbm"),alg = new("hybrid",pop_size=50))
fit_o = greed::fit_greed(new("sbm"),list(X=sbm$x),sample(1:20,nrow(sbm$x),replace = TRUE))
p2=plot(fit)+ggtitle("hybrid + hierarchical ordering")
p1=plot(fit_o)+ggtitle("greedy")
p4=plot(fit,type='nodelink')+ggtitle("")
p3=plot(fit_o,type='nodelink')+ggtitle("")
ggarrange(p1,p2,p3,p4,nrow = 2,ncol=2,common.legend = TRUE)
```{r,fig.height=8,fig.width=8}
p2=plot(fit)+ggtitle("hybrid + hierarchical ordering")
p1=plot(fit_o)+ggtitle("greedy")
p4=plot(fit,type='nodelink')+ggtitle("")
p3=plot(fit_o,type='nodelink')+ggtitle("")
ggarrange(p1,p2,p3,p4,nrow = 2,ncol=2,common.legend = TRUE)
fit_perm=fit
perm = sample(1:fit_perm@K)
perm
fit_perm@obs_stats$counts=fit_perm@obs_stats$counts[perm]
fit_perm@obs_stats$x_counts=fit_perm@obs_stats$x_counts[perm,perm]
plot(fit_perm,type='nodelink')
p1=plot(fit_o)+ggtitle("greedy")
p2=plot(fit_perm)+ggtitle("hybrid")
p3=plot(fit)+ggtitle("hybrid + hierarchical ordering")
p4=plot(fit_o,type='nodelink')+ggtitle("")
p5=plot(fit_perm,type='nodelink')+ggtitle("")
p6=plot(fit,type='nodelink')+ggtitle("")
ggarrange(p1,p2,p3,p4,p5,p6,nrow = 2,ncol=3,common.legend = TRUE)
p1=plot(fit_o)+ggtitle("greedy")
p2=plot(fit_perm)+ggtitle("hybrid")
p3=plot(fit)+ggtitle("hybrid + hierarchical ordering")
p4=plot(fit_o,type='nodelink')+ggtitle("")
p5=plot(fit_perm,type='nodelink')+ggtitle("")
p6=plot(fit,type='nodelink')+ggtitle("")
ggarrange(p1,p2,p3,p4,p5,p6,nrow = 2,ncol=3,common.legend = TRUE)
p1=plot(fit_o)+ggtitle("greedy")
p2=plot(fit_perm)+ggtitle("hybrid")
p3=plot(fit)+ggtitle("hybrid + hierarchical ordering")
p4=plot(fit_o,type='nodelink')+ggtitle("")
p5=plot(fit_perm,type='nodelink')+ggtitle("")
p6=plot(fit,type='nodelink')+ggtitle("")
ggarrange(p1,p2,p3,p4,p5,p6,nrow = 2,ncol=3,common.legend = TRUE)
fit@train_hist
ggplot(fit@train_hist)+geom_boxplot(aes(x=generation,y=icl,group=generation))
ggplot(fit@train_hist)+geom_boxplot(aes(x=generation,y=icl,group=generation))+theme_bw()
ggplot(fit@train_hist)+geom_boxplot(aes(x=generation,y=icl,group=generation))+geom_jitter(aes(x=generation,y=icl,group=generation))+theme_bw()
ggplot(fit@train_hist)+geom_boxplot(aes(x=generation,y=icl,group=generation))+geom_jitte(aes(x=generation,y=icl,group=generation))+theme_bw()
ggplot(fit@train_hist)+geom_boxplot(aes(x=generation,y=icl,group=generation))+geom_point(aes(x=generation,y=icl,group=generation))+theme_bw()
ggplot(fit@train_hist)+geom_boxplot(aes(x=generation,y=icl,group=generation))+geom_point(aes(x=generation,y=icl,group=generation))+theme_bw()
ggplot(fit@train_hist)+geom_boxplot(aes(x=generation,y=icl,group=generation))+geom_point(aes(x=generation,y=icl,group=generation))+theme_bw()
ggarrange()
?ggarrange()
p1=plot(fit_o)+ggtitle("greedy")
p2=plot(fit_perm)+ggtitle("hybrid")
p3=plot(fit)+ggtitle("hybrid + hierarchical ordering")
p4=plot(fit_o,type='nodelink')+ggtitle("")
p5=plot(fit_perm,type='nodelink')+ggtitle("")
p6=plot(fit,type='nodelink')+ggtitle("")
ggarrange(p1,p2,p3,p4,p5,p6,nrow = 2,ncol=3,common.legend = TRUE,legend="left")
cl=spectral(sbm$X,15)
cl=spectral(sbm$x,15)
fit_spgreed::fit_greed(new("sbm"),list(X=sbm$x),type="none")
fit_sp=greed::fit_greed(new("sbm"),list(X=sbm$x),type="none")
fit_sp=greed::fit_greed(new("sbm"),list(X=sbm$x),cl,type="none")
plot(fit_sp)
plot(fit_sp,type='nodelink')
fit_sp=greed::fit_greed(new("sbm"),list(X=sbm$x),cl,type="none")
fit_sp_init=greed(sbm$x,new("sbm"),alg=new("seeded"))
fit_sp_init=greed(sbm$x,new("sbm"),alg=new("seed"))
new("seed")
fit_sp_init=greed(sbm$x,model=new("sbm"),alg=new("seed"))
library(greed)
fit_sp_init=greed(sbm$x,model=new("sbm"),alg=new("seed"))
plot(fit_sp_init)
fit_sp_init=greed(sbm$x,model=new("sbm"),alg=new("seed"))
plot(fit_sp_init)
fit_sp_init=greed(sbm$x,model=new("sbm"),alg=new("seed"))
plot(fit_sp_init)
knitr::opts_chunk$set(echo = TRUE)
fit_sp_init=greed(sbm$x,new("sbm"),alg=new("seed"))
fit_sp_init=greed(sbm$x,model=new("sbm"),alg=new("seed"))
gen=ggplot(fit@train_hist)+geom_boxplot(aes(x=generation,y=icl,group=generation))+geom_point(aes(x=generation,y=icl,group=generation))+
ggtitle("Evolution of ICL with respect to the solutions generation")+
theme_bw()
tree=plot(fit,type='tree')+ggtitle("Dendogramme derived from the best solution")
ggarrange(gen,tree)
p1=plot(fit_blogs)+ggtitle("Blogs")
p2=plot(fit_books)+ggtitle("Books")
p3=plot(fit_foot)+ggtitle("Football")
p4=plot(fit_jazz)+ggtitle("Jazz")
p5=plot(fit_blogs,type='nodelink')+ggtitle("")
p6=plot(fit_books,type='nodelink')+ggtitle("")
p7=plot(fit_foot,type='nodelink')+ggtitle("")
p8=plot(fit_jazz,type='nodelink')+ggtitle("")
p9=plot(fit_blogs,type='tree')+ggtitle("")
p10=plot(fit_books,type='tree')+ggtitle("")
p11=plot(fit_foot,type='tree')+ggtitle("")
p12=plot(fit_jazz,type='tree')+ggtitle("")
p13=plot(cut(fit_blogs,2))+ggtitle("")
p14=plot(cut(fit_books,3))+ggtitle("")
p15=plot(cut(fit_foot,10))+ggtitle("")
p16=plot(cut(fit_jazz,4))+ggtitle("")
ggarrange(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15,p16,nrow = 4,ncol=4,common.legend = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(greed)
library(Matrix)
library(ggpubr)
library(future)
plan(multicore)
N=1500
K=15
pi=rep(1/K,K)
lambda  = 0.1
lambda_o = 0.025
Ks=5
mu = bdiag(lapply(1:(K/Ks), function(k){matrix(lambda_o,Ks,Ks)+diag(rep(lambda,Ks))}))+0.001
sbm = rsbm(N,pi,mu)
fit = greed(sbm$x,model=new("sbm"),alg = new("hybrid",pop_size=50))
fit_o = greed::fit_greed(new("sbm"),list(X=sbm$x),sample(1:20,nrow(sbm$x),replace = TRUE))
fit_perm=fit
perm = sample(1:fit_perm@K)
fit_perm@obs_stats$counts=fit_perm@obs_stats$counts[perm]
fit_perm@obs_stats$x_counts=fit_perm@obs_stats$x_counts[perm,perm]
cl=spectral(sbm$x,15)
fit_sp=greed::fit_greed(new("sbm"),list(X=sbm$x),cl,type="none")
fit_sp_init=greed(sbm$x,model=new("sbm"),alg=new("seed"))
p1=plot(fit_o)+ggtitle("greedy")
p2=plot(fit_perm)+ggtitle("hybrid")
p3=plot(fit)+ggtitle("hybrid + hierarchical ordering")
p4=plot(fit_o,type='nodelink')+ggtitle("")
p5=plot(fit_perm,type='nodelink')+ggtitle("")
p6=plot(fit,type='nodelink')+ggtitle("")
ggarrange(p1,p2,p3,p4,p5,p6,nrow = 2,ncol=3,common.legend = TRUE,legend="left")
gen=ggplot(fit@train_hist)+geom_boxplot(aes(x=generation,y=icl,group=generation))+geom_point(aes(x=generation,y=icl,group=generation))+
ggtitle("Evolution of ICL with respect generation")+
theme_bw()
tree=plot(fit,type='tree')+ggtitle("Dendogramme derived from the best solution")
ggarrange(gen,tree)
for (s in 1:50){
}
N=1500
K=15
pi=rep(1/K,K)
lambda  = 0.1
lambda_o = 0.025
Ks=5
mu = bdiag(lapply(1:(K/Ks), function(k){matrix(lambda_o,Ks,Ks)+diag(rep(lambda,Ks))}))+0.001
sbm = rsbm(N,pi,mu)
data("Blogs")
fit_blogs = greed(Blogs$X,model=new("dcsbm"))
data("Books")
fit_books = greed(Books$X,model=new("dcsbm"))
data("Football")
fit_foot = greed(Football$X,model=new("dcsbm"))
data("Jazz")
fit_jazz = greed(Jazz,model=new("dcsbm"))
S=matrix(0,1500,50)
Fi=matrix(0,1500,50)
Fi_o=matrix(0,1500,50)
Fi_s=matrix(0,1500,50)
Fi_si=matrix(0,1500,50)
Fi_ms=matrix(0,1500,50)
Xlist = list()
for (s in 1:1){
N=1500
K=15
pi=rep(1/K,K)
lambda  = 0.1
lambda_o = 0.025
Ks=5
mu = bdiag(lapply(1:(K/Ks), function(k){matrix(lambda_o,Ks,Ks)+diag(rep(lambda,Ks))}))+0.001
sbm = rsbm(N,pi,mu)
S[,s]=sbm$cl
Xl[[s]]=sbm
fit = greed(sbm$x,model=new("sbm"),alg = new("hybrid",pop_size=50))
Fi[,s]=fit@cl
fit_o = greed::fit_greed(new("sbm"),list(X=sbm$x),sample(1:20,nrow(sbm$x),replace = TRUE))
Fi_o[,s] = fit_o@cl
cl=spectral(sbm$x,15)
Fi_s[,s] = cl
fit_sp_init=greed(sbm$x,model=new("sbm"),alg=new("seed"))
Fi_si[,s] = fit_sp_init@cl
fit_ms = greed(sbm$x,model=new("sbm"),alg = new("multistart",nb_start=50))
Fi_ms[,s]=fit_ms@cl
}
S=matrix(0,1500,50)
Fi=matrix(0,1500,50)
Fi_o=matrix(0,1500,50)
Fi_s=matrix(0,1500,50)
Fi_si=matrix(0,1500,50)
Fi_ms=matrix(0,1500,50)
Xlist = list()
for (s in 1:1){
N=1500
K=15
pi=rep(1/K,K)
lambda  = 0.1
lambda_o = 0.025
Ks=5
mu = bdiag(lapply(1:(K/Ks), function(k){matrix(lambda_o,Ks,Ks)+diag(rep(lambda,Ks))}))+0.001
sbm = rsbm(N,pi,mu)
S[,s]=sbm$cl
Xlist[[s]]=sbm
fit = greed(sbm$x,model=new("sbm"),alg = new("hybrid",pop_size=50))
Fi[,s]=fit@cl
fit_o = greed::fit_greed(new("sbm"),list(X=sbm$x),sample(1:20,nrow(sbm$x),replace = TRUE))
Fi_o[,s] = fit_o@cl
cl=spectral(sbm$x,15)
Fi_s[,s] = cl
fit_sp_init=greed(sbm$x,model=new("sbm"),alg=new("seed"))
Fi_si[,s] = fit_sp_init@cl
fit_ms = greed(sbm$x,model=new("sbm"),alg = new("multistart",nb_start=50))
Fi_ms[,s]=fit_ms@cl
}
S=matrix(0,1500,50)
Fi=matrix(0,1500,50)
Fi_o=matrix(0,1500,50)
Fi_s=matrix(0,1500,50)
Fi_si=matrix(0,1500,50)
Fi_ms=matrix(0,1500,50)
Xlist = list()
for (s in 1:1){
N=1500
K=15
pi=rep(1/K,K)
lambda  = 0.1
lambda_o = 0.025
Ks=5
mu = bdiag(lapply(1:(K/Ks), function(k){matrix(lambda_o,Ks,Ks)+diag(rep(lambda,Ks))}))+0.001
sbm = rsbm(N,pi,mu)
S[,s]=sbm$cl
Xlist[[s]]=sbm
fit = greed(sbm$x,model=new("sbm"),alg = new("hybrid",pop_size=50))
Fi[,s]=fit@cl
fit_o = greed::fit_greed(new("sbm"),list(X=sbm$x),sample(1:20,nrow(sbm$x),replace = TRUE))
Fi_o[,s] = fit_o@cl
cl=spectral(sbm$x,15)
Fi_s[,s] = cl
fit_sp_init=greed(sbm$x,model=new("sbm"),alg=new("seed"))
Fi_si[,s] = fit_sp_init@cl
fit_ms = greed(sbm$x,model=new("sbm"),alg = new("multistarts",nb_start=50))
Fi_ms[,s]=fit_ms@cl
}
Fi
table(Fi[,1],S[,1])
table(Fi_o[,1],S[,1])
table(Fi_s[,1],S[,1])
table(Fi_si[,1],S[,1])
table(Fi_ms[,1],S[,1])
Nbsim = 100
S=matrix(0,1500,Nbsim)
Fi=matrix(0,1500,Nbsim)
Fi_o=matrix(0,1500,Nbsim)
Fi_s=matrix(0,1500,Nbsim)
Fi_si=matrix(0,1500,Nbsim)
Fi_ms=matrix(0,1500,Nbsim)
Xlist = list()
for (s in 1:Nbsim){
N=1500
K=15
pi=rep(1/K,K)
lambda  = 0.1
lambda_o = 0.025
Ks=5
mu = bdiag(lapply(1:(K/Ks), function(k){matrix(lambda_o,Ks,Ks)+diag(rep(lambda,Ks))}))+0.001
sbm = rsbm(N,pi,mu)
S[,s]=sbm$cl
Xlist[[s]]=sbm
fit = greed(sbm$x,model=new("sbm"),alg = new("hybrid",pop_size=50))
Fi[,s]=fit@cl
fit_o = greed::fit_greed(new("sbm"),list(X=sbm$x),sample(1:20,nrow(sbm$x),replace = TRUE))
Fi_o[,s] = fit_o@cl
cl=spectral(sbm$x,15)
Fi_s[,s] = cl
fit_sp_init=greed(sbm$x,model=new("sbm"),alg=new("seed"))
Fi_si[,s] = fit_sp_init@cl
fit_ms = greed(sbm$x,model=new("sbm"),alg = new("multistarts",nb_start=50))
Fi_ms[,s]=fit_ms@cl
}
plan(multicore)
Nbsim = 100
S=matrix(0,1500,Nbsim)
Fi=matrix(0,1500,Nbsim)
Fi_o=matrix(0,1500,Nbsim)
Fi_s=matrix(0,1500,Nbsim)
Fi_si=matrix(0,1500,Nbsim)
Fi_ms=matrix(0,1500,Nbsim)
Xlist = list()
for (s in 1:Nbsim){
N=1500
K=15
pi=rep(1/K,K)
lambda  = 0.1
lambda_o = 0.025
Ks=5
mu = bdiag(lapply(1:(K/Ks), function(k){matrix(lambda_o,Ks,Ks)+diag(rep(lambda,Ks))}))+0.001
sbm = rsbm(N,pi,mu)
S[,s]=sbm$cl
Xlist[[s]]=sbm
fit = greed(sbm$x,model=new("sbm"),alg = new("hybrid",pop_size=50))
Fi[,s]=fit@cl
fit_o = greed::fit_greed(new("sbm"),list(X=sbm$x),sample(1:20,nrow(sbm$x),replace = TRUE))
Fi_o[,s] = fit_o@cl
cl=spectral(sbm$x,15)
Fi_s[,s] = cl
fit_sp_init=greed(sbm$x,model=new("sbm"),alg=new("seed"))
Fi_si[,s] = fit_sp_init@cl
fit_ms = greed(sbm$x,model=new("sbm"),alg = new("multistarts",nb_start=50))
Fi_ms[,s]=fit_ms@cl
}
Fi_ms
s
library(rjson)
library(dplyr)
library(tidyr)
library(Matrix)
library(future)
plan(multisession)
scrutins_json = fromJSON(file="./data-raw/Scrutins_XV.json")
scrutins = scrutins_json$scrutin$scrutin
votes = NULL
for (is in 1:length(scrutins)){
groupes = scrutins[[is]]$ventilationVotes$organe$groupes$groupe
for (g in 1:length(groupes)){
if(as.numeric(groupes[[g]]$vote$decompteVoix$pour)>1){
pours   =  tibble(scrutin = is, groupe= groupes[[g]]$organeRef, acteur=sapply(groupes[[g]]$vote$decompteNominatif$pours$votant,function(v){v$acteurRef}),mandat=sapply(groupes[[g]]$vote$decompteNominatif$pours$votant,function(v){v$mandatRef}), vote='pour')
votes = votes %>% bind_rows(pours)
}
if(as.numeric(groupes[[g]]$vote$decompteVoix$pour)==1){
pours   =  tibble(scrutin = is, groupe= groupes[[g]]$organeRef, acteur=groupes[[g]]$vote$decompteNominatif$pours$votant$acteurRef, mandat=groupes[[g]]$vote$decompteNominatif$pours$votant$mandatRef, vote='pour')
votes = votes %>% bind_rows(pours)
}
if(as.numeric(groupes[[g]]$vote$decompteVoix$contre)>1){
contres = tibble(scrutin = is, groupe= groupes[[g]]$organeRef,acteur=sapply(groupes[[g]]$vote$decompteNominatif$contres$votant,function(v){v$acteurRef}), mandat=sapply(groupes[[g]]$vote$decompteNominatif$contres$votant,function(v){v$mandatRef}), vote='contre')
votes = votes %>% bind_rows(contres)
}
if(as.numeric(groupes[[g]]$vote$decompteVoix$contre)==1){
pours   =  tibble(scrutin = is, groupe= groupes[[g]]$organeRef,  acteur=groupes[[g]]$vote$decompteNominatif$contres$votant$acteurRef,mandat=groupes[[g]]$vote$decompteNominatif$contres$votant$mandatRef, vote='contre')
votes = votes %>% bind_rows(pours)
}
}
}
sumscr = votes %>% group_by(scrutin) %>% summarise(nbv = n(),p=mean(if_else(vote=="pour",1,0)))
vclean = votes %>% select(-groupe,-mandat)
Xv=spread(vclean,scrutin,vote)
iss = sumscr %>% filter(nbv>100)
ij = which(Xv[,iss$scrutin+1]=="pour",arr.ind = TRUE)
Xxv=sparseMatrix(ij[,1],ij[,2],x = rep(1,nrow(ij)))
meta=fromJSON(file="/home/come/Bureau/AMO10_deputes_actifs_mandats_actifs_organes_XV.json")
meta=fromJSON(file="./data-raw/AMO30_tous_acteurs_tous_mandats_tous_organes_historique.json")
deputes.df=do.call(rbind,lapply(meta$export$acteurs$acteur,
function(dep){
tibble(uid=dep$uid[[2]],name=paste(dep$etatCivil$ident[1:3],collapse = " "),
mandat=sapply(dep$mandats$mandat,function(m){m$uid}),
organe=sapply(dep$mandats$mandat,function(m){m$organes$organeRef[[1]]}))}))
orgs.df = do.call(rbind,lapply(meta$export$organes$organe,
function(org){
tibble(uid=org$uid,name=org$libelle,
name_abr = org$libelleAbrev,
type=org$codeType)}))
parties.df = deputes.df %>%
left_join(orgs.df,by=c("organe"="uid")) %>%
filter(type =="PARPOL") %>%
arrange(uid,desc(mandat)) %>%
filter(!duplicated(uid)) %>%
mutate(partie=name.y,partie_abr=name_abr) %>%
select(uid,partie,partie_abr)
groupes.df =deputes.df%>% left_join(orgs.df,by=c("organe"="uid")) %>%
filter(type =="GP") %>%
arrange(uid,desc(mandat)) %>%
filter(!duplicated(uid)) %>%
mutate(groupe=name.y,groupe_abr=name_abr) %>%
select(uid,groupe,groupe_abr)
assemblee.df =deputes.df%>% left_join(orgs.df,by=c("organe"="uid")) %>%
filter(type =="ASSEMBLEE") %>%
arrange(uid,desc(mandat)) %>%
filter(!duplicated(uid)) %>%
mutate(name=name.x,mandat_an=mandat) %>%
select(uid,name,mandat_an)
dep_meta=assemblee.df %>% left_join(parties.df) %>% left_join(groupes.df)
dim(Xxv)
Xg=sparseMatrix(dims = c(593+570,593+570))
Xg=sparseMatrix(c(),c(),dims = c(593+570,593+570))
Xg[1:593,1:570]=Xxv
Xxv
Xg[1:593,1:570]=Xxv
Xg
Xg=sparseMatrix(c(),c(),x = c(),dims = c(593+570,593+570))
Xg=sparseMatrix(c(1),c(1),x = c(0),dims = c(593+570,593+570))
Xg[1:593,1:570]=Xxv
Xg[594:(570+593),570:(570+593)]=t(Xxv)
Xg[594:(570+593),571:(570+593)]=t(Xxv)
fit=greed(Xg,30)
plot(fit)
table(fit@cl,c(rep(1,570),rep(2,593)))
fit@icl
plot(fit,type='tree')
plot(fit)
sum(Xg-t(Xg))
fit@obs_stats$x_counts
fit@cl
ggplot(fit@train_hist)+geom_boxplot(aes(x=generation,group=generation,y=icl))
Xg=sparseMatrix(c(1),c(1),x = c(0),dims = c(593+570,593+570))
Xg[594:(570+593),1:570]=t(Xxv)
Xg[594:(570+593),1:570]=Xxv
Xxv
Xg=sparseMatrix(c(1),c(1),x = c(0),dims = c(593+570,593+570))
Xg[1:593,594:(570+593)]=Xxv
Xg[594:(570+593),1:593]=t(Xxv)
Xg=sparseMatrix(c(1),c(1),x = c(0),dims = c(593+570,593+570))
Xg[1:593,594:(570+593)]=Xxv
Xg[594:(570+593),1:593]=t(Xxv)
sol=greed(Xxv,50)
plan(multisession())
plan(multisession
)
sol=greed(Xg,50)
plot(sol)
table(fit@cl,c(rep(1,570),rep(2,593)))
table(sol@cl,c(rep(1,570),rep(2,593)))
sol@obs_stats$x_counts
plot(sol,type='tree')
ggplot(fit@train_hist)+geom_boxplot(aes(x=generation,group=generation,y=icl))
ggplot(sol@train_hist)+geom_boxplot(aes(x=generation,group=generation,y=icl))
sol=greed(Xg,50,alg=new("hybrid",pop_size=50))
ggplot(sol@train_hist)+geom_boxplot(aes(x=generation,group=generation,y=icl))
plot(sol,type='tree')
plot(sol)
table(sol@cl,c(rep(1,570),rep(2,593)))
colSums(Xxv)
rowSums(Xxv)
plot(sol,type='tree')
plot(sol)
pprobs = post_probs(new("mm"),list(X=Xxv),sol@cl[1:570])
clusters=tibble(uid = unlist(Xv[1:nrow(Xxv),1]),cl=sol@cl[1:570])
table(sol@cl,c(rep(1,593),rep(2,570)))
clusters=tibble(uid = unlist(Xv[1:nrow(Xxv),1]),cl=sol@cl[1:593])
clusters.dep.df=clusters %>% left_join(dep_meta,by="uid")
table(clusters.dep.df$cl,clusters.dep.df$groupe)
table(clusters.dep.df$cl,clusters.dep.df$partie_abr)
clusters.dep.df
clusters.dep.df %>% filter(partie_abr=="PCF" & cl==27)
clusters.dep.df %>% filter(partie_abr=="DEBOU" & cl==12)
clusters.dep.df %>% filter(partie_abr=="DEBOU" & cl==7)
clusters.dep.df %>% filter(partie_abr=="FI")
clusters.dep.df %>% filter(partie_abr=="FI") %>% arrange(cl)
pprobs = post_probs(new("mm"),list(X=Xxv),sol@cl[1:593])
clusters=tibble(uid = unlist(Xv[1:nrow(Xxv),1]),cl=sol@cl[1:593],pr=apply(pprobs,1,max))
clusters.dep.df=clusters %>% left_join(dep_meta,by="uid")
clusters.dep.df %>% filter(partie_abr=="FI") %>% arrange(cl)
clusters.dep.df %>% filter(partie_abr=="LAREM") %>% arrange(cl)
clusters.dep.df %>% filter(partie_abr=="LAREM") %>% arrange(cl) %>% tail()
scrutins[[5]]$titre
scrutins[[5]]$objet
scrutins[[5]]$demandeur
scrutins[[5]]$demandeur$texte
scrutins[[5]]$miseAuPoint
sol=greed(Xxv,15)
library(greed)
Xxv
rownames(Xxv)
rownames(Xxv)=unlist(Xv[1:nrow(Xxv),1])
labels=tibble(uid=rownames(Xxv)) %>% left_join(dep_meta,by="uid")
labels
FranchParliament=list(X=Xxv,labels=labels)
FrenchParliament=list(X=Xxv,labels=labels)
devtools::use_data(FrenchParliament)
