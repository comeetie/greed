data("Lpolblogs")
Lpolblogs=Lpolblogs[C$membership==1]
devtools::use_data(Lpolblogs,overwrite = TRUE)
spectral= function(X,K){
X = X+t(X)
X[X>0]=1
nu=sum(X)/dim(X)[1]
L = diag((rowSums(X)+nu)^-0.5)%*%X%*%diag((colSums(X)+nu)^-0.5)
S = svd(L,K,K)
Xp=S$u
Xp = S$u/rowSums(S$u)
Xp[rowSums(S$u)==0,]=0
km = kmeans(Xp,K)
km$cluster
}
cl=spectral(Xpolblogs,2)
table(cl,Lpolblogs)
X=Xpolblogs
X = X+t(X)
X[X>0]=1
nu=sum(X)/dim(X)[1]
nu
L = diag((rowSums(X)+nu)^-0.5)%*%X%*%diag((rowSums(X)+nu)^-0.5)
K=2
S = svd(L,K,K)
Xp = S$u/rowSums(S$u)
Xp[rowSums(S$u)==0,]=0
km = kmeans(Xp,K)
table(km,Lpolblogs)
table(km$cluster,Lpolblogs)
S = eigen(L)
S$u =S$vectors
Xp = S$u/rowSums(S$u)
Xp[rowSums(S$u)==0,]=0
km = kmeans(Xp,K)
table(km$cluster,Lpolblogs)
S$u =S$vectors
km = kmeans(S$u,K)
table(km$cluster,Lpolblogs)
length(Lpolblogs)
dim(X)
sol=fit(X,25,new("dcsbm"))
table(sol$cl,Lpolblogs)
table(sol@cl,Lpolblogs)
table(sol@cl,Lpolblogs)[1,1:14]
table(sol@cl,Lpolblogs)[1:14,1]
sum(table(sol@cl,Lpolblogs)[1:14,1])
sum(table(sol@cl,Lpolblogs)[1:14,1])+sum(table(sol@cl,Lpolblogs)[15:22,2])
plot(sol,'blocks')
plot(sol,type='blocks')
nodelink = function(sol){
ij = Matrix::which(sol@obs_stats$x_counts>0,arr.ind = TRUE)
ld = sol@obs_stats$x_counts
#/(sol@obs_stats$counts%*%t(sol@obs_stats$counts))
ij = ij[ij[,1]!=ij[,2],]
gglink = data.frame(from=ij[,1],to=ij[,2],p=ld[ij])
ggnode = data.frame(i=1:length(sol@obs_stats$counts),pi=sol@obs_stats$counts)
ggplot()+geom_curve(data=gglink,aes(x=from,xend=to,y=ifelse(from<to,-0.3,0.3),yend=ifelse(from<to,-0.3,0.3),size=p,alpha=p),arrow=arrow(length = unit(2,"mm")),curvature = 0.7)+
scale_x_continuous("",c())+
scale_y_continuous("",c(),limits = c(-5,5))+
#scale_size("Ld sizes:",limits=c(0,max(gglink$p)))+
scale_alpha("Link density:",limits=c(0,max(gglink$p)))+
scale_size_area("Clusters size:",limits=c(0,max(gglink$p)),max_size = 4)+
geom_point(data=ggnode,aes(x=i,y=0,size=pi))+
#coord_equal()+
theme_minimal()
}
nodelink(sol)
sol=fit(Xpolblogs,25,new("dcsbm"))
library(greed)
sol=fit(Xpolblogs,25,new("dcsbm"))
nodelink(sol)
nodelink = function(sol){
ij = Matrix::which(sol@obs_stats$x_counts>0,arr.ind = TRUE)
ld = sol@obs_stats$x_counts
#/(sol@obs_stats$counts%*%t(sol@obs_stats$counts))
ij = ij[ij[,1]!=ij[,2],]
gglink = data.frame(from=ij[,1],to=ij[,2],p=ld[ij])
ggnode = data.frame(i=1:length(sol@obs_stats$counts),pi=diag(sol@obs_stats$x_counts))
ggplot2::ggplot()+ggplot2::geom_curve(data=gglink,aes(x=from,xend=to,y=ifelse(from<to,-0.3,0.3),yend=ifelse(from<to,-0.3,0.3),size=p,alpha=p),arrow=arrow(length = unit(2,"mm")),curvature = 0.7)+
ggplot2::scale_x_continuous("",c())+
ggplot2::scale_y_continuous("",c(),limits = c(-5,5))+
#scale_size("Ld sizes:",limits=c(0,max(gglink$p)))+
ggplot2::scale_alpha("Link density:",limits=c(0,max(gglink$p)))+
ggplot2::scale_size_area("Clusters size:",limits=c(0,max(gglink$p)),max_size = 4)+
ggplot2::geom_point(data=ggnode,aes(x=i,y=0,size=pi))+
#coord_equal()+
ggplot2::theme_minimal()
}
nodelink(sol)
nodelink = function(sol){
ij = Matrix::which(sol@obs_stats$x_counts>0,arr.ind = TRUE)
ld = sol@obs_stats$x_counts
#/(sol@obs_stats$counts%*%t(sol@obs_stats$counts))
ij = ij[ij[,1]!=ij[,2],]
gglink = data.frame(from=ij[,1],to=ij[,2],p=ld[ij])
ggnode = data.frame(i=1:length(sol@obs_stats$counts),pi=diag(sol@obs_stats$x_counts))
ggplot2::ggplot()+ggplot2::geom_curve(data=gglink,aes(x=from,xend=to,y=ifelse(from<to,-0.3,0.3),yend=ifelse(from<to,-0.3,0.3),size=p,alpha=p),arrow=arrow(length = unit(2,"mm")),curvature = 0.7)+
ggplot2::scale_x_continuous("",c())+
ggplot2::scale_y_continuous("",c(),limits = c(-5,5))+
#scale_size("Ld sizes:",limits=c(0,max(gglink$p)))+
ggplot2::scale_alpha("Link density:",limits=c(0,max(gglink$p)))+
ggplot2::scale_size_area("Clusters size:",limits=c(0,max(ggnode$pi)),max_size = 4)+
ggplot2::geom_point(data=ggnode,aes(x=i,y=0,size=pi))+
#coord_equal()+
ggplot2::theme_minimal()
}
nodelink(sol)
graph_block = function(x){
K = length(x@obs_stats$counts)
gg=data.frame(kc=rep(cumsum(x@obs_stats$counts),each=K),
lc=rep(cumsum(x@obs_stats$counts),K),
sizek = rep(x@obs_stats$counts,each=K),
sizel = rep(x@obs_stats$counts,K),
count=as.vector(x@obs_stats$x_counts))
ggplot2::ggplot(gg[gg$count>0,])+ggplot2::geom_tile(ggplot2::aes(x=kc-sizek/2,y=lc-sizel/2,width=sizek,height=sizel,fill=count/(sizek*sizel),alpha=count/(sizek*sizel)))+
ggplot2::scale_fill_distiller("Link density",type="seq",direction = 1)+
ggplot2::scale_alpha("Link density")+
ggplot2::ggtitle(paste0("SBM Model with : ",max(x@cl)," clusters."))+
ggplot2::scale_x_continuous("",breaks=cumsum(x@obs_stats$counts),labels = ifelse(x@obs_stats$counts/sum(x@obs_stats$counts)>0.05,paste0(round(100*x@obs_stats$counts/sum(x@obs_stats$counts)),"%"),""),minor_breaks = NULL)+
ggplot2::scale_y_continuous("",breaks=cumsum(x@obs_stats$counts),labels = ifelse(x@obs_stats$counts/sum(x@obs_stats$counts)>0.05,paste0(round(100*x@obs_stats$counts/sum(x@obs_stats$counts)),"%"),""),minor_breaks = NULL)+
ggplot2::coord_fixed()+ggplot2::theme_bw()
}
graph_blocks = function(x){
K = length(x@obs_stats$counts)
gg=data.frame(kc=rep(cumsum(x@obs_stats$counts),each=K),
lc=rep(cumsum(x@obs_stats$counts),K),
sizek = rep(x@obs_stats$counts,each=K),
sizel = rep(x@obs_stats$counts,K),
count=as.vector(x@obs_stats$x_counts))
ggplot2::ggplot(gg[gg$count>0,])+ggplot2::geom_tile(ggplot2::aes(x=kc-sizek/2,y=lc-sizel/2,width=sizek,height=sizel,fill=count/(sizek*sizel),alpha=count/(sizek*sizel)))+
ggplot2::scale_fill_distiller("Link density",type="seq",direction = 1)+
ggplot2::scale_alpha("Link density")+
ggplot2::ggtitle(paste0("SBM Model with : ",max(x@cl)," clusters."))+
ggplot2::scale_x_continuous("",breaks=cumsum(x@obs_stats$counts),labels = ifelse(x@obs_stats$counts/sum(x@obs_stats$counts)>0.05,paste0(round(100*x@obs_stats$counts/sum(x@obs_stats$counts)),"%"),""),minor_breaks = NULL)+
ggplot2::scale_y_continuous("",breaks=cumsum(x@obs_stats$counts),labels = ifelse(x@obs_stats$counts/sum(x@obs_stats$counts)>0.05,paste0(round(100*x@obs_stats$counts/sum(x@obs_stats$counts)),"%"),""),minor_breaks = NULL)+
ggplot2::coord_fixed()+ggplot2::theme_bw()
}
graph_blocks(sol)
nodelink = function(sol){
ij = Matrix::which(sol@obs_stats$x_counts>0,arr.ind = TRUE)
ld = sol@obs_stats$x_counts
#/(sol@obs_stats$counts%*%t(sol@obs_stats$counts))
ij = ij[ij[,1]!=ij[,2],]
gglink = data.frame(from=ij[,1],to=ij[,2],p=ld[ij])
ggnode = data.frame(i=1:length(sol@obs_stats$counts),pi=diag(sol@obs_stats$x_counts))
ggplot2::ggplot()+ggplot2::geom_curve(data=gglink,aes(x=from,xend=to,y=ifelse(from<to,-0.3,0.3),yend=ifelse(from<to,-0.3,0.3),size=p,alpha=p),arrow=arrow(length = unit(2,"mm")),curvature = 0.7)+
ggplot2::scale_x_continuous("",c())+
ggplot2::scale_y_continuous("",c(),limits = c(-5,5))+
#scale_size("Ld sizes:",limits=c(0,max(gglink$p)))+
ggplot2::scale_alpha("Link density:",limits=c(0,max(gglink$p)))+
ggplot2::scale_size_area("Clusters size:",limits=c(0,max(ggnode$pi)),max_size = 4)+
ggplot2::geom_point(data=ggnode,aes(x=i,y=0,size=pi))+
ggplot2::ggtitle(paste0(toupper(sol@model@name)," model with : ",max(x@cl)," clusters."))+
#coord_equal()+
ggplot2::theme_minimal()
}
nodelink(sol)
nodelink = function(sol){
ij = Matrix::which(sol@obs_stats$x_counts>0,arr.ind = TRUE)
ld = sol@obs_stats$x_counts
#/(sol@obs_stats$counts%*%t(sol@obs_stats$counts))
ij = ij[ij[,1]!=ij[,2],]
gglink = data.frame(from=ij[,1],to=ij[,2],p=ld[ij])
ggnode = data.frame(i=1:length(sol@obs_stats$counts),pi=diag(sol@obs_stats$x_counts))
ggplot2::ggplot()+ggplot2::geom_curve(data=gglink,aes(x=from,xend=to,y=ifelse(from<to,-0.3,0.3),yend=ifelse(from<to,-0.3,0.3),size=p,alpha=p),arrow=arrow(length = unit(2,"mm")),curvature = 0.7)+
ggplot2::scale_x_continuous("",c())+
ggplot2::scale_y_continuous("",c(),limits = c(-5,5))+
#scale_size("Ld sizes:",limits=c(0,max(gglink$p)))+
ggplot2::scale_alpha("Link density:",limits=c(0,max(gglink$p)))+
ggplot2::scale_size_area("Clusters size:",limits=c(0,max(ggnode$pi)),max_size = 4)+
ggplot2::geom_point(data=ggnode,aes(x=i,y=0,size=pi))+
ggplot2::ggtitle(paste0(toupper(sol@model@name)," model with : ",max(sol@cl)," clusters."))+
#coord_equal()+
ggplot2::theme_minimal()
}
nodelink(sol)
nodelink = function(sol){
ij = Matrix::which(sol@obs_stats$x_counts>0,arr.ind = TRUE)
ld = sol@obs_stats$x_counts
#/(sol@obs_stats$counts%*%t(sol@obs_stats$counts))
ij = ij[ij[,1]!=ij[,2],]
gglink = data.frame(from=ij[,1],to=ij[,2],p=ld[ij])
ggnode = data.frame(i=1:length(sol@obs_stats$counts),pi=diag(sol@obs_stats$x_counts))
gl = ggplot2::guide_legend()
ggplot2::ggplot()+ggplot2::geom_curve(data=gglink,aes(x=from,xend=to,y=ifelse(from<to,-0.3,0.3),yend=ifelse(from<to,-0.3,0.3),size=p,alpha=p),arrow=arrow(length = unit(2,"mm")),curvature = 0.7)+
ggplot2::scale_x_continuous("",c())+
ggplot2::scale_y_continuous("",c(),limits = c(-5,5))+
#scale_size("Ld sizes:",limits=c(0,max(gglink$p)))+
ggplot2::scale_alpha("Link density:",limits=c(0,max(gglink$p)),guide=gl)+
ggplot2::scale_size_area("Clusters size:",limits=c(0,max(ggnode$pi)),max_size = 4,guide=gl)+
ggplot2::geom_point(data=ggnode,aes(x=i,y=0,size=pi))+
ggplot2::ggtitle(paste0(toupper(sol@model@name)," model with : ",max(sol@cl)," clusters."))+
#coord_equal()+
ggplot2::theme_minimal()
}
nodelink(sol)
nodelink = function(sol){
ij = Matrix::which(sol@obs_stats$x_counts>0,arr.ind = TRUE)
ld = sol@obs_stats$x_counts
#/(sol@obs_stats$counts%*%t(sol@obs_stats$counts))
ij = ij[ij[,1]!=ij[,2],]
gglink = data.frame(from=ij[,1],to=ij[,2],p=ld[ij])
ggnode = data.frame(i=1:length(sol@obs_stats$counts),pi=diag(sol@obs_stats$x_counts))
gl = ggplot2::guide_legend()
ggplot2::ggplot()+ggplot2::geom_curve(data=gglink,aes(x=from,xend=to,y=ifelse(from<to,-0.3,0.3),yend=ifelse(from<to,-0.3,0.3),size=p,alpha=p),arrow=arrow(length = unit(2,"mm")),curvature = 0.7)+
ggplot2::scale_x_continuous("",c())+
ggplot2::scale_y_continuous("",c(),limits = c(-5,5))+
#scale_size("Ld sizes:",limits=c(0,max(gglink$p)))+
ggplot2::scale_alpha("Link density:",limits=c(0,max(gglink$p)),guide="none")+
ggplot2::scale_size_area("Clusters size:",limits=c(0,max(ggnode$pi)),max_size = 4,guide="none")+
ggplot2::geom_point(data=ggnode,aes(x=i,y=0,size=pi))+
ggplot2::ggtitle(paste0(toupper(sol@model@name)," model with : ",max(sol@cl)," clusters."))+
#coord_equal()+
ggplot2::theme_minimal()
}
nodelink(sol)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(greed)
library(greed)
sol=fit(Xpolblogs,30,new('dcsbm'))
plot(sol)
plot(cut(sol,2),type='blocks')
showMethods("cut")
setGeneric("cut", function(fit,K,...) standardGeneric("cut"))
setMethod(f = "cut",
signature = signature("icl_path", "numeric"),
definition = function(fit, K){
i = which(sapply(fit@path,function(p){p$K})==K)
print(i)
fit@tree = fit@tree[1:(2*K-1)]
fit@ggtree = fit@ggtree[1:(2*K-1),]
fit@K = K
fit@logalpha=fit@path[[i]]$logalpha
fit@icl = fit@path[[i]]$icl
fit@cl = fit@path[[i]]$cl
for(st in names(fit@obs_stats)){
fit@obs_stats[st] = fit@path[[i]][st]
}
fit@path=fit@path[(i+1):length(fit@path)]
fit
})
showMethods("cut")
plot(cut(sol,2),type='blocks')
plot(cut(sol,2),type='nodelink')
plot(cut(sol,10),type='nodelink')
table(cut(sol,2)@cl,Lpolblogs)
library(greed)
library(greed)
plot(sol)
table(cut(sol,2)@cl,Lpolblogs)
plot(sol,type='nodelink')
?dotsMethods
library(greed)
plot(sol,'nodelink')
plot(sol,type='nodelink')
plot(sol)
plot(sol,type='nodelink')
?devtools::use_data_raw
?devtools::use_data_raw()
devtools::use_data_raw()
devtools::document()
devtools::document()
library(greed)
devtools::document()
devtools::document()
devtools::document()
library(greed)
library(greed)
?greed::plot
devtools::document()
library(greed)
?greed::plot
?greed::plot
library(greed)
?greed::plot
devtools::document()
devtools::document()
library(greed)
?greed::plot
devtools::document()
library(greed)
class(X)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(greed)
?greed::fit
devtools::document()
library(greed)
library(greed)
spectral= function(X,K){
X = X+t(X)
X[X>0]=1
nu=sum(X)/dim(X)[1]
L = diag((rowSums(X)+nu)^-0.5)%*%X%*%diag((rowSums(X)+nu)^-0.5)
S = eigen(L)
S$u =S$vectors
Xp = S$u/rowSums(S$u)
Xp[rowSums(S$u)==0,]=0
km = kmeans(S$u,K)
km$cluster
}
sbm=rsbm(600,rep(1/3,3),diag(rep(0.1,3))+0.01)
cl=spectral(sbm$x,3)
table(cl,sbm$cl)
X=sbm$x
X = X+t(X)
X[X>0]=1
nu=sum(X)/dim(X)[1]
L = diag((rowSums(X)+nu)^-0.5)%*%X%*%diag((rowSums(X)+nu)^-0.5)
S = eigen(L)
S$u =S$vectors[,1:K]
Xp = S$u/rowSums(S$u)
Xp[rowSums(S$u)==0,]=0
km = kmeans(S$u,K)
km$cluster
table(cl,sbm$cl)
table(km$cluster,sbm$cl)
cl=spectral(sbm$x,3)
spectral= function(X,K){
X = X+t(X)
X[X>0]=1
nu=sum(X)/dim(X)[1]
L = diag((rowSums(X)+nu)^-0.5)%*%X%*%diag((rowSums(X)+nu)^-0.5)
S = eigen(L)
S$u =S$vectors[,1:K]
Xp = S$u/rowSums(S$u)
Xp[rowSums(S$u)==0,]=0
km = kmeans(S$u,K)
km$cluster
}
cl=spectral(sbm$x,3)
table(km$cluster,sbm$cl)
cl=spectral(sbm$x,4)
table(km$cluster,sbm$cl)
table(cl,sbm$cl)
cl=spectral(sbm$x,3)
table(cl,sbm$cl)
cl=spectral(sbm$x,10)
table(cl,sbm$cl)
data("Xpolblogs")
cl=spectral(Xpolblogs,2)
table(cl,Lpolblogs)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
N=1500
pi=rep(1/K,K)
epsilon = 0.0001
lambda  = 0.1
mu=matrix(epsilon,K,K)+diag(rep(lambda,K))
tau = 0.025
mu[1:5,1:5]=mu[1:5,1:5]+tau
mu[6:10,6:10]=mu[6:10,6:10]+tau
mu
K
K=15
mu[1:5,1:5]=mu[1:5,1:5]+tau
mu=matrix(epsilon,K,K)+diag(rep(lambda,K))
tau = 0.025
mu[1:5,1:5]=mu[1:5,1:5]+tau
mu[6:10,6:10]=mu[6:10,6:10]+tau
mu[11:15,11:15]=mu[11:15,11:15]+tau
sbm = rsbm(N,pi,mu)
cl=spectral(sbm$x,30)
table(cl,sbm$cl)
dim(sbm$x)
sbm$cl
K=15
pi=rep(1/K,K)
epsilon = 0.0001
lambda  = 0.1
mu=matrix(epsilon,K,K)+diag(rep(lambda,K))
tau = 0.025
mu[1:5,1:5]=mu[1:5,1:5]+tau
mu[6:10,6:10]=mu[6:10,6:10]+tau
mu[11:15,11:15]=mu[11:15,11:15]+tau
sbm = rsbm(N,pi,mu)
sbm$cl
cl=spectral(sbm$x,30)
table(cl,sbm$cl)
?svd
spectral= function(X,K){
X = X+t(X)
X[X>0]=1
nu=sum(X)/dim(X)[1]
L = diag((rowSums(X)+nu)^-0.5)%*%X%*%diag((rowSums(X)+nu)^-0.5)
S = eigen(L)
X =S$vectors[,1:K]
Xn = X/rowSums(X)
Xn[rowSums(Xn)==0,]=0
km = kmeans(Xn,K)
km$cluster
}
cl=spectral(sbm$x,30)
table(cl,sbm$cl)
X=sbm$x
X = X+t(X)
X[X>0]=1
nu=sum(X)/dim(X)[1]
L = diag((rowSums(X)+nu)^-0.5)%*%X%*%diag((rowSums(X)+nu)^-0.5)
S = eigen(L)
X =S$vectors[,1:K]
Xn = X/rowSums(X)
Xn[rowSums(X)==0,]=0
km = kmeans(Xn,K)
km$cluster
spectral= function(X,K){
X = X+t(X)
X[X>0]=1
nu=sum(X)/dim(X)[1]
L = diag((rowSums(X)+nu)^-0.5)%*%X%*%diag((rowSums(X)+nu)^-0.5)
S = eigen(L)
Xp =S$vectors[,1:K]
Xpn = Xp/rowSums(Xp)
Xpn[rowSums(Xp)==0,]=0
km = kmeans(Xpn,K)
km$cluster
}
cl=spectral(sbm$x,30)
table(cl,sbm$cl)
spectral= function(X,K){
X = X+t(X)
X[X>0]=1
nu=sum(X)/dim(X)[1]
L = diag((rowSums(X)+nu)^-0.5)%*%X%*%diag((rowSums(X)+nu)^-0.5)
S = eigen(L)
Xp =S$vectors[,1:K]
Xpn = Xp/rowSums(Xp)
Xpn[rowSums(Xp)==0,]=0
km = kmeans(Xp,K)
km$cluster
}
cl=spectral(sbm$x,30)
table(cl,sbm$cl)
X=sbm$x
X = X+t(X)
X[X>0]=1
nu=sum(X)/dim(X)[1]
L = diag((rowSums(X)+nu)^-0.5)%*%X%*%diag((rowSums(X)+nu)^-0.5)
S = eigen(L)
Xp =S$vectors[,1:K]
rowSums(Xp)
Xpn = Xp/sqrt(rowSums(Xp)^2)
Xpn[rowSums(Xp)==0,]=0
rowSums(Xpn)
spectral= function(X,K){
X = X+t(X)
X[X>0]=1
nu=sum(X)/dim(X)[1]
L = diag((rowSums(X)+nu)^-0.5)%*%X%*%diag((rowSums(X)+nu)^-0.5)
S = eigen(L)
Xp =S$vectors[,1:K]
Xpn = Xp/sqrt(rowSums(Xp)^2)
Xpn[rowSums(Xp)==0,]=0
km = kmeans(Xp,K)
km$cluster
}
cl=spectral(sbm$x,30)
table(cl,sbm$cl)
library(greed)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
N=1500
N=1500
K=15
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
pi=rep(1/K,K)
epsilon = 0.0001
mu=matrix(epsilon,K,K)+diag(rep(lambda,K))
tau = 0.025
mu[1:5,1:5]=mu[1:5,1:5]+tau
mu[6:10,6:10]=mu[6:10,6:10]+tau
mu[11:15,11:15]=mu[11:15,11:15]+tau
sbm = rsbm(N,pi,mu)
sol=fit(sbm$x,30,new("sbm"),new("genetic",pop_size=15,nb_max_gen=30))
table(sol@cl,sbm$cl)
table(sol@cl,sbm$cl)
library(greed)
sol=fit(sbm$x,30,new("sbm"),new("genetic",pop_size=15,nb_max_gen=30))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
table(sol@cl,sbm$cl)
sol@train_hist
ggplot(sol@train_hist)+geom_boxplot(aes(x=generation,y=icl))
ggplot(sol@train_hist)+geom_boxplot(aes(group=generation,y=icl))
gen=sol@train_hist
sol=fit(sbm$x,30,new("sbm"),new("km"))
sol@icl
mac(gen$icl)
max(gen$icl)
plot(sol,"tree")
plot(sol,type="tree")
library(greed)
plot(sol,"tree")
plot(sol,type="tree")
ggplot(gen)+geom_boxplot(aes(group=generation,y=icl))
new("genetic")
