crux(Ng,c(-10,-10),noise),
crux(Ng,c(10,-10),noise),
crux(Ng,c(10,10),noise))
ggplot(tibble(x=X[,1],y=X[,2]))+
geom_point(aes(x=x,y=y))+
theme_bw()
library(mclust)
Mclust(X)
solmc=Mclust(X)
plot(solmc)
solmc=Mclust(X,1:20)
plot(solmc)
sol=greed(X,alg=new("seed"))
sol
plot(sol)
table(sol@cl)
sol=greed(X,alg=new("seed"))
sol
plot(sol)
mu=diag(50)
mu
mu=diag(50)*5
MASS::mvrnorm(100,mu,sigma)
mu=diag(50)*5
MASS::mvrnorm(100,mu,mu)
MASS::mvrnorm(100,mu[1,],mu)
X=do.call(rbind(lapply(1:50, function(k){MASS::mvrnorm(100,mu[k,],mu)}))
X=do.call(rbind(lapply(1:50, function(k){MASS::mvrnorm(100,mu[k,],mu)}))
)
X=do.call(rbind,lapply(1:50, function(k){MASS::mvrnorm(100,mu[k,],mu)}))
50*100
sol=greed(X,alg=new("seed"),K=70)
mu=diag(20)*5
X=do.call(rbind,lapply(1:20, function(k){MASS::mvrnorm(100,mu[k,],mu/10)}))
dim(X)
sol=greed(X,alg=new("seed"),K=30)
sol@cl
table(sol@cl)
solmc=Mclust(X,1:30)
plot(solmc)
?Mclust
solmc=Mclust(X,1:30,"VVV")
plot(solmc)
solmc
X
sol=greed(X)
library("future")
plan(multiprocess)
sol=greed(X)
model=new("gmm",N0=20,tau=0.01,epsilon=cov(X),mu=apply(X,2,mean))
data=greed:::preprocess(model,X)
sol=greed:::fit_greed(model,data,rep(1:20,each=100),type='none')
sol@icl
sol@obs_stats$regs[[1]]
sol@obs_stats$regs[[1]]
sol@obs_stats$regs[[1]]$eps
sol=greed:::fit_greed(model,data,rep(1:20,each=100),type='both')
sol@icl
table(sol@cl)
table(sol@cl,rep(1:20,each=100))
hist(X[,1],500)
hist(X[,2],500)
hist(X[,3],500)
hist(X[1:100,1],500)
model=new("gmm",N0=20,tau=0.1,epsilon=diag(20),mu=apply(X,2,mean))
sol=greed:::fit_greed(model,data,rep(1:20,each=100),type='merge')
sol
table(sol@cl)
sol@obs_stats$regs[[5]]
plot(sol@obs_stats$regs[[5]]$m)
plot(1:20,sol@obs_stats$regs[[5]]$m)
plot(sol,type="tree")
model=new("gmm",N0=20,tau=100,epsilon=diag(20),mu=apply(X,2,mean))
sol=greed:::fit_greed(model,data,rep(1:20,each=100),type='merge')
plot(1:20,sol@obs_stats$regs[[5]]$m)
model=new("gmm",N0=20,tau=0.00000001,epsilon=diag(20),mu=apply(X,2,mean))
sol=greed:::fit_greed(model,data,rep(1:20,each=100),type='merge')
plot(1:20,sol@obs_stats$regs[[5]]$m)
model=new("gmm",N0=20,tau=0.000000000001,epsilon=diag(20),mu=apply(X,2,mean))
sol=greed:::fit_greed(model,data,rep(1:20,each=100),type='merge')
plot(1:20,sol@obs_stats$regs[[5]]$m)
library(greed)
sol=greed:::fit_greed(model,data,rep(1:20,each=100),type='merge')
plot(1:20,sol@obs_stats$regs[[5]]$m)
model=new("gmm",N0=20,tau=0.001,epsilon=diag(20),mu=apply(X,2,mean))
sol=greed:::fit_greed(model,data,rep(1:20,each=100),type='merge')
plot(1:20,sol@obs_stats$regs[[5]]$m)
sol@obs_stats$regs[[5]]$eps
library(greed)
library(ggplot2)
library(tidyr)
library(tibble)
crux = function(N,m,noise){
x1 = rnorm(N/2)
x2 = rnorm(N/2)
X = rbind(cbind(x1,x1+rnorm(N/2)*noise),cbind(x2,-x2+rnorm(N/2)*noise))
X+rep(m,each=N)
}
Ng = 300
noise=0.2
X=rbind(crux(Ng,c(-10,10),noise),
crux(Ng,c(-10,-10),noise),
crux(Ng,c(10,-10),noise),
crux(Ng,c(10,10),noise))
sol=greed(X)
sol=greed(X)
sol=greed(X)
library(greed)
library(greed)
sol=greed(X)
library(greed)
sol=greed(X)
sol=greed(crabs)
library(greed)
sol=greed(crabs)
0^5
library(greed)
library(greed)
sol=greed(crabs)
sol@cl
sol@obs_stats$regs[[5]]
library(greed)
sol@obs_stats$regs[[5]]
sol=greed(crabs)
sol@obs_stats$regs[[5]]$eps
sol@cl
sol@obs_stats$regs[[7]]$eps
data=read_csv("../sageo-ricardo/SAGEO_RICardo_edges.csv")
library(readr)
data=read_csv("../sageo-ricardo/SAGEO_RICardo_edges.csv")
data[is.na(data$volume),]
data[is.na(data$volume),"volume"]
data[is.na(data$volume),"volume"]=0
write_csv(data,"../sageo-ricardo/SAGEO_RICardo_edges.csv")
library(greed)
library(greed)
data(Jazz)
sol=greed(Jazz)
library(readr)
winflow = read_csv("../winflow/winflow_spread.csv")
Xn=as.matrix(winflow[3:23])
Xn
Xn=as.matrix(winflow[3:21])
Xn
Xn=as.matrix(winflow[,3:20])
Xn
sol=greed(Xn,model=new("mm"),alg=new("multistart"))
sol=greed(Xn,model=new("mm"),alg=new("multistarts"))
library(future)
future::plan()
future::plan
?future::plan
plan(multiprocess)
sol=greed(Xn,model=new("mm"),alg=new("multistarts"),K=40)
sol=greed(Xn,model=new("co_dcsbm"),alg=new("multistarts"),K=40)
sol=greed(Xn,model=new("co_dcsbm"),alg=new("multistarts"),K=40)
library(greed)
sol=greed(Xn,model=new("co_dcsbm"),alg=new("multistarts"),K=40)
dim(Xn)
Xns=greed:::as.sparse(Xn)
xns
Xns
sol=greed(Xns,model=new("co_dcsbm"),alg=new("multistarts"),K=40)
devtools::test()
N = 500
K = 10
pi = rep(1/K,K)
mu = cbind(diag(rep(5,K)),matrix(0,K,20))+matrix(runif(K*(20+K)),K,20+K)
mm = rmm(N,pi,mu,15)
mm$x
sol=greed(mm$x,model=new("mm"))
class(mm$x)
class(Xns)
dim(mm$x)
dim(Xns)
Xns
Xns[,18]
dim(Xns)
Xns
sol=greed(mm$x,alg=new("seed"),model=new("mm"))
plot(sol)
sol=greed(mm$x,alg=new("seed"),model=new("mm"),K=40)
plot(sol)
plot(sol,type='tree')
sol
sol=greed(Xns,alg=new("seed"),model=new("mm"),K=40)
library(greed)
sol=greed(Xns,alg=new("seed"),model=new("mm"),K=40)
sol
lapply(sol@path, .$Ã®cl)
lapply(sol@path,function(x){x$icl1})
plot(sapply(sol@path,function(x){x$icl1}))
greed:::cleanpathopt(sol)
greed:::cleanpath(sol)
greed:::cleanpathopt(sol)
library(greed)
greed:::cleanpathopt(sol)
pathsol=sol
if(is.infinite(pathsol@path[[length(pathsol@path)]]$icl1)){
pathsol@path[[length(pathsol@path)]]$icl1=pathsol@path[[length(pathsol@path)-1]]$icl1
pathsol@path[[length(pathsol@path)]]$logalpha=pathsol@path[[length(pathsol@path)-1]]$logalpha
}
K=pathsol@K
pathsol@logalpha = 0
path=pathsol@path
K
# check for possible better solution than init with alpha=1 along the path
if(length(path)>0){
icli = sapply(path,function(p){p$icl1})
if(max(icli)>pathsol@icl){
im = which.max(icli)
K = path[[im]]$K
pathsol@K = K
pathsol@obs_stats = path[[im]]$obs_stats
pathsol@icl = path[[im]]$icl1
pathsol@cl = as.vector(path[[im]]$cl)
path=path[(im+1):length(path)]
pathsol@path=path
}
# check for non empty path
if(length(path)>0){
# compute the pareto front and extract the height as -log(alpha) of each merge in the front
Hfront = extract_front_height(pathsol)
# initialisation
# build the merge tree in hclust format
merge = c()
cnodes = -(1:pathsol@K)
for (m in 1:length(path)){
merge= rbind(merge,c(cnodes[path[[m]]$k],cnodes[path[[m]]$l]))
cnodes[path[[m]]$l]=m
cnodes=cnodes[-path[[m]]$k]
}
# find optimal leaf ordering
dm=-path[[1]]$merge_mat-t(path[[1]]$merge_mat)
dm[is.infinite(dm)]=100*max(dm[!is.infinite(dm)])
if(length(path)>1){
leaforder = cba::order.optimal(stats::as.dist(dm),merge)
}else{
leaforder=list(order=1:2)
}
# ordering of initial solution
pathsol@obs_stats = reorder(pathsol@model,pathsol@obs_stats,leaforder$order)
pathsol@cl=order(leaforder$order)[pathsol@cl]
cat(max(pathsol@cl))
#prepare the data.frame to store the tree
ggtree=data.frame(H=rep(0,K),tree=0,x=seq(-1,1,length.out = K),node=1:K,xmin=0,xmax=0,K=K)
tree  = rep(0,2*K-1)
perm  = leaforder$order
nodes = 1:K
cn=K+1
for (m in 1:length(path)){
# update the permutation
oldperm=perm
perm=perm[perm!=path[[m]]$k]
perm[perm>path[[m]]$k]=perm[perm>path[[m]]$k]-1
# update the stats accordingly
path[[m]]$obs_stats = reorder(pathsol@model,path[[m]]$obs_stats,as.integer(perm))
path[[m]]$cl=order(perm)[path[[m]]$cl]
path[[m]]$merge_mat=tril(path[[m]]$merge_mat[oldperm,oldperm]+t(path[[m]]$merge_mat[oldperm,oldperm]))
# and the index of the merged cluster
nkl=sort(which(oldperm==path[[m]]$k|oldperm==path[[m]]$l))
path[[m]]$k=nkl[2]
path[[m]]$l=nkl[1]
# build the tree
tree[nodes[path[[m]]$k]]=cn
tree[nodes[path[[m]]$l]]=cn
xchildren = ggtree$x[c(nodes[path[[m]]$k],nodes[path[[m]]$l])]
ggtree=rbind(ggtree,data.frame(H=Hfront[K-m],tree=0,x=mean(xchildren),node=cn,xmin=min(xchildren),xmax=max(xchildren),K=K-m))
# update nodes vector
nodes=nodes[-path[[m]]$k]
nodes[path[[m]]$l]=cn
cn=cn+1
}
# store the tree
ggtree$tree=tree
# store height and xpos of father
ggtree$Hend = c(ggtree$H[ggtree$tree],-1)
ggtree$xend = c(ggtree$x[ggtree$tree],-1)
# store upated path and tree
pathsol@path = path
pathsol@tree = tree
pathsol@ggtree = ggtree[nrow(ggtree):1,]
}else{
# deals with empty path
pathsol@tree=c(0)
pathsol@ggtree = data.frame(H=0,tree=0,x=0,node=1,xmin=0,max=0)
}
}else{
# deals with empty path
pathsol@tree=c(0)
pathsol@ggtree = data.frame(H=0,tree=0,x=0,node=1,xmin=0,max=0)
}
icli = sapply(path,function(p){p$icl1})
if(max(icli)>pathsol@icl){
im = which.max(icli)
K = path[[im]]$K
pathsol@K = K
pathsol@obs_stats = path[[im]]$obs_stats
pathsol@icl = path[[im]]$icl1
pathsol@cl = as.vector(path[[im]]$cl)
path=path[(im+1):length(path)]
pathsol@path=path
}
length(path)
# compute the pareto front and extract the height as -log(alpha) of each merge in the front
Hfront = greed:::extract_front_height(pathsol)
Hfront
# initialisation
# build the merge tree in hclust format
merge = c()
cnodes = -(1:pathsol@K)
for (m in 1:length(path)){
merge= rbind(merge,c(cnodes[path[[m]]$k],cnodes[path[[m]]$l]))
cnodes[path[[m]]$l]=m
cnodes=cnodes[-path[[m]]$k]
}
dm=-path[[1]]$merge_mat-t(path[[1]]$merge_mat)
dm[is.infinite(dm)]=100*max(dm[!is.infinite(dm)])
leaforder = cba::order.optimal(stats::as.dist(dm),merge)
leaforder$order
sort(leaforder$order)
pathsol@obs_stats
library(greed)
greed:::cleanpathopt(sol)
library(greed)
sol=greed(Xns,alg=new("seed"))
plot(sol)
sol=greed(Xns,alg=new("seed"),model=new("mm"))
sol=greed(Xns,alg=new("seed"),model=new("mm"),K=60)
plot(sol)
plot(sol,type="tree")
plot(sol,type="path")
cut(sol,15)
sol@cl
table(sol@cl,substr(winflow[,2],1,2))
substr(winflow[,2],1,2)
winflow
winflow[,2]
substr(winflow[,2],1,2)
library(stringr)
str_sub(winflow[,2],1,2)
str_sub(as.vector(winflow[,2]),1,2)
library(dplyr)
winflow %>% pull(poste_jour) %>% str_sub(start = 1,end=2)
poste=winflow %>% pull(poste_jour) %>% str_sub(start = 1,end=2)
table(poste,cut(sol,20)@cl)
sol20=cut(sol,20)
sol20@obs_stats$x_counts*
1
plot(sol20@obs_stats$x_counts[1,])
plot(sol20@obs_stats$x_counts[1,]/sum(sol20@obs_stats$x_counts[1,]),type='l')
plot(sol20@obs_stats$x_counts[2,]/sum(sol20@obs_stats$x_counts[1,]),type='l')
plot(sol20@obs_stats$x_counts[2,]/sum(sol20@obs_stats$x_counts[2,]),type='l')
plot(sol20@obs_stats$x_counts[,1]/sum(sol20@obs_stats$x_counts[,1]),type='l')
plot(sol20@obs_stats$x_counts[,2]/sum(sol20@obs_stats$x_counts[,2]),type='l')
year=winflow %>% pull(poste_jour) %>% str_sub(start = 5,end=6)
year
year=winflow %>% pull(poste_jour) %>% str_sub(start = 5,end=9)
year
year=winflow %>% pull(poste_jour) %>% str_sub(start = 5,end=8)
year
table(year,cut(sol,20)@cl)
year=winflow %>% pull(poste_jour) %>% str_split("_")
year
table(yposte,cut(sol,20)@cl)
table(poste,cut(sol,20)@cl)
plot(sol20@obs_stats$x_counts[,17]/sum(sol20@obs_stats$x_counts[,17]),type='l')
plot(sol20@obs_stats$x_counts[,16]/sum(sol20@obs_stats$x_counts[,16]),type='l')
plot(sol20@obs_stats$x_counts[,16]/sum(sol20@obs_stats$x_counts[,18]),type='l')
plot(cut,sol)
plot(sol)
D = dim(x@obs_stats$x_counts)[1]
library(greed)
plot(so)
plot(sol)
x=sol
K = length(x@obs_stats$counts)
D = dim(x@obs_stats$x_counts)[1]
gg=data.frame(kc=rep(cumsum(x@obs_stats$counts),D),
lc=rep(1:D,each=K),
sizek = rep(x@obs_stats$counts,D),
sizel = rep(1,K*D),
count=as.vector(x@obs_stats$x_counts))
ggplot2::ggplot(gg)+ggplot2::geom_tile(ggplot2::aes_(y=~kc-sizek/2,x=~lc-sizel/2,height=~sizek,width=~sizel,fill=~count/sizek,alpha=~count/sizek))+
ggplot2::scale_fill_distiller("E[X]",palette="YlOrRd",direction = 1,guide = ggplot2::guide_legend(),limits=c(0,max(gg$count/gg$sizek)))+
ggplot2::scale_alpha("E[X]",range=c(0,1),limits=c(0,max(gg$count/gg$sizek)))+
ggplot2::ggtitle(paste0("MM Model with : ",max(x@cl)," clusters."))+
ggplot2::scale_x_continuous("Features",breaks=1:D,labels=rep("",D),minor_breaks = NULL,expand = ggplot2::expand_scale(mult = 0, add = 0))+
ggplot2::scale_y_continuous("Clusters",breaks=cumsum(x@obs_stats$counts),labels = paste0(round(100*x@obs_stats$counts/sum(x@obs_stats$counts)),"%"),minor_breaks = NULL,expand = ggplot2::expand_scale(mult = 0, add = 0))+
ggplot2::theme_bw()
gg
gg=data.frame(kc=rep(cumsum(x@obs_stats$counts),D),
lc=rep(1:D,each=K),
sizek = rep(x@obs_stats$counts,D),
sizel = rep(1,K*D),
count=as.vector(t(x@obs_stats$x_counts)))
gg=data.frame(kc=rep(cumsum(x@obs_stats$counts),D),
lc=rep(1:D,each=K),
sizek = rep(x@obs_stats$counts,D),
sizel = rep(1,K*D),
count=as.vector(Matrix:::t(x@obs_stats$x_counts)))
ggplot2::ggplot(gg)+ggplot2::geom_tile(ggplot2::aes_(y=~kc-sizek/2,x=~lc-sizel/2,height=~sizek,width=~sizel,fill=~count/sizek,alpha=~count/sizek))+
ggplot2::scale_fill_distiller("E[X]",palette="YlOrRd",direction = 1,guide = ggplot2::guide_legend(),limits=c(0,max(gg$count/gg$sizek)))+
ggplot2::scale_alpha("E[X]",range=c(0,1),limits=c(0,max(gg$count/gg$sizek)))+
ggplot2::ggtitle(paste0("MM Model with : ",max(x@cl)," clusters."))+
ggplot2::scale_x_continuous("Features",breaks=1:D,labels=rep("",D),minor_breaks = NULL,expand = ggplot2::expand_scale(mult = 0, add = 0))+
ggplot2::scale_y_continuous("Clusters",breaks=cumsum(x@obs_stats$counts),labels = paste0(round(100*x@obs_stats$counts/sum(x@obs_stats$counts)),"%"),minor_breaks = NULL,expand = ggplot2::expand_scale(mult = 0, add = 0))+
ggplot2::theme_bw()
gg=data.frame(kc=rep(cumsum(x@obs_stats$counts),D),
lc=rep(1:D,each=K),
sizek = rep(x@obs_stats$counts,D),
sizel = rep(1,K*D),
count=as.vector(Matrix:::t(x@obs_stats$x_counts)/rowSums(Matrix:::t(x@obs_stats$x_counts))))
Matrix:::t(x@obs_stats$x_counts)/rowSums(Matrix:::t(x@obs_stats$x_counts)
)
Matrix:::t(x@obs_stats$x_counts)/Matrix:::rowSums(Matrix:::t(x@obs_stats$x_counts))
gg=data.frame(kc=rep(cumsum(x@obs_stats$counts),D),
lc=rep(1:D,each=K),
sizek = rep(x@obs_stats$counts,D),
sizel = rep(1,K*D),
count=as.vector(Matrix:::t(x@obs_stats$x_counts)/Matrix:::rowSums(Matrix:::t(x@obs_stats$x_counts))))
ggplot2::ggplot(gg)+ggplot2::geom_tile(ggplot2::aes_(y=~kc-sizek/2,x=~lc-sizel/2,height=~sizek,width=~sizel,fill=~count/sizek,alpha=~count/sizek))+
ggplot2::scale_fill_distiller("E[X]",palette="YlOrRd",direction = 1,guide = ggplot2::guide_legend(),limits=c(0,max(gg$count/gg$sizek)))+
ggplot2::scale_alpha("E[X]",range=c(0,1),limits=c(0,max(gg$count/gg$sizek)))+
ggplot2::ggtitle(paste0("MM Model with : ",max(x@cl)," clusters."))+
ggplot2::scale_x_continuous("Features",breaks=1:D,labels=rep("",D),minor_breaks = NULL,expand = ggplot2::expand_scale(mult = 0, add = 0))+
ggplot2::scale_y_continuous("Clusters",breaks=cumsum(x@obs_stats$counts),labels = paste0(round(100*x@obs_stats$counts/sum(x@obs_stats$counts)),"%"),minor_breaks = NULL,expand = ggplot2::expand_scale(mult = 0, add = 0))+
ggplot2::theme_bw()
ggplot2::ggplot(gg)+ggplot2::geom_tile(ggplot2::aes_(y=~kc-sizek/2,x=~lc-sizel/2,height=~sizek,width=~sizel,fill=~count,alpha=~count))+
ggplot2::scale_fill_distiller("E[X]",palette="YlOrRd",direction = 1,guide = ggplot2::guide_legend(),limits=c(0,max(gg$count)))+
ggplot2::scale_alpha("E[X]",range=c(0,1),limits=c(0,max(gg$count)))+
ggplot2::ggtitle(paste0("MM Model with : ",max(x@cl)," clusters."))+
ggplot2::scale_x_continuous("Features",breaks=1:D,labels=rep("",D),minor_breaks = NULL,expand = ggplot2::expand_scale(mult = 0, add = 0))+
ggplot2::scale_y_continuous("Clusters",breaks=cumsum(x@obs_stats$counts),labels = paste0(round(100*x@obs_stats$counts/sum(x@obs_stats$counts)),"%"),minor_breaks = NULL,expand = ggplot2::expand_scale(mult = 0, add = 0))+
ggplot2::theme_bw()
mat_blocks = function(x){
K = length(x@obs_stats$counts)
D = dim(x@obs_stats$x_counts)[1]
gg=data.frame(kc=rep(cumsum(x@obs_stats$counts),D),
lc=rep(1:D,each=K),
sizek = rep(x@obs_stats$counts,D),
sizel = rep(1,K*D),
count=as.vector(Matrix:::t(x@obs_stats$x_counts)/Matrix:::rowSums(Matrix:::t(x@obs_stats$x_counts))))
ggplot2::ggplot(gg)+ggplot2::geom_tile(ggplot2::aes_(y=~kc-sizek/2,x=~lc-sizel/2,height=~sizek,width=~sizel,fill=~count,alpha=~count))+
ggplot2::scale_fill_distiller("E[X]",palette="YlOrRd",direction = 1,guide = ggplot2::guide_legend(),limits=c(0,max(gg$count)))+
ggplot2::scale_alpha("E[X]",range=c(0,1),limits=c(0,max(gg$count)))+
ggplot2::ggtitle(paste0("MM Model with : ",max(x@cl)," clusters."))+
ggplot2::scale_x_continuous("Features",breaks=1:D,labels=rep("",D),minor_breaks = NULL,expand = ggplot2::expand_scale(mult = 0, add = 0))+
ggplot2::scale_y_continuous("Clusters",breaks=cumsum(x@obs_stats$counts),labels = paste0(round(100*x@obs_stats$counts/sum(x@obs_stats$counts)),"%"),minor_breaks = NULL,expand = ggplot2::expand_scale(mult = 0, add = 0))+
ggplot2::theme_bw()
}
library(greed)
plot(cut(sol,20))
Xn
x=cut(sol,20)
K = length(x@obs_stats$counts)
D = dim(x@obs_stats$x_counts)[1]
gg=data.frame(kc=rep(cumsum(x@obs_stats$counts),D),
lc=rep(1:D,each=K),
sizek = rep(x@obs_stats$counts,D),
sizel = rep(1,K*D),
count=as.vector(Matrix:::t(x@obs_stats$x_counts)/Matrix:::rowSums(Matrix:::t(x@obs_stats$x_counts))))
ggplot2::ggplot(gg)+ggplot2::geom_tile(ggplot2::aes_(y=~kc-sizek/2,x=~lc-sizel/2,height=~sizek,width=~sizel,fill=~log(count),alpha=~count))+
ggplot2::scale_fill_distiller("E[X]",palette="YlOrRd",direction = 1,guide = ggplot2::guide_legend(),limits=c(1,log(max(gg$count))))+
ggplot2::scale_alpha("E[X]",range=c(0,1),limits=c(0,max(gg$count)))+
ggplot2::ggtitle(paste0("MM Model with : ",max(x@cl)," clusters."))+
ggplot2::scale_x_continuous("Features",breaks=1:D,labels=rep("",D),minor_breaks = NULL,expand = ggplot2::expand_scale(mult = 0, add = 0))+
ggplot2::scale_y_continuous("Clusters",breaks=cumsum(x@obs_stats$counts),labels = paste0(round(100*x@obs_stats$counts/sum(x@obs_stats$counts)),"%"),minor_breaks = NULL,expand = ggplot2::expand_scale(mult = 0, add = 0))+
ggplot2::theme_bw()
plot(cut(sol,15))
sol=greed(Xn)
sol=greed(Xn,alg=new("seed"))
sol=greed(Xn,alg=new("seed"),K=40)
sol=greed(Xn,alg=new("seed"),K=20)
plot(sol,type='tree')
plot(sol,type='path')
plot(sol,type='front')
plot(sol)
sol=greed(Xn,alg=new("multistart"),model=new("mm"),K=40)
sol=greed(Xn,alg=new("multistarts"),model=new("mm"),K=40)
library(future)
plan(multisession)
sol=greed(Xn,alg=new("multistarts"),model=new("mm"),K=40)
plot(sol,type='path')
plot(sol,type='front')
plot(cut(sol,12))
plot(cut(sol,15))
plot(sol,type="tree")
plot(cut(sol,11))
plot(cut(sol,10))
plot(cut(sol,11))
TT=cut(sol,11)
TT@obs_stats$x_counts
plot(TT@obs_stats$x_counts[1,])
plot(TT@obs_stats$x_counts[1,],type='l')
plot(TT@obs_stats$x_counts[2,],type='l')
plot(TT@obs_stats$x_counts[1,],type='l')
plot(TT@obs_stats$x_counts[2,],type='l')
plot(TT@obs_stats$x_counts[1,],type='l')
plot(TT@obs_stats$x_counts[1,]/sum(TT@obs_stats$x_counts[1,]),type='l')
plot(TT@obs_stats$x_counts[,1]/sum(TT@obs_stats$x_counts[,1]),type='l')
plot(TT@obs_stats$x_counts[,11]/sum(TT@obs_stats$x_counts[,11]),type='l')
plot(TT@obs_stats$x_counts[,10]/sum(TT@obs_stats$x_counts[,10]),type='l')
plot(TT@obs_stats$x_counts[,11]/sum(TT@obs_stats$x_counts[,11]),type='l')
plot(TT@obs_stats$x_counts[,10]/sum(TT@obs_stats$x_counts[,10]),type='l')
x=sol
Matrix:::rowSums(Matrix:::t(x@obs_stats$x_counts)
)
colSums(x@obs_stats$x_counts)
Matrix::colSums(x@obs_stats$x_counts)
Matrix:::t(x@obs_stats$x_counts)/Matrix:::rowSums(Matrix:::t(x@obs_stats$x_counts))
library(greed)
