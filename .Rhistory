library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
devtools::document()
devtools::document()
library(greed)
library(greed)
?greed
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
sbm = rsbm(100,rep(1/5,5),diag(rep(0.1,5))+0.001)
library(greed)
sbm = rsbm(100,rep(1/5,5),diag(rep(0.1,5))+0.001)
sbm = greed::rsbm(100,rep(1/5,5),diag(rep(0.1,5))+0.001)
library(greed)
sbm = greed::rsbm(100,rep(1/5,5),diag(rep(0.1,5))+0.001)
library(greed)
simu = rsbm(100,rep(1/5,5),diag(rep(0.1,5))+0.001)
devtools::load_all("~/Projets/greed")
simu = rsbm(100,rep(1/5,5),diag(rep(0.1,5))+0.001)
simu = rsbm(100,rep(1/5,5),diag(rep(0.1,5))+0.001)
library(greed)
simu = rsbm(100,rep(1/5,5),diag(rep(0.1,5))+0.001)
library(greed)
simu = rsbm(100,rep(1/5,5),diag(rep(0.1,5))+0.001)
library(greed)
simu = rsbm(100,rep(1/5,5),diag(rep(0.1,5))+0.001)
library(greed)
library(greed)
library(greed)
simu = rsbm(100,rep(1/5,5),diag(rep(0.1,5))+0.001)
library(greed)
library(greed)
library(greed)
library(greed)
require(greed)
library(greed)
library(greed)
library(greed)
library(greed)
library(greed)
devtools::load_all("~/Projets/greed")
library(greed)
library(greed)
library(greed)
library(greed)
new("icl_fit")
library(greed)
rsbm(500,rep(1/5,5),diag(rep(0.1,5))+0.001)
rgraph=rsbm(500,rep(1/5,5),diag(rep(0.1,5))+0.001)
fit(rgrap$x,10,new("sbm"))
fit(rgraph$x,10,new("sbm"))
library(greed)
library(greed)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
mu[1:4,1:4]=diag(rep(1,4))+mu[1:4,1:4]
library(greed)
N=1000
D=20
pi=c(0.25,0.25,0.25,0.25)
mu=matrix(0.01,4,D)
mu[1:4,1:4]=diag(rep(1,4))+mu[1:4,1:4]
mu=mu/rowSums(mu)
mm=rmm(N,pi,mu,30)
sol=fit(mm$x,10)
sol=fit(mm$x,10)
table(sol@cl,mm$cl)
table(sol@cl,mm$cl)
plot(sol)
stats
isGeneric("plot")
?isGeneric
library(greed)
library(greed)
plot(1:5)
plot(1:5,1:5)
library(greed)
library(greed)
log(1)
methods::new()
library(greed)
library(greed)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
N=500
D=20
library(greed)
N=500
D=20
mu=matrix(0.01,4,D)
mu[1:4,1:4]=diag(rep(1,4))+mu[1:4,1:4]
mu=mu/rowSums(mu)
mm=rmm(N,pi,mu,30)
sol=fit(mm$x,10)
sol=fit(mm$x,10)
table(sol@cl,mm$cl)
clustplot(sol)
K=8
pi=rep(1/K,K)
epsilon = 0.0001
lambda  = 0.1
mu=matrix(epsilon,K,K)+diag(rep(lambda,K))
sbm = rsbm(N,pi,mu)
sol=fit(sbm$x,10)
table(sol@cl,sbm$cl)
clustplot(sol)
library(greed)
source('~/Projets/greed/R/alg_classes.R', echo=TRUE)
greed::
devtools::document()
icl_model()
library(greed)
devtools::document()
library(greed)
library(greed)
library(greed)
dendo =function(resH){
ggtree=data.frame(node=1:length(resH$tree),father=resH$tree,H=c(rep(0,resH$stats0$K),-resH$logalpha),x=0,xmin=0,xmax=0,k=c(rep(resH$stats0$K,resH$stats0$K),(resH$stats0$K-1):1))
fathers = c(which(resH$tree==0))
w = 1/2
for(l in 1:resH$stats0$K){
for(f in fathers){
sons=which(ggtree$father==f)
ggtree$x[sons[1]]=ggtree$x[f]+w
ggtree$x[sons[2]]=ggtree$x[f]-w
}
fathers=ggtree$node[ggtree$father %in% fathers]
w =w*0.5
}
leafs = which(ggtree$H==0)
or = order(ggtree[leafs,"x"])
ggtree$x[leafs[or]]=seq(-1,1,length.out = length(leafs))
for(n in setdiff(1:nrow(ggtree),leafs)){
sons=which(ggtree$father==n)
ggtree$x[n]=mean(ggtree$x[sons])
ggtree$xmin[n] = min(ggtree$x[sons])
ggtree$xmax[n] = max(ggtree$x[sons])
}
ggleaf=ggtree[ggtree$father!=0,]
#roots = ggtree[ggtree$k>=k,]
#roots = roots[!(roots$father %in% roots$node),]
#print(dim(roots))
ggplot()+geom_segment(aes(x=ggleaf$x,y=ggleaf$H,xend=ggleaf$x,yend=ggtree$H[ggleaf$father]))+
geom_segment(data=ggtree[ggtree$H>0,],aes(x=xmin,y=H,xend=xmax,yend=H))+
#geom_point(data=roots,aes(x=x,y=H),color="red")+
scale_x_continuous("",labels = c(),breaks = c())+
scale_y_continuous("-log(alpha)")+theme_bw()
}
clust_permutation = function(resH,K){
ggtree=data.frame(node=1:length(resH$tree),father=resH$tree,H=c(rep(0,resH$stats0$K),-resH$logalpha),k=c(rep(resH$stats0$K,resH$stats0$K),(resH$stats0$K-1):1),x=0,xmin=0,xmax=0)
fathers = c(which(resH$tree==0))
w = 1/2
for(l in 1:resH$stats0$K){
for(f in fathers){
sons=which(ggtree$father==f)
ggtree$x[sons[1]]=ggtree$x[f]+w
ggtree$x[sons[2]]=ggtree$x[f]-w
}
fathers=ggtree$node[ggtree$father %in% fathers]
w =w*0.5
}
roots = ggtree[ggtree$k>=K,]
roots = roots[!(roots$father %in% roots$node),]
order(roots$x)
}
K=8
pi=rep(1/K,K)
epsilon = 0.0001
lambda  = 0.1
mu=matrix(epsilon,K,K)+diag(rep(lambda,K))
sbm = rsbm(N,pi,mu)
sol=fit(sbm$x,10)
source('~/Projets/greed/R/alg_classes.R', echo=TRUE)
K=8
pi=rep(1/K,K)
epsilon = 0.0001
lambda  = 0.1
mu=matrix(epsilon,K,K)+diag(rep(lambda,K))
sbm = rsbm(N,pi,mu)
sol=fit(sbm$x,10)
hierch = fit_greed_path(sbm$x,sol)
hierch
hierch@path
library(greed)
hierch = fit_greed_path(sbm$x,sol)
hierch@path
sapply(hierch@path,function(p){p$icl})
data.frame(icl=sapply(hierch@path,function(p){p$icl}),logalpha=sapply(hierch@path,function(p){p$logaplha}),K=sapply(hierch@path,function(p){p$K}))
data.frame(icl=sapply(hierch@path,function(p){p$icl}),logalpha=sapply(hierch@path,function(p){p$logalpha}),K=sapply(hierch@path,function(p){p$K}))
gg=data.frame(icl=sapply(hierch@path,function(p){p$icl}),logalpha=sapply(hierch@path,function(p){p$logalpha}),K=sapply(hierch@path,function(p){p$K}))
library(ggplot2)
ggplot(gg)+geom_abline(aes(slope=K-1,intercept=icl))
?geom_abline
ggplot(gg)+geom_point(aes(x=logalpha,y=icl+(k-1)*logaplha))+geom_abline(aes(slope=K-1,intercept=icl))
ggplot(gg)+geom_point(aes(x=logalpha,y=icl+(K-1)*logaplha))+geom_abline(aes(slope=K-1,intercept=icl))
ggplot(gg)+geom_point(aes(x=logalpha,y=icl+(K-1)*logalpha))+geom_abline(aes(slope=K-1,intercept=icl))
ggplot(gg)+geom_point(aes(x=logalpha,y=icl+(K-1)*logalpha))+geom_abline(aes(slope=K-1,intercept=icl))
gg$logalpha[1:6]=gg$logalpha[2:7]
ggplot(gg)+geom_abline(aes(slope=K-1,intercept=icl))
ggplot(gg)+geom_point(aes(x=logalpha,y=icl+(K-1)*logalpha))+geom_abline(aes(slope=K-1,intercept=icl))
gg=data.frame(icl=sapply(hierch@path,function(p){p$icl}),logalpha=sapply(hierch@path,function(p){p$logalpha}),K=sapply(hierch@path,function(p){p$K}))
ggplot(gg)+geom_point(aes(x=logalpha,y=icl+(K-1)*logalpha))+geom_abline(aes(slope=K-1,intercept=icl))
ggplot(gg)+geom_point(aes(x=logalpha,y=icl+(K-2)*logalpha))+geom_abline(aes(slope=K-1,intercept=icl))
gg=data.frame(icl=sapply(hierch@path,function(p){p$icl}),logalpha=sapply(hierch@path,function(p){p$logalpha}),K=sapply(hierch@path,function(p){p$K}))
ggplot(gg)+geom_point(aes(x=logalpha,y=icl+(K-2)*logalpha))+geom_abline(aes(slope=K-1,intercept=icl))
ggplot(gg)+geom_point(aes(x=logalpha,y=icl+(K-1)*logalpha))+geom_abline(aes(slope=(K-1),intercept=icl))
diff(gg$icl)
hierch@path
gg=data.frame(icl=sapply(hierch@path,function(p){p$icl1}),logalpha=sapply(hierch@path,function(p){p$logalpha}),K=sapply(hierch@path,function(p){p$K}))
ggplot(gg)+geom_point(aes(x=logalpha,y=icl+(K-1)*logalpha))+geom_abline(aes(slope=(K-1),intercept=icl))
gg
diff(gg$icl)
gg$logalpha[2:7]=diff(gg$icl)
ggplot(gg)+geom_point(aes(x=logalpha,y=icl+(K-1)*logalpha))+geom_abline(aes(slope=(K-1),intercept=icl))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
K=8
epsilon = 0.0001
lambda  = 0.1
mu=matrix(epsilon,K,K)+diag(rep(lambda,K))
sbm = rsbm(N,pi,mu)
library(greed)
sbm = rsbm(N,pi,mu)
sbm = rsbm(5000,pi,mu)
sol=fit(sbm$x,10)
source('~/Projets/greed/R/alg_classes.R', echo=TRUE)
sol=fit(sbm$x,10,new("sbm"),new("genetic",pop_size=4))
N=1000
K=8
pi=rep(1/K,K)
epsilon = 0.0001
lambda  = 0.1
mu=matrix(epsilon,K,K)+diag(rep(lambda,K))
sbm = rsbm(N,pi,mu)
sol=fit(sbm$x,10)
N=2500
K=8
pi=rep(1/K,K)
epsilon = 0.0001
lambda  = 0.1
mu=matrix(epsilon,K,K)+diag(rep(lambda,K))
sbm = rsbm(N,pi,mu)
sol=fit(sbm$x,10)
N=4000
K=20
pi=rep(1/K,K)
epsilon = 0.0001
lambda  = 0.1
mu=matrix(epsilon,K,K)+diag(rep(lambda,K))
sbm = rsbm(N,pi,mu)
sol=fit(sbm$x,10)
sol=fit(sbm$x,10)
table(sol@cl,sbm$cl)
clustplot(sol)
sol
source('~/Projets/greed/R/plot.R', echo=TRUE)
clustplot(sol)
source('~/Projets/greed/R/alg_classes.R', echo=TRUE)
sol=fit(sbm$x,10)
sol=fit(sbm$x,10)
sol=fit(sbm$x,10,new("greed"))
sol=fit(sbm$x,10,new("sbm"),new("greed"))
sol=fit(sbm$x,10,new("sbm"),new("greed"))
availableCores()
future::availableCores()
future::availableCores("multicore")
plot(1:4,2:5)
showMethods("plot")
isGeneric("plot")
?isGeneric
signature('plot')
showMethods("plot", classes = "track")
source('~/Projets/greed/R/fit_classes.R', echo=TRUE)
setMethod(f = "plot",
signature = signature("sbm_fit","missing",...),
definition = function(sol){
K = length(sol@counts)
gg=data.frame(kc=rep(cumsum(sol@counts),each=K),
lc=rep(cumsum(sol@counts),K),
sizek = rep(sol@counts,each=K),
sizel = rep(sol@counts,K),
count=as.vector(sol@x_counts))
ggplot2::ggplot(gg)+ggplot2::geom_tile(ggplot2::aes(x=kc-sizek/2,y=lc-sizel/2,width=sizek,height=sizel,fill=count/(sizek*sizel),alpha=count/(sizek*sizel)))+
ggplot2::scale_fill_distiller("Link density",type="seq",direction = 1)+
ggplot2::scale_alpha("Link density")+
ggplot2::ggtitle(paste0("SBM Model with : ",max(sol@cl)," clusters."))+
ggplot2::scale_x_continuous("",breaks=cumsum(sol@counts),labels = paste0(round(100*sol@counts/sum(sol@counts)),"%"))+
ggplot2::scale_y_continuous("",breaks=cumsum(sol@counts),labels = paste0(round(100*sol@counts/sum(sol@counts)),"%"))+
ggplot2::coord_fixed()+ggplot2::theme_bw()
});
setMethod(f = "plot",
signature = signature("sbm_fit","missing"),
definition = function(sol){
K = length(sol@counts)
gg=data.frame(kc=rep(cumsum(sol@counts),each=K),
lc=rep(cumsum(sol@counts),K),
sizek = rep(sol@counts,each=K),
sizel = rep(sol@counts,K),
count=as.vector(sol@x_counts))
ggplot2::ggplot(gg)+ggplot2::geom_tile(ggplot2::aes(x=kc-sizek/2,y=lc-sizel/2,width=sizek,height=sizel,fill=count/(sizek*sizel),alpha=count/(sizek*sizel)))+
ggplot2::scale_fill_distiller("Link density",type="seq",direction = 1)+
ggplot2::scale_alpha("Link density")+
ggplot2::ggtitle(paste0("SBM Model with : ",max(sol@cl)," clusters."))+
ggplot2::scale_x_continuous("",breaks=cumsum(sol@counts),labels = paste0(round(100*sol@counts/sum(sol@counts)),"%"))+
ggplot2::scale_y_continuous("",breaks=cumsum(sol@counts),labels = paste0(round(100*sol@counts/sum(sol@counts)),"%"))+
ggplot2::coord_fixed()+ggplot2::theme_bw()
});
setMethod(f = "plot",
signature = signature("sbm_fit","missing"),
definition = function(sol,...){
K = length(sol@counts)
gg=data.frame(kc=rep(cumsum(sol@counts),each=K),
lc=rep(cumsum(sol@counts),K),
sizek = rep(sol@counts,each=K),
sizel = rep(sol@counts,K),
count=as.vector(sol@x_counts))
ggplot2::ggplot(gg)+ggplot2::geom_tile(ggplot2::aes(x=kc-sizek/2,y=lc-sizel/2,width=sizek,height=sizel,fill=count/(sizek*sizel),alpha=count/(sizek*sizel)))+
ggplot2::scale_fill_distiller("Link density",type="seq",direction = 1)+
ggplot2::scale_alpha("Link density")+
ggplot2::ggtitle(paste0("SBM Model with : ",max(sol@cl)," clusters."))+
ggplot2::scale_x_continuous("",breaks=cumsum(sol@counts),labels = paste0(round(100*sol@counts/sum(sol@counts)),"%"))+
ggplot2::scale_y_continuous("",breaks=cumsum(sol@counts),labels = paste0(round(100*sol@counts/sum(sol@counts)),"%"))+
ggplot2::coord_fixed()+ggplot2::theme_bw()
});
setMethod(f = "plot",
signature = signature("sbm_fit","missing"),
definition = function(sol,a){
K = length(sol@counts)
gg=data.frame(kc=rep(cumsum(sol@counts),each=K),
lc=rep(cumsum(sol@counts),K),
sizek = rep(sol@counts,each=K),
sizel = rep(sol@counts,K),
count=as.vector(sol@x_counts))
ggplot2::ggplot(gg)+ggplot2::geom_tile(ggplot2::aes(x=kc-sizek/2,y=lc-sizel/2,width=sizek,height=sizel,fill=count/(sizek*sizel),alpha=count/(sizek*sizel)))+
ggplot2::scale_fill_distiller("Link density",type="seq",direction = 1)+
ggplot2::scale_alpha("Link density")+
ggplot2::ggtitle(paste0("SBM Model with : ",max(sol@cl)," clusters."))+
ggplot2::scale_x_continuous("",breaks=cumsum(sol@counts),labels = paste0(round(100*sol@counts/sum(sol@counts)),"%"))+
ggplot2::scale_y_continuous("",breaks=cumsum(sol@counts),labels = paste0(round(100*sol@counts/sum(sol@counts)),"%"))+
ggplot2::coord_fixed()+ggplot2::theme_bw()
});
setMethod(f = "plot",
signature = signature("sbm_fit",...,"missing"),
definition = function(x){
K = length(sol@counts)
gg=data.frame(kc=rep(cumsum(sol@counts),each=K),
lc=rep(cumsum(sol@counts),K),
sizek = rep(sol@counts,each=K),
sizel = rep(sol@counts,K),
count=as.vector(sol@x_counts))
ggplot2::ggplot(gg)+ggplot2::geom_tile(ggplot2::aes(x=kc-sizek/2,y=lc-sizel/2,width=sizek,height=sizel,fill=count/(sizek*sizel),alpha=count/(sizek*sizel)))+
ggplot2::scale_fill_distiller("Link density",type="seq",direction = 1)+
ggplot2::scale_alpha("Link density")+
ggplot2::ggtitle(paste0("SBM Model with : ",max(sol@cl)," clusters."))+
ggplot2::scale_x_continuous("",breaks=cumsum(sol@counts),labels = paste0(round(100*sol@counts/sum(sol@counts)),"%"))+
ggplot2::scale_y_continuous("",breaks=cumsum(sol@counts),labels = paste0(round(100*sol@counts/sum(sol@counts)),"%"))+
ggplot2::coord_fixed()+ggplot2::theme_bw()
});
setMethod(f = "plot",
signature = signature("sbm_fit","missing"),
definition = function(x){
K = length(sol@counts)
gg=data.frame(kc=rep(cumsum(sol@counts),each=K),
lc=rep(cumsum(sol@counts),K),
sizek = rep(sol@counts,each=K),
sizel = rep(sol@counts,K),
count=as.vector(sol@x_counts))
ggplot2::ggplot(gg)+ggplot2::geom_tile(ggplot2::aes(x=kc-sizek/2,y=lc-sizel/2,width=sizek,height=sizel,fill=count/(sizek*sizel),alpha=count/(sizek*sizel)))+
ggplot2::scale_fill_distiller("Link density",type="seq",direction = 1)+
ggplot2::scale_alpha("Link density")+
ggplot2::ggtitle(paste0("SBM Model with : ",max(sol@cl)," clusters."))+
ggplot2::scale_x_continuous("",breaks=cumsum(sol@counts),labels = paste0(round(100*sol@counts/sum(sol@counts)),"%"))+
ggplot2::scale_y_continuous("",breaks=cumsum(sol@counts),labels = paste0(round(100*sol@counts/sum(sol@counts)),"%"))+
ggplot2::coord_fixed()+ggplot2::theme_bw()
});
setMethod(f = "plot",
signature = signature("sbm_fit","missing"),
definition = function(sol){
K = length(sol@counts)
gg=data.frame(kc=rep(cumsum(sol@counts),each=K),
lc=rep(cumsum(sol@counts),K),
sizek = rep(sol@counts,each=K),
sizel = rep(sol@counts,K),
count=as.vector(sol@x_counts))
ggplot2::ggplot(gg)+ggplot2::geom_tile(ggplot2::aes(x=kc-sizek/2,y=lc-sizel/2,width=sizek,height=sizel,fill=count/(sizek*sizel),alpha=count/(sizek*sizel)))+
ggplot2::scale_fill_distiller("Link density",type="seq",direction = 1)+
ggplot2::scale_alpha("Link density")+
ggplot2::ggtitle(paste0("SBM Model with : ",max(sol@cl)," clusters."))+
ggplot2::scale_x_continuous("",breaks=cumsum(sol@counts),labels = paste0(round(100*sol@counts/sum(sol@counts)),"%"))+
ggplot2::scale_y_continuous("",breaks=cumsum(sol@counts),labels = paste0(round(100*sol@counts/sum(sol@counts)),"%"))+
ggplot2::coord_fixed()+ggplot2::theme_bw()
});
setMethod(f = "plot",
signature = signature("sbm_fit","missing"),
definition = function(x){
K = length(x@counts)
gg=data.frame(kc=rep(cumsum(x@counts),each=K),
lc=rep(cumsum(x@counts),K),
sizek = rep(x@counts,each=K),
sizel = rep(x@counts,K),
count=as.vector(x@x_counts))
ggplot2::ggplot(gg)+ggplot2::geom_tile(ggplot2::aes(x=kc-sizek/2,y=lc-sizel/2,width=sizek,height=sizel,fill=count/(sizek*sizel),alpha=count/(sizek*sizel)))+
ggplot2::scale_fill_distiller("Link density",type="seq",direction = 1)+
ggplot2::scale_alpha("Link density")+
ggplot2::ggtitle(paste0("SBM Model with : ",max(sol@cl)," clusters."))+
ggplot2::scale_x_continuous("",breaks=cumsum(sol@counts),labels = paste0(round(100*sol@counts/sum(sol@counts)),"%"))+
ggplot2::scale_y_continuous("",breaks=cumsum(sol@counts),labels = paste0(round(100*sol@counts/sum(sol@counts)),"%"))+
ggplot2::coord_fixed()+ggplot2::theme_bw()
});
plot(sol)
table(sbm$cl)
devtools::document()
devtools::document()
library(greed)
plot(1:5)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
K=20
N=1000
pi=rep(1/K,K)
epsilon = 0.0001
lambda  = 0.1
mu=matrix(epsilon,K,K)+diag(rep(lambda,K))
sbm = rsbm(N,pi,mu)
sol=fit(sbm$x,30,new("sbm"),new("genetic",pop_size=20,nb_max_gen=10))
library(greed)
sol=fit(sbm$x,30,new("sbm"),new("genetic",pop_size=20,nb_max_gen=10))
future::availableCores()
future::availableWorkers()
source('~/Projets/greed/R/alg_classes.R', echo=TRUE)
sol=fit(sbm$x,30,new("sbm"),new("genetic",pop_size=20,nb_max_gen=10))
library(future)
sol=fit(sbm$x,30,new("sbm"),new("genetic",pop_size=20,nb_max_gen=10))
table(sol@cl,sbm$cl)
cl <- parallel::makeCluster(2L, timeout = 60)
plan(cluster, workers = cl)
2L
source('~/Projets/greed/R/alg_classes.R', echo=TRUE)
sol=fit(sbm$x,30,new("sbm"),new("genetic",pop_size=20,nb_max_gen=10))
source('~/Projets/greed/R/alg_classes.R', echo=TRUE)
sol=fit(sbm$x,30,new("sbm"),new("genetic",pop_size=20,nb_max_gen=10))
source('~/Projets/greed/R/alg_classes.R', echo=TRUE)
sol=fit(sbm$x,30,new("sbm"),new("genetic",pop_size=20,nb_max_gen=10))
table(sol@cl,sbm$cl)
source('~/Projets/greed/R/alg_classes.R', echo=TRUE)
sol=fit(sbm$x,30,new("sbm"),new("genetic",pop_size=20,nb_max_gen=10))
table(sol@cl,sbm$cl)
source('~/Projets/greed/R/alg_classes.R', echo=TRUE)
sol=fit(sbm$x,30,new("sbm"),new("genetic",pop_size=40,nb_max_gen=10))
table(sol@cl,sbm$cl)
sol
library(greed)
sol=fit(sbm$x,30,new("sbm"),new("genetic",pop_size=40,nb_max_gen=10))
table(sol@cl,sbm$cl)
sol
library(greed)
sol=fit(sbm$x,30,new("sbm"),new("genetic",pop_size=40,nb_max_gen=10))
table(sol@cl,sbm$cl)
sol
library(greed)
sol=fit(sbm$x,40,new("sbm"),new("genetic",pop_size=40,nb_max_gen=10))
sol
library(greed)
sol=fit(sbm$x,40,new("sbm"),new("genetic",pop_size=40,nb_max_gen=10))
sol
library(greed)
sol=fit(sbm$x,40,new("sbm"),new("genetic",pop_size=40,nb_max_gen=10))
sol
source('~/Projets/greed/R/alg_classes.R', echo=TRUE)
sol=fit(sbm$x,40,new("sbm"),new("genetic",pop_size=40,nb_max_gen=10))
source('~/Projets/greed/R/alg_classes.R', echo=TRUE)
sol=fit(sbm$x,40,new("sbm"),new("genetic",pop_size=40,nb_max_gen=10))
table(sol@cl,sbm$cl)
library(igraph)
football=read_graph("./football.gml")
football=read_graph("./football.gml",format = "gml")
football
edges(football)
Xfoot = as_adj(football)
class(Xfoot)
sol_foot = fit(Xfoot,25)
sol_foot = fit(Xfoot,25)
library("greed")
sol_foot = fit(Xfoot,25)
sol_foot = fit(Xfoot,25,new("sbm"))
Xfoot
sol_foot = fit(sbm$x,25,new("sbm"))
sol_foot = fit(Xfoot,25,new("sbm"))
devtools::use_data(Xfoot)
library(greed)
Xfoot
data("Xfoot")
sol_foot = fit(Xfoot,25)
