}
}
sol= fiswap(ncl,move_mat)
sol
}
# cartesian product on the z of the two solution
#ncl = unclass(factor(paste(sol1@cl,sol2@cl)))
sol = sol1
ncl = sol@cl
ncl_old=sol@cl
K2  = sol2@K
icl = sol@icl
icl
for(k2 in 1:K2){
cl2=ifelse(sol2@cl==k2,1,2);
ncl_old = ncl
ij  = which(table(ncl,cl2)>0,arr.ind = TRUE);
ncl = as.numeric(factor(paste(ncl,"_",cl2,sep=""),levels=paste(ij[,1],"_",ij[,2],sep="")))
M=matrix(0,max(ncl),max(ncl))
M[ij[,2]==1,ij[,2]==1]=1
diag(M)=0
ijm=which(M==1,arr.ind = TRUE)
move_mat=sparseMatrix(i=ijm[,1],j=ijm[,2],x = rep(1,nrow(ijm)), dims = c(max(ncl),max(ncl)))
if(sum(move_mat)>0){
sol=fimerge(ncl,Matrix::tril(move_mat))
move_mat =sol@move_mat+Matrix::t(sol@move_mat);
if(sol@icl>icl){
print(icl)
print(max(ncl))
print(max(sol@cl))
icl=sol@icl
ncl = sol@cl
}else{
ncl=ncl_old
}
}
}
library(Matrix*)
library(Matrix)
sol = sol1
ncl = sol@cl
ncl_old=sol@cl
K2  = sol2@K
icl = sol@icl
for(k2 in 1:K2){
cl2=ifelse(sol2@cl==k2,1,2);
ncl_old = ncl
ij  = which(table(ncl,cl2)>0,arr.ind = TRUE);
ncl = as.numeric(factor(paste(ncl,"_",cl2,sep=""),levels=paste(ij[,1],"_",ij[,2],sep="")))
M=matrix(0,max(ncl),max(ncl))
M[ij[,2]==1,ij[,2]==1]=1
diag(M)=0
ijm=which(M==1,arr.ind = TRUE)
move_mat=sparseMatrix(i=ijm[,1],j=ijm[,2],x = rep(1,nrow(ijm)), dims = c(max(ncl),max(ncl)))
if(sum(move_mat)>0){
sol=fimerge(ncl,Matrix::tril(move_mat))
move_mat =sol@move_mat+Matrix::t(sol@move_mat);
if(sol@icl>icl){
print(icl)
print(max(ncl))
print(max(sol@cl))
icl=sol@icl
ncl = sol@cl
}else{
ncl=ncl_old
}
}
}
image(move_mat)
sol = sol1
ncl = sol@cl
ncl_old=sol@cl
K2  = sol2@K
icl = sol@icl
k2=1
cl2=ifelse(sol2@cl==k2,1,2);
ncl_old = ncl
ij  = which(table(ncl,cl2)>0,arr.ind = TRUE);
ij
ij  = which(table(ncl,cl2)>0,arr.ind = TRUE);
ncl = as.numeric(factor(paste(ncl,"_",cl2,sep=""),levels=paste(ij[,1],"_",ij[,2],sep="")))
M=matrix(0,max(ncl),max(ncl))
M[ij[,2]==1,ij[,2]==1]=1
diag(M)=0
ijm=which(M==1,arr.ind = TRUE)
move_mat=sparseMatrix(i=ijm[,1],j=ijm[,2],x = rep(1,nrow(ijm)), dims = c(max(ncl),max(ncl)))
image(move_mat)
ncl
sol=fimerge(ncl,Matrix::tril(move_mat))
move_mat =sol@move_mat+Matrix::t(sol@move_mat);
image(move_mat)
move_mat
library(greed)
sol=fimerge(ncl,Matrix::tril(move_mat))
move_mat =sol@move_mat+Matrix::t(sol@move_mat);
image(move_mat)
library(greed)
sol=fimerge(ncl,Matrix::tril(move_mat))
sol=greed:::merge_cstr(model,data,ncl,Matrix::tril(move_mat))
sol=greed:::merge_cstr(model,data,ncl,Matrix::tril(move_mat),verbose = TRUE)
sol@move_mat
library(greed)
sol=greed:::merge_cstr(model,data,ncl,Matrix::tril(move_mat),verbose = TRUE)
library(greed)
sol=greed:::merge_cstr(model,data,ncl,Matrix::tril(move_mat),verbose = TRUE)
sol = sol1
ncl = sol@cl
ncl_old=sol@cl
K2  = sol2@K
icl = sol@icl
for(k2 in 1:K2){
cl2=ifelse(sol2@cl==k2,1,2);
ncl_old = ncl
ij  = which(table(ncl,cl2)>0,arr.ind = TRUE);
ncl = as.numeric(factor(paste(ncl,"_",cl2,sep=""),levels=paste(ij[,1],"_",ij[,2],sep="")))
M=matrix(0,max(ncl),max(ncl))
M[ij[,2]==1,ij[,2]==1]=1
diag(M)=0
ijm=which(M==1,arr.ind = TRUE)
move_mat=sparseMatrix(i=ijm[,1],j=ijm[,2],x = rep(1,nrow(ijm)), dims = c(max(ncl),max(ncl)))
if(sum(move_mat)>0){
sol=fimerge(ncl,Matrix::tril(move_mat))
move_mat =sol@move_mat+Matrix::t(sol@move_mat);
if(sol@icl>icl){
print(icl)
print(max(ncl))
print(max(sol@cl))
icl=sol@icl
ncl = sol@cl
}else{
ncl=ncl_old
}
}
}
M=matrix(0,max(ncl),max(ncl))
Tac=table(ncl,sol1@cl)
for(k in 1:sol1@K){
ibrothers = which(Tac[k]!=0)
M[ibrothers,ibrothers]=1
}
Tac=table(ncl,sol2@cl)
for(k in 1:K2){
ibrothers = which(Tac[k]!=0)
M[ibrothers,ibrothers]=1
}
diag(M)=0
ijm=which(M==1,arr.ind = TRUE)
move_mat=sparseMatrix(i=ijm[,1],j=ijm[,2],x = rep(1,nrow(ijm)), dims = c(max(ncl),max(ncl)))
sol=fimerge(ncl,Matrix::tril(move_mat))
library(greed)
sol1@icl
sol@icl
sol@move_mat
iamge(sol@move_mat)
image(sol@move_mat)
sol@move_mat[sol@move_mat!=0]
M=matrix(0,max(ncl),max(ncl))
Tac=table(ncl,sol1@cl)
for(k in 1:sol1@K){
ibrothers = which(Tac[k]!=0)
M[ibrothers,ibrothers]=1
}
Tac=table(ncl,sol2@cl)
for(k in 1:K2){
ibrothers = which(Tac[k]!=0)
M[ibrothers,ibrothers]=1
}
diag(M)=0
ijm=which(M==1,arr.ind = TRUE)
move_mat=sparseMatrix(i=ijm[,1],j=ijm[,2],x = rep(1,nrow(ijm)), dims = c(max(ncl),max(ncl)))
ilmage(move_mat)
image(move_mat)
move_mat
sum(move_mat)
M=matrix(0,max(ncl),max(ncl))
Tac=table(ncl,sol1@cl)
Tac
M=matrix(0,max(ncl),max(ncl))
Tac=table(ncl,sol1@cl)
for(k in 1:sol1@K){
ibrothers = which(Tac[,k]!=0)
M[ibrothers,ibrothers]=1
}
Tac=table(ncl,sol2@cl)
for(k in 1:K2){
ibrothers = which(Tac[,k]!=0)
M[ibrothers,ibrothers]=1
}
diag(M)=0
ijm=which(M==1,arr.ind = TRUE)
move_mat=sparseMatrix(i=ijm[,1],j=ijm[,2],x = rep(1,nrow(ijm)), dims = c(max(ncl),max(ncl)))
image(move_mat)
sol=fimerge(ncl,Matrix::tril(move_mat))
move_mat = sol@move_mat
move_mat
image(move_mat)
library(greed)
plan(multisession)
sol=greed(X20news)
sol = sol1
ncl = sol@cl
ncl_old=sol@cl
K2  = sol2@K
icl = sol@icl
for(k2 in 1:K2){
cl2=ifelse(sol2@cl==k2,1,2);
ncl_old = ncl
ij  = which(table(ncl,cl2)>0,arr.ind = TRUE);
ncl = as.numeric(factor(paste(ncl,"_",cl2,sep=""),levels=paste(ij[,1],"_",ij[,2],sep="")))
M=matrix(0,max(ncl),max(ncl))
M[ij[,2]==1,ij[,2]==1]=1
diag(M)=0
ijm=which(M==1,arr.ind = TRUE)
move_mat=sparseMatrix(i=ijm[,1],j=ijm[,2],x = rep(1,nrow(ijm)), dims = c(max(ncl),max(ncl)))
if(sum(move_mat)>0){
sol=fimerge(ncl,Matrix::tril(move_mat))
move_mat =sol@move_mat+Matrix::t(sol@move_mat);
if(sol@icl>icl){
print(icl)
print(max(ncl))
print(max(sol@cl))
icl=sol@icl
ncl = sol@cl
}else{
ncl=ncl_old
}
}
}
M=matrix(0,max(ncl),max(ncl))
Tac=table(ncl,sol1@cl)
for(k in 1:sol1@K){
ibrothers = which(Tac[,k]!=0)
M[ibrothers,ibrothers]=1
}
Tac=table(ncl,sol2@cl)
for(k in 1:K2){
ibrothers = which(Tac[,k]!=0)
M[ibrothers,ibrothers]=1
}
diag(M)=0
ijm=which(M==1,arr.ind = TRUE)
move_mat=sparseMatrix(i=ijm[,1],j=ijm[,2],x = rep(1,nrow(ijm)), dims = c(max(ncl),max(ncl)))
sol=fimerge(ncl,Matrix::tril(move_mat))
move_mat = sol@move_mat
for(r in 1:nrow(move_mat)){
if(sum(move_mat[r,]!=0)>10){
merges = which(move_mat[r,]!=0)
best_merges_row = order(move_mat[r,merges],decreasing = TRUE)[1:10]
move_mat[r,setdiff(merges,merges[best_merges_row])]=0
}
}
sol = sol1
ncl = sol@cl
ncl_old=sol@cl
K2  = sol2@K
icl = sol@icl
for(k2 in 1:K2){
cl2=ifelse(sol2@cl==k2,1,2);
ncl_old = ncl
ij  = which(table(ncl,cl2)>0,arr.ind = TRUE);
ncl = as.numeric(factor(paste(ncl,"_",cl2,sep=""),levels=paste(ij[,1],"_",ij[,2],sep="")))
M=matrix(0,max(ncl),max(ncl))
M[ij[,2]==1,ij[,2]==1]=1
diag(M)=0
ijm=which(M==1,arr.ind = TRUE)
move_mat=sparseMatrix(i=ijm[,1],j=ijm[,2],x = rep(1,nrow(ijm)), dims = c(max(ncl),max(ncl)))
if(sum(move_mat)>0){
sol=fimerge(ncl,Matrix::tril(move_mat))
move_mat =sol@move_mat+Matrix::t(sol@move_mat);
if(sol@icl>icl){
print(icl)
print(max(ncl))
print(max(sol@cl))
icl=sol@icl
ncl = sol@cl
}else{
ncl=ncl_old
}
}
}
icl
M=matrix(0,max(ncl),max(ncl))
Tac=table(ncl,sol1@cl)
for(k in 1:sol1@K){
ibrothers = which(Tac[,k]!=0)
M[ibrothers,ibrothers]=1
}
Tac=table(ncl,sol2@cl)
for(k in 1:K2){
ibrothers = which(Tac[,k]!=0)
M[ibrothers,ibrothers]=1
}
diag(M)=0
ijm=which(M==1,arr.ind = TRUE)
move_mat=sparseMatrix(i=ijm[,1],j=ijm[,2],x = rep(1,nrow(ijm)), dims = c(max(ncl),max(ncl)))
sol=fimerge(ncl,Matrix::tril(move_mat))
sol@icl
max(ncl)
sol_temp=greed:::fit_greed(model,data,ncl,type="none")
sol_temp@icl
sol_temp=greed:::fit_greed(model,data,ncl,type="merge")
sol_temp@icl
sol_temp@K
sol_temp=greed:::fit_greed(model,data,sol@cl,type="merge")
sol_temp@K
sol_temp=greed:::fit_greed(model,data,sol@cl,type="mone")
sol_temp=greed:::fit_greed(model,data,sol@cl,type="none")
sol_temp@icl
icl
sol = sol1
ncl = sol@cl
ncl_old=sol@cl
K2  = sol2@K
icl = sol@icl
for(k2 in 1:K2){
cl2=ifelse(sol2@cl==k2,1,2);
ncl_old = ncl
ij  = which(table(ncl,cl2)>0,arr.ind = TRUE);
ncl = as.numeric(factor(paste(ncl,"_",cl2,sep=""),levels=paste(ij[,1],"_",ij[,2],sep="")))
M=matrix(0,max(ncl),max(ncl))
M[ij[,2]==1,ij[,2]==1]=1
diag(M)=0
ijm=which(M==1,arr.ind = TRUE)
move_mat=sparseMatrix(i=ijm[,1],j=ijm[,2],x = rep(1,nrow(ijm)), dims = c(max(ncl),max(ncl)))
if(sum(move_mat)>0){
sol=fimerge(ncl,Matrix::tril(move_mat))
move_mat =sol@move_mat+Matrix::t(sol@move_mat);
if(sol@icl>icl){
print(icl)
print(max(ncl))
print(max(sol@cl))
icl=sol@icl
ncl = sol@cl
}else{
ncl=ncl_old
}
}
}
icl
sol_temp=greed:::fit_greed(model,data,ncl,type="none")
sol_temp@icl
M=matrix(0,max(ncl),max(ncl))
Tac=table(ncl,sol1@cl)
for(k in 1:sol1@K){
ibrothers = which(Tac[,k]!=0)
M[ibrothers,ibrothers]=1
}
Tac=table(ncl,sol2@cl)
for(k in 1:K2){
ibrothers = which(Tac[,k]!=0)
M[ibrothers,ibrothers]=1
}
diag(M)=0
ijm=which(M==1,arr.ind = TRUE)
move_mat=sparseMatrix(i=ijm[,1],j=ijm[,2],x = rep(1,nrow(ijm)), dims = c(max(ncl),max(ncl)))
sol=fimerge(ncl,Matrix::tril(move_mat))
sol@icl>icl
sol_temp=greed:::merge_cstr(model,data,ncl,move_mat,TRUE)
library(greed)
sol_temp=greed:::merge_cstr(model,data,ncl,move_mat,TRUE)
library(greed)
library(greed)
sol_temp=greed:::merge_cstr(model,data,ncl,move_mat,TRUE)
sol = sol1
ncl = sol@cl
ncl_old=sol@cl
K2  = sol2@K
icl = sol@icl
for(k2 in 1:K2){
cl2=ifelse(sol2@cl==k2,1,2);
ncl_old = ncl
ij  = which(table(ncl,cl2)>0,arr.ind = TRUE);
ncl = as.numeric(factor(paste(ncl,"_",cl2,sep=""),levels=paste(ij[,1],"_",ij[,2],sep="")))
M=matrix(0,max(ncl),max(ncl))
M[ij[,2]==1,ij[,2]==1]=1
diag(M)=0
ijm=which(M==1,arr.ind = TRUE)
move_mat=sparseMatrix(i=ijm[,1],j=ijm[,2],x = rep(1,nrow(ijm)), dims = c(max(ncl),max(ncl)))
if(sum(move_mat)>0){
sol=fimerge(ncl,Matrix::tril(move_mat))
move_mat =sol@move_mat+Matrix::t(sol@move_mat);
if(sol@icl>icl){
print(icl)
print(max(ncl))
print(max(sol@cl))
icl=sol@icl
ncl = sol@cl
}else{
ncl=ncl_old
}
}
}
M=matrix(0,max(ncl),max(ncl))
Tac=table(ncl,sol1@cl)
for(k in 1:sol1@K){
ibrothers = which(Tac[,k]!=0)
M[ibrothers,ibrothers]=1
}
Tac=table(ncl,sol2@cl)
for(k in 1:K2){
ibrothers = which(Tac[,k]!=0)
M[ibrothers,ibrothers]=1
}
diag(M)=0
ijm=which(M==1,arr.ind = TRUE)
move_mat=sparseMatrix(i=ijm[,1],j=ijm[,2],x = rep(1,nrow(ijm)), dims = c(max(ncl),max(ncl)))
sol=fimerge(ncl,Matrix::tril(move_mat))
move_mat = sol@move_mat
for(r in 1:nrow(move_mat)){
if(sum(move_mat[r,]!=0)>10){
merges = which(move_mat[r,]!=0)
best_merges_row = order(move_mat[r,merges],decreasing = TRUE)[1:10]
move_mat[r,setdiff(merges,merges[best_merges_row])]=0
}
}
move_mat = sol@move_mat
for(r in 1:nrow(move_mat)){
if(sum(move_mat[r,]!=0)>10){
merges = which(move_mat[r,]!=0)
best_merges_row = order(move_mat[r,merges],decreasing = TRUE)[1:10]
move_mat[r,setdiff(merges,merges[best_merges_row])]=0
}
}
if(runif(1)<pmutation){
sp_cl=sample(max(ncl),1)
nclold=ncl
ncl[ncl==sp_cl]=sample(c(sp_cl,max(ncl)+1),sum(ncl==sp_cl),replace=TRUE)
if(max(ncl)>nrow(move_mat) & sum(ncl==sp_cl)>0){
move_mat = cbind(move_mat,move_mat[,sp_cl])
move_mat = rbind(move_mat,move_mat[sp_cl,])
move_mat[sp_cl,max(ncl)]=1
move_mat[max(ncl),sp_cl]=1
}else{
ncl=nclold
}
}
sol= fiswap(ncl,move_mat)
move_mat = sol@move_mat
ncl = sol@cl
for(r in 1:nrow(move_mat)){
if(sum(move_mat[r,]!=0)>10){
merges = which(move_mat[r,]!=0)
best_merges_row = order(move_mat[r,merges],decreasing = TRUE)[1:10]
move_mat[r,setdiff(merges,merges[best_merges_row])]=0
}
}
if(runif(1)<pmutation){
sp_cl=sample(max(ncl),1)
nclold=ncl
ncl[ncl==sp_cl]=sample(c(sp_cl,max(ncl)+1),sum(ncl==sp_cl),replace=TRUE)
if(max(ncl)>nrow(move_mat) & sum(ncl==sp_cl)>0){
move_mat = cbind(move_mat,move_mat[,sp_cl])
move_mat = rbind(move_mat,move_mat[sp_cl,])
move_mat[sp_cl,max(ncl)]=1
move_mat[max(ncl),sp_cl]=1
}else{
ncl=nclold
}
}
sol= fiswap(ncl,move_mat)
library(greed)
plan(multisession)
sol=greed(X20news)
library(greed)
sol = sol1
ncl = sol@cl
ncl_old=sol@cl
K2  = sol2@K
icl = sol@icl
for(k2 in 1:K2){
cl2=ifelse(sol2@cl==k2,1,2);
ncl_old = ncl
ij  = which(table(ncl,cl2)>0,arr.ind = TRUE);
ncl = as.numeric(factor(paste(ncl,"_",cl2,sep=""),levels=paste(ij[,1],"_",ij[,2],sep="")))
M=matrix(0,max(ncl),max(ncl))
M[ij[,2]==1,ij[,2]==1]=1
diag(M)=0
ijm=which(M==1,arr.ind = TRUE)
move_mat=sparseMatrix(i=ijm[,1],j=ijm[,2],x = rep(1,nrow(ijm)), dims = c(max(ncl),max(ncl)))
if(sum(move_mat)>0){
sol=fimerge(ncl,Matrix::tril(move_mat))
move_mat =sol@move_mat+Matrix::t(sol@move_mat);
if(sol@icl>icl){
print(icl)
print(max(ncl))
print(max(sol@cl))
icl=sol@icl
ncl = sol@cl
}else{
ncl=ncl_old
}
}
}
icl
M=matrix(0,max(ncl),max(ncl))
Tac=table(ncl,sol1@cl)
for(k in 1:sol1@K){
ibrothers = which(Tac[,k]!=0)
M[ibrothers,ibrothers]=1
}
Tac=table(ncl,sol2@cl)
for(k in 1:K2){
ibrothers = which(Tac[,k]!=0)
M[ibrothers,ibrothers]=1
}
diag(M)=0
ijm=which(M==1,arr.ind = TRUE)
move_mat=sparseMatrix(i=ijm[,1],j=ijm[,2],x = rep(1,nrow(ijm)), dims = c(max(ncl),max(ncl)))
sol=fimerge(ncl,Matrix::tril(move_mat))
library(future)
plan(multisession)
sol=greed(X20news)
