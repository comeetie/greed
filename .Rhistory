extract_front_height=function(sol){
icl=c(sol@icl,sapply(sol@path,function(v){v$icl1}))
icl = icl[length(icl):1]
K = 1:length(icl)
H=rep(0,length(icl))
cdi = Inf
bestline = 1
Front = c(1)
for (l in 2:length(icl)){
di = (icl[l]-icl[bestline])
din = di/(l-bestline)
if (di > 0){
while(din > cdi & length(Front)>1){
Front=Front[-length(Front)]
H[bestline]=-1
bestline = Front[length(Front)]
di = (icl[l]-icl[bestline])
din = di/(l-bestline)
if(length(Front)>1){
cdi = (icl[bestline]-icl[Front[length(Front)-1]])/(bestline-Front[length(Front)-1])
}else{
cdi = H[1]
}
#print(Front)
#print(paste0("T : ",din," / ",cdi," :",bestline))
}
H[Front[length(Front)]]=din
cdi = din
bestline = l
Front=c(Front,l)
}else{
H[l]= -1
}
#print(Front)
print(H)
}
for(l in 2:length(icl)){
if(H[l]==-1){
H[l]=H[l-1]
}
}
H
}
extract_front_height(sol)
extract_front_height=function(sol){
icl=c(sol@icl,sapply(sol@path,function(v){v$icl1}))
icl = icl[length(icl):1]
K = 1:length(icl)
H=rep(0,length(icl))
cdi = Inf
bestline = 1
Front = c(1)
for (l in 2:length(icl)){
di = (icl[l]-icl[bestline])
din = di/(l-bestline)
if (di > 0){
while(din > cdi & length(Front)>1){
Front=Front[-length(Front)]
H[bestline]=-1
bestline = Front[length(Front)]
di = (icl[l]-icl[bestline])
din = di/(l-bestline)
if(length(Front)>1){
cdi = (icl[bestline]-icl[Front[length(Front)-1]])/(bestline-Front[length(Front)-1])
}else{
cdi = H[1]
}
#print(Front)
#print(paste0("T : ",din," / ",cdi," :",bestline))
}
H[Front[length(Front)]]=din
cdi = din
bestline = l
Front=c(Front,l)
}else{
H[l]= -1
}
#print(Front)
print(H)
}
for(l in 2:length(icl)){
if(H[l]==-1){
H[l]=H[l-1]
}
}
H
}
extract_front_height(sol)
library(greed)
library(package)
library(future)
plan(multisession)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
sol = greed_cond(mre$X,mre$y/sd(mre$y),model=new("mreg",reg=0.1))
plot(sol,type='tree')
plot(sol,type='front')
library(greed)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
plot(sol,type='front')
library(greed)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
plot(sol,type='front')
N=1500
K=4
pi=rep(1/K,K)
sig = 0.1
mre = rmreg(N,pi,mu,sig)
gg = data.frame(x=mre$X[,1],y=mre$y)
ggplot(gg)+geom_point(aes(x=x,y=y,col=factor(mre$cl)))
sol = greed_cond(mre$X,mre$y/sd(mre$y),model=new("mreg",reg=0.1),verbose = TRUE)
mat_reg_line(sol,mre$X,mre$y)
plot(sol,type='front')
library(greed)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(greed)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(Matrix)
library(ggplot2)
library(greed)
library(dplyr)
set.seed(32)
data("Xpol")
sol = greed(Xpol,25,model=new("dcsbm"),alg=new("hybrid",pop_size=50))
plot(sol)
plot(sol,type='tree')
probs = post_probs(new("dcsbm"),Xpol,sol@cl)
probs = post_probs(new("dcsbm"),list(X=Xpol),sol@cl)
rl=data.frame(size=colnames(Xpol),cl=sol@cl,dout=rowSums(Xpol),din=colSums(Xpol),p=apply(probs,1,max))
rl %>% group_by(cl) %>% top_n(3,din) %>% arrange(cl)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(future)
library(Matrix)
library(ggplot2)
library(greed)
plan(multisession)
mat_reg_line = function(x,Xd,yd){
K = length(x@obs_stats$counts)
D = length(x@obs_stats$regs[[1]]$mu)
ggp= data.frame(x=Xd[,1],y=yd,K=factor(x@cl,levels=1:K))
gg=data.frame(y=as.vector(cbind(seq(min(ggp$x),max(ggp$x),length.out = 20),rep(1,20))%*%sapply(x@obs_stats$regs,function(reg){reg$mu})),
x=rep(seq(min(ggp$x),max(ggp$x),length.out = 20),K),K=rep(1:K,each=20))
ggplot2::ggplot()+
ggplot2::geom_point(data=ggp[,1:2],ggplot2::aes(x=x,y=y),alpha=0.05)+
ggplot2::geom_path(data=gg,ggplot2::aes(x=x,y=y,group=K))+
ggplot2::geom_point(data=ggp,ggplot2::aes(x=x,y=y,col=K))+
ggplot2::ggtitle(paste0("Mixture of Regression Model with : ",max(x@cl)," clusters."))+
ggplot2::facet_wrap(~K)+
ggplot2::theme_bw()
}
N=1500
K=6
pi=rep(1/K,K)
sig = 0.1
mu = matrix(rnorm(K*K),K,K)*0.3
diag(mu)=1
mre = rmreg(N,pi,mu,sig)
gg = data.frame(x=mre$X[,1],y=mre$y)
ggplot(gg)+geom_point(aes(x=x,y=y,col=factor(mre$cl)))
sol = greed_cond(mre$X,mre$y/sd(mre$y),model=new("mreg",reg=0.1))
plot(sol,type='tree')
plot(sol,type='front')
table(sol@cl,mre$cl)
N=1500
K=4
pi=rep(1/K,K)
sig = 0.1
mu = matrix(rnorm(K*2),2,K)
mre = rmreg(N,pi,mu,sig)
gg = data.frame(x=mre$X[,1],y=mre$y)
ggplot(gg)+geom_point(aes(x=x,y=y,col=factor(mre$cl)))
sol = greed_cond(mre$X,mre$y/sd(mre$y),model=new("mreg",reg=0.1))
mat_reg_line(sol,mre$X,mre$y)
mat_reg_line(sol,mre$X,mre$y/sd(mre$y))
probs=post_probs(new("mreg",reg=0.1),list(X=mre$X,y=mre$y/sd(mre$y)),sol@cl)
probs
apply(probs,1,function(p){-sum(p*log(p))})
mre$X
ggplot(data.frame(entropy=entropy,x=X[,1],y=mre$y/sd(mre$y)))+geom_point(aes(x=x,y=y,color=entropy))
entropy=apply(probs,1,function(p){-sum(p*log(p))})
ggplot(data.frame(entropy=entropy,x=X[,1],y=mre$y/sd(mre$y)))+geom_point(aes(x=x,y=y,color=entropy))
ggplot(data.frame(entropy=entropy,x=mre$X[,1],y=mre$y/sd(mre$y)))+geom_point(aes(x=x,y=y,color=entropy))
ggplot(data.frame(entropy=entropy,x=mre$X[,1],y=mre$y/sd(mre$y)))+geom_point(aes(x=x,y=y,color=entropy))
ggplot(data.frame(entropy=entropy,x=mre$X[,1],y=mre$y/sd(mre$y)))+geom_point(aes(x=x,y=y,color=entropy,alpha=1-entropy))
ggplot(data.frame(entropy=entropy,x=mre$X[,1],y=mre$y/sd(mre$y)))+geom_point(aes(x=x,y=y,color=entropy,alpha=1-entropy))
ggplot(data.frame(entropy=entropy,x=mre$X[,1],y=mre$y/sd(mre$y)))+geom_point(aes(x=x,y=y,color=entropy,alpha=entropy))
ggplot(data.frame(entropy=entropy,x=mre$X[,1],y=mre$y/sd(mre$y)))+geom_point(aes(x=x,y=y,color=entropy,alpha=entropy))+scale_color_distiller(palette="YlOrRd")
ggplot(data.frame(entropy=entropy,x=mre$X[,1],y=mre$y/sd(mre$y)))+geom_point(aes(x=x,y=y,color=entropy,alpha=entropy))+scale_color_distiller(palette="YlOrRd",direction = -1)
?scale_color_distiller
ggplot(data.frame(entropy=entropy,x=mre$X[,1],y=mre$y/sd(mre$y)))+geom_point(aes(x=x,y=y,color=entropy,alpha=entropy))+scale_color_distiller(palette="YlOrRd",direction = 1)
ggplot(data.frame(entropy=entropy,x=mre$X[,1],y=mre$y/sd(mre$y),pm=pm))+geom_point(aes(x=x,y=y,color=entropy,alpha=1-entropy))
pm=apply(probs,1,function(p){max(p)})
ggplot(data.frame(entropy=entropy,x=mre$X[,1],y=mre$y/sd(mre$y),pm=pm))+geom_point(aes(x=x,y=y,color=entropy,alpha=1-entropy))
ggplot(data.frame(entropy=entropy,x=mre$X[,1],y=mre$y/sd(mre$y),pm=pm))+geom_point(aes(x=x,y=y,color=entropy,alpha=entropy))
ggplot(data.frame(entropy=entropy,x=mre$X[,1],y=mre$y/sd(mre$y),pm=pm))+
geom_point(aes(x=x,y=y,color=pm))+
scale_color_distiller(palette="YlOrRd",direction = 1)
ggplot(data.frame(entropy=entropy,x=mre$X[,1],y=mre$y/sd(mre$y),pm=pm))+
geom_point(aes(x=x,y=y,color=pm))+
scale_color_distiller(palette="YlOrRd",direction = 1)
ggplot(data.frame(entropy=entropy,x=mre$X[,1],y=mre$y/sd(mre$y),pm=pm))+
geom_point(aes(x=x,y=y,color=pm))+
scale_color_distiller(palette="YlOrRd",direction = 1)
ggplot(data.frame(entropy=entropy,x=mre$X[,1],y=mre$y/sd(mre$y),pm=pm))+
geom_point(aes(x=x,y=y,color=pm))+
scale_color_distiller(palette="YlOrRd")
ggplot(data.frame(entropy=entropy,x=mre$X[,1],y=mre$y/sd(mre$y),pm=pm) %>% arrange(pm))+
geom_point(aes(x=x,y=y,color=pm))+
scale_color_distiller(palette="YlOrRd")
ggplot(data.frame(entropy=entropy,x=mre$X[,1],y=mre$y/sd(mre$y),pm=pm) %>% arrange(pm))+
geom_point(aes(x=x,y=y,color=pm))+
scale_color_distiller(palette="YlOrRd")
ggplot(data.frame(entropy=entropy,x=mre$X[,1],y=mre$y/sd(mre$y),pm=pm) %>% arrange(desc(pm)))+
geom_point(aes(x=x,y=y,color=pm))+
scale_color_distiller(palette="YlOrRd")
?runif
?aggregate
?rnorm
?kmeans
data=mre
X=cbind(data$X,data$y)
X
sd(X)
apply(X,2,sd)
sds=apply(X,2,sd)
X=X[,sds!=0]
X
var(X)
t(X)/sds
t(t(X)/sds)
t(t(X)/sds[sds!=0])
X=cbind(data$X,data$y)
sds=apply(X,2,sd)
X=X[,sds!=0]
X=t(t(X)/sds[sds!=0])
x
X
var(X)
#' @importFrom graphics plot
#' @include models_classes.R fit_classes.R
#' @title Plot a clustering results
#' @description Main methods to explore clusterings results visualy.
#' @name plot
NULL
nodelink = function(sol){
ij = Matrix::which(sol@obs_stats$x_counts>0,arr.ind = TRUE)
ld = sol@obs_stats$x_counts
#/(sol@obs_stats$counts%*%t(sol@obs_stats$counts))
ij = ij[ij[,1]!=ij[,2],]
gglink = data.frame(from=ij[,1],to=ij[,2],p=ld[ij])
ggnode = data.frame(i=1:length(sol@obs_stats$counts),pi=diag(sol@obs_stats$x_counts))
gl = ggplot2::guide_legend()
ggplot2::ggplot()+ggplot2::geom_curve(data=gglink,ggplot2::aes_(x=~from,xend=to,y=~ifelse(from<to,-0.3,0.3),yend=~ifelse(from<to,-0.3,0.3),size=~p,alpha=~p),arrow=grid::arrow(length = grid::unit(2,"mm")),curvature = 0.7)+
ggplot2::scale_x_continuous("",c())+
ggplot2::scale_y_continuous("",c(),limits = c(-5,5))+
ggplot2::scale_alpha("Link density:",limits=c(0,max(gglink$p)),guide="none")+
ggplot2::scale_size_area("Clusters size:",limits=c(0,max(ggnode$pi)),max_size = 4,guide="none")+
ggplot2::geom_point(data=ggnode,aes(x=i,y=0,size=pi))+
ggplot2::ggtitle(paste0(toupper(sol@model@name)," model with : ",max(sol@cl)," clusters."))+
ggplot2::theme_minimal()
}
#' nodelinklab
#' @param sol \code{\link{mm_path-class}} object to be plot
#' @param labels a vector of cluster labels
#' @param s threeshold for links
#' @return a ggplot2 graph
#' @export
nodelinklab = function(sol,labels,s=0){
ij = Matrix::which(sol@obs_stats$x_counts>0,arr.ind = TRUE)
ld = sol@obs_stats$x_counts
#/(sol@obs_stats$counts%*%t(sol@obs_stats$counts))
ij = ij[ij[,1]!=ij[,2],]
gglink = data.frame(from=ij[,1],to=ij[,2],p=ld[ij])
ggnode = data.frame(i=1:length(sol@obs_stats$counts),pi=diag(sol@obs_stats$x_counts))
gl = ggplot2::guide_legend()
ggplot2::ggplot()+ggplot2::geom_curve(data=gglink %>% filter(p>s),ggplot2::aes_(x=~from,xend=~to,y=~ifelse(from<to,-0.3,0.3),yend=~ifelse(from<to,-0.3,0.3),size=~p,alpha=~p),arrow=grid::arrow(length = grid::unit(2,"mm")),curvature = 0.7)+
ggplot2::scale_x_continuous("",c())+
ggplot2::scale_y_continuous("",c(),limits = c(-6,6))+
ggplot2::scale_alpha("Link density:",limits=c(0,max(gglink$p)),guide="none")+
ggplot2::scale_size_area("Clusters size:",limits=c(0,max(c(ggnode$pi,gglink$p))),max_size = 4,guide="none")+
ggplot2::geom_point(data=ggnode,aes_(x=~i,y=~-0.1,size=~pi))+
ggplot2::ggtitle(paste0(toupper(sol@model@name)," model with : ",max(sol@cl)," clusters."))+
ggplot2::geom_text(data=data.frame(x=1:length(labels),label=labels),aes_(x=~x,label=~label,y=~0.05))+
ggplot2::theme_minimal()
}
graph_blocks = function(x){
K = length(x@obs_stats$counts)
gg=data.frame(kc=rep(cumsum(x@obs_stats$counts),each=K),
lc=rep(cumsum(x@obs_stats$counts),K),
sizek = rep(x@obs_stats$counts,each=K),
sizel = rep(x@obs_stats$counts,K),
count=as.vector(x@obs_stats$x_counts))
ggplot2::ggplot(gg[gg$count>0,])+ggplot2::geom_tile(ggplot2::aes_(x=~kc-sizek/2,y=~lc-sizel/2,width=~sizek,height=~sizel,fill=~count/(sizek*sizel),alpha=~count/(sizek*sizel)))+
ggplot2::scale_fill_distiller("Link density",type="seq",direction = 1)+
ggplot2::scale_alpha("Link density")+
ggplot2::ggtitle(paste0(toupper(x@model@name)," model with : ",max(x@cl)," clusters."))+
ggplot2::scale_x_continuous("",breaks=cumsum(x@obs_stats$counts),labels = ifelse(x@obs_stats$counts/sum(x@obs_stats$counts)>0.05,paste0(round(100*x@obs_stats$counts/sum(x@obs_stats$counts)),"%"),""),minor_breaks = NULL)+
ggplot2::scale_y_continuous("",breaks=cumsum(x@obs_stats$counts),labels = ifelse(x@obs_stats$counts/sum(x@obs_stats$counts)>0.05,paste0(round(100*x@obs_stats$counts/sum(x@obs_stats$counts)),"%"),""),minor_breaks = NULL)+
ggplot2::coord_fixed()+ggplot2::theme_bw()
}
graph_blocks_degnorm = function(x){
K = length(x@obs_stats$counts)
gg=data.frame(kc=rep(cumsum(x@obs_stats$counts),each=K),
lc=rep(cumsum(x@obs_stats$counts),K),
sizek = rep(x@obs_stats$counts,each=K),
sizel = rep(x@obs_stats$counts,K),
dk = as.vector(x@obs_stats$dout%*%t(x@obs_stats$din)),
count=as.vector(x@obs_stats$x_counts))
ggplot2::ggplot(gg[gg$count>0,])+ggplot2::geom_tile(ggplot2::aes_(x=~kc-sizek/2,y=~lc-sizel/2,width=~sizek,height=~sizel,fill=~count),alpha=0.8)+
ggplot2::scale_fill_distiller("Flow :",type="seq",direction = 1,palette="YlGnBu")+
ggplot2::ggtitle(paste0(toupper(x@model@name)," model with : ",max(x@cl)," clusters."))+
ggplot2::scale_x_continuous("",breaks=cumsum(x@obs_stats$counts),labels = ifelse(x@obs_stats$counts/sum(x@obs_stats$counts)>0.05,paste0(round(100*x@obs_stats$counts/sum(x@obs_stats$counts)),"%"),""),minor_breaks = NULL)+
ggplot2::scale_y_continuous("",breaks=cumsum(x@obs_stats$counts),labels = ifelse(x@obs_stats$counts/sum(x@obs_stats$counts)>0.05,paste0(round(100*x@obs_stats$counts/sum(x@obs_stats$counts)),"%"),""),minor_breaks = NULL)+
ggplot2::coord_fixed()+ggplot2::theme_bw()
}
#' graph_balance
#' @param sol \code{\link{mm_path-class}} object to be plot
#' @return a ggplot2 graph
#' @export
graphbalance = function(x){
K = length(x@obs_stats$counts)
B=x@obs_stats$x_counts-t(x@obs_stats$x_counts)
gg=data.frame(kc=rep(cumsum(x@obs_stats$counts),each=K),
lc=rep(cumsum(x@obs_stats$counts),K),
sizek = rep(x@obs_stats$counts,each=K),
sizel = rep(x@obs_stats$counts,K),
dk = as.vector(x@obs_stats$dout%*%t(x@obs_stats$din)),
count=as.vector(B))
vm =max(abs(gg$count))
ggplot2::ggplot(gg)+ggplot2::geom_tile(ggplot2::aes_(x=~kc-sizek/2,y=~lc-sizel/2,width=~sizek,height=~sizel,fill=~count),alpha=0.7)+
ggplot2::scale_fill_distiller("Balance :",direction = 1,palette="RdBu",limits=c(-vm,vm))+
ggplot2::ggtitle(paste0(toupper(x@model@name)," model with : ",max(x@cl)," clusters."))+
ggplot2::scale_x_continuous("",breaks=cumsum(x@obs_stats$counts),labels = ifelse(x@obs_stats$counts/sum(x@obs_stats$counts)>0.05,paste0(round(100*x@obs_stats$counts/sum(x@obs_stats$counts)),"%"),""),minor_breaks = NULL)+
ggplot2::scale_y_continuous("",breaks=cumsum(x@obs_stats$counts),labels = ifelse(x@obs_stats$counts/sum(x@obs_stats$counts)>0.05,paste0(round(100*x@obs_stats$counts/sum(x@obs_stats$counts)),"%"),""),minor_breaks = NULL)+
ggplot2::coord_fixed()+ggplot2::theme_bw()
}
mat_blocks = function(x){
K = length(x@obs_stats$counts)
D = dim(x@obs_stats$x_counts)[2]
gg=data.frame(kc=rep(cumsum(x@obs_stats$counts),D),
lc=rep(1:D,each=K),
sizek = rep(x@obs_stats$counts,D),
sizel = rep(1,K*D),
count=as.vector(x@obs_stats$x_counts))
ggplot2::ggplot(gg)+ggplot2::geom_tile(ggplot2::aes_(y=~kc-sizek/2,x=~lc-sizel/2,height=~sizek,width=~sizel,fill=~count/sizek,alpha=~count/sizek))+
ggplot2::scale_fill_distiller("E[X]",type="seq",direction = 1)+
ggplot2::scale_alpha("E[X]")+
ggplot2::ggtitle(paste0("MM Model with : ",max(x@cl)," clusters."))+
ggplot2::scale_x_continuous("Features",breaks=1:D,labels=rep("",D),minor_breaks = NULL)+
ggplot2::scale_y_continuous("Clusters",breaks=cumsum(x@obs_stats$counts),labels = paste0(round(100*x@obs_stats$counts/sum(x@obs_stats$counts)),"%"),minor_breaks = NULL)+
ggplot2::theme_bw()
}
mat_reg = function(x){
K = length(x@obs_stats$counts)
D = length(x@obs_stats$regs[[1]]$mu)
gg=data.frame(kc=rep(cumsum(x@obs_stats$counts),D),
lc=rep(1:D,each=K),
sizek = rep(x@obs_stats$counts,D),
sizel = rep(1,K*D),
count=as.vector(sapply(x@obs_stats$regs,function(reg){reg$mu})))
ggplot2::ggplot(gg)+ggplot2::geom_tile(ggplot2::aes_(y=~kc-sizek/2,x=~lc-sizel/2,height~=sizek,width~=sizel,fill=~count,alpha=~count))+
ggplot2::scale_fill_distiller(expression(paste(" ",beta," ")),type="seq",direction = 1,palette = 2)+
ggplot2::scale_alpha(expression(paste(" ",beta," ")))+
ggplot2::ggtitle(paste0("Mixture of Regression Model with : ",max(x@cl)," clusters."))+
ggplot2::scale_x_continuous("Features",breaks=1:D,labels=rep("",D),minor_breaks = NULL)+
ggplot2::scale_y_continuous("Clusters",breaks=cumsum(x@obs_stats$counts),labels = paste0(round(100*x@obs_stats$counts/sum(x@obs_stats$counts)),"%"),minor_breaks = NULL)+
ggplot2::theme_bw()
}
mat_reg_line = function(x,Xd,yd){
K = length(x@obs_stats$counts)
D = length(x@obs_stats$regs[[1]]$mu)
ggp= data.frame(x=Xd[,1],y=yd,K=factor(x@cl,levels=1:K))
gg=data.frame(y=as.vector(cbind(seq(min(ggp$x),max(ggp$x),length.out = 20),rep(1,20))%*%sapply(x@obs_stats$regs,function(reg){reg$mu})),
x=rep(seq(min(ggp$x),max(ggp$x),length.out = 20),K),K=rep(1:K,each=20))
ggplot2::ggplot()+
ggplot2::geom_point(data=ggp[,1:2],ggplot2::aes_(x=~x,y=~y),alpha=0.05)+
ggplot2::geom_path(data=gg,ggplot2::aes_(x=~x,y=~y,group=~K))+
ggplot2::geom_point(data=ggp,ggplot2::aes_(x=~x,y=~y,col=~K))+
ggplot2::ggtitle(paste0("Mixture of Regression Model with : ",max(x@cl)," clusters."))+
ggplot2::facet_wrap(~K)+
ggplot2::theme_bw()
}
dendo = function(x){
ggtree = x@ggtree
ggplot2::ggplot()+ggplot2::geom_segment(data=ggtree[ggtree$node %in% ggtree$tree,],ggplot2::aes_(x=~xmin,y=~H,xend=~xmax,yend=~H))+
ggplot2::geom_segment(data=ggtree[-1,],ggplot2::aes_(x=~x,y=~H,xend=~x,yend=~Hend))+
ggplot2::scale_x_continuous("",breaks=c())+
ggplot2::ylab(expression(paste("-log(",alpha,")")))+
ggplot2::ggtitle(paste0(toupper(x@model@name)," ",length(x@obs_stats$counts)," clusters, dendogram"))+
ggplot2::theme_bw()
}
lapath = function(x){
gg = data.frame(k=sapply(x@path,function(p){p$K}),logalpha=sapply(x@path,function(p){p$logalpha}))
gg = rbind(gg,data.frame(k=length(x@obs_stats$counts),logalpha=x@logalpha))
ggplot2::ggplot(data=gg)+ggplot2::geom_line(ggplot2::aes_(x=~k,y=~-logalpha))+
ggplot2::geom_point(ggplot2::aes_(x=~k,y=~-logalpha))+
ggplot2::ylab(expression(paste("-log(",alpha,")")))+
ggplot2::ggtitle(paste0(toupper(x@model@name)," ",length(x@obs_stats$counts)," clusters"))+
ggplot2::theme_bw()
}
iclpath = function(x){
gg = data.frame(k=sapply(x@path,function(p){length(p$counts)}),icl=sapply(x@path,function(p){p$icl}))
gg = rbind(gg,data.frame(k=length(x@obs_stats$counts),icl=x@icl))
ggplot2::ggplot(data=gg)+ggplot2::geom_line(ggplot2::aes_(x=~k,y=~icl))+
ggplot2::geom_point(ggplot2::aes_(x=~k,y=~icl))+
ggplot2::ylab(expression(paste("ICL")))+
ggplot2::ggtitle(paste0(toupper(x@model@name)," ",length(x@obs_stats$counts)," clusters"))+
ggplot2::theme_bw()
}
pprint =function(x,M,l){
K = length(x@obs_stats$counts)
na = colnames(M)
D=Matrix::rowSums(M)
for (k in 1:K){
ii=which(x@cl==k)
topk=order(D[ii],decreasing = TRUE)[1:l]
print(na[ii[topk]])
}
}
spy = function(x){
ij=Matrix::which(x!=0,arr.ind = TRUE)
gg=data.frame(i=ij[,1],j=ij[,2],v=x[ij])
ggplot2::ggplot(gg)+ggplot2::geom_point(aes_(y=~-i,x=~j,size=~v))+
ggplot2::scale_x_continuous("",c())+
ggplot2::scale_y_continuous("",c())+
ggplot2::scale_size_area(max_size=1,guide='none')
}
plot_front = function(sol){
icl = c(sol@icl,sapply(sol@path,function(v){v$icl1}))
ggicl = data.frame(icl = icl[length(icl):1], K  = 1:length(icl))
#ggfront= sol@ggtree %>% mutate(x=-H) %>% select(x,K) %>% arrange(x) %>% head(sol@K) %>% left_join(ggicl) %>% mutate(xp=lag(x))
ggfront = merge(sol@ggtree[,c("H","K")],ggicl)
ggfront$x = -ggfront$H
ggfront = ggfront[order(ggfront$x)[1:sol@K],]
ggfront$xp = c(min(ggfront$x)-0.05*diff(range(ggfront$x)), ggfront$x[1:(nrow(ggfront)-1)])
ggfront = ggfront[ggfront$x!=ggfront$xp,]
ggplot2::ggplot()+ggplot2::geom_abline(data=ggicl,ggplot2::aes_(intercept=~icl,slope=~K-1),alpha=0.2)+
ggplot2::geom_point(data=ggfront,ggplot2::aes_(x=~x,y=~icl+x*(K-1)))+
ggplot2::geom_segment(data=ggfront,ggplot2::aes_(x=~x,y=~icl+x*(K-1),xend=~xp,yend=~icl+xp*(K-1)))+
ggplot2::scale_x_continuous(expression(paste("log(",alpha,")")),limits = c(min(ggfront$xp),0))+
ggplot2::ylab("ICL")+
ggplot2::ggtitle(paste0(toupper(sol@model@name)," model with : ",max(sol@cl)," clusters."))+
ggplot2::theme_bw()
}
#' @rdname print
#' @title print
#' print an icl_path object
#' @param x \code{\link{icl_path-class}} object to print
#' @export
setMethod(f = "print",
signature = signature("icl_path"),
definition = function(x){
print(paste0("ICL clustering with a ",toupper(x@model@name)," model, ",length(x@obs_stats$counts), " clusters and an icl of ", round(x@icl),"."))
})
#' @rdname show
#' @title show
#' show an icl_path object
#' @param object \code{\link{icl_path-class}} object to print
#' @export
setMethod(f = "show",
signature = signature("icl_path"),
definition = function(object){
print(object)
})
library(greed)
library(greed)
library(greed)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
library(greed)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(greed)
devtools::document()
library(greed)
devtools::document()
library(greed)
