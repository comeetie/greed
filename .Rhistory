cnodes[path[[m]]$l]=m
cnodes=cnodes[-path[[m]]$k]
}
# find optimal leaf ordering
dm=-path[[1]]$merge_mat-t(path[[1]]$merge_mat)
dm[is.infinite(dm)]=100*max(dm[!is.infinite(dm)])
if(length(path)>1){
leaforder = cba::order.optimal(stats::as.dist(dm),merge)
}else{
leaforder=list(order=1:2)
}
# ordering of initial solution
pathsol@obs_stats = reorder(pathsol@model,pathsol@obs_stats,leaforder$order)
pathsol@cl=order(leaforder$order)[pathsol@cl]
#prepare the data.frame to store the tree
ggtree=data.frame(H=rep(0,K),tree=0,x=seq(-1,1,length.out = K),node=1:K,xmin=0,xmax=0,K=K)
tree  = rep(0,2*K-1)
perm  = leaforder$order
nodes = 1:K
cn=K+1
for (m in 1:length(path)){
# update the permutation
oldperm=perm
perm=perm[perm!=path[[m]]$k]
perm[perm>path[[m]]$k]=perm[perm>path[[m]]$k]-1
# update the stats accordingly
path[[m]]$obs_stats = reorder(pathsol@model,path[[m]]$obs_stats,as.integer(perm))
path[[m]]$cl=order(perm)[path[[m]]$cl]
path[[m]]$merge_mat=tril(path[[m]]$merge_mat[oldperm,oldperm]+t(path[[m]]$merge_mat[oldperm,oldperm]))
# and the index of the merged cluster
nkl=sort(which(oldperm==path[[m]]$k|oldperm==path[[m]]$l))
path[[m]]$k=nkl[2]
path[[m]]$l=nkl[1]
# build the tree
tree[nodes[path[[m]]$k]]=cn
tree[nodes[path[[m]]$l]]=cn
xchildren = ggtree$x[c(nodes[path[[m]]$k],nodes[path[[m]]$l])]
ggtree=rbind(ggtree,data.frame(H=Hfront[K-m],tree=0,x=mean(xchildren),node=cn,xmin=min(xchildren),xmax=max(xchildren),K=K-m))
# update nodes vector
nodes=nodes[-path[[m]]$k]
nodes[path[[m]]$l]=cn
cn=cn+1
}
# store the tree
ggtree$tree=tree
# store height and xpos of father
ggtree$Hend = c(ggtree$H[ggtree$tree],-1)
ggtree$xend = c(ggtree$x[ggtree$tree],-1)
# store upated path and tree
pathsol@path = path
pathsol@tree = tree
pathsol@ggtree = ggtree[nrow(ggtree):1,]
}else{
# deals with empty path
pathsol@tree=c(0)
pathsol@ggtree = data.frame(H=0,tree=0,x=0,node=1,xmin=0,max=0)
}
}else{
# deals with empty path
pathsol@tree=c(0)
pathsol@ggtree = data.frame(H=0,tree=0,x=0,node=1,xmin=0,max=0)
}
icli = sapply(path,function(p){p$icl1})
plot(icli)
Hfront=greed:::extract_front_height(pathsol)
Hfront
plot(Hfront)
# initialisation
# build the merge tree in hclust format
merge = c()
cnodes = -(1:pathsol@K)
for (m in 1:length(path)){
merge= rbind(merge,c(cnodes[path[[m]]$k],cnodes[path[[m]]$l]))
cnodes[path[[m]]$l]=m
cnodes=cnodes[-path[[m]]$k]
}
merge
dm=-path[[1]]$merge_mat-t(path[[1]]$merge_mat)
dm[is.infinite(dm)]=100*max(dm[!is.infinite(dm)])
stats::as.dist(dm)
pathsol@path[[1]]
pathsol@path[[1]]$obs_stats
merge
solpath@path
pathsol@path
library(greed)
path=greed:::fit_greed_path(greed:::preprocess(new("co_dcsbm"),sim$x),pathsol)
path=greed:::fit_greed_path(greed:::preprocess(new("co_dcsbm"),sim$x,5),pathsol)
library(greed)
data=greed:::preprocess(new("co_dcsbm"),sim$x)
data
path=greed:::fit_greed_path(data,pathsol)
library(future)
plan(multisession)
sol=greed(simu$x)
sol=greed(sim$x)
pathsol
library(greed)
path=greed:::fit_greed_path(data,pathsol)
path
path@path
pathsol=path
# initialisation
# build the merge tree in hclust format
merge = c()
cnodes = -(1:pathsol@K)
for (m in 1:length(path)){
merge= rbind(merge,c(cnodes[path[[m]]$k],cnodes[path[[m]]$l]))
cnodes[path[[m]]$l]=m
cnodes=cnodes[-path[[m]]$k]
}
path=pathsol@path
# initialisation
# build the merge tree in hclust format
merge = c()
cnodes = -(1:pathsol@K)
for (m in 1:length(path)){
merge= rbind(merge,c(cnodes[path[[m]]$k],cnodes[path[[m]]$l]))
cnodes[path[[m]]$l]=m
cnodes=cnodes[-path[[m]]$k]
}
merge
dm=-path[[1]]$merge_mat-t(path[[1]]$merge_mat)
dm[is.infinite(dm)]=100*max(dm[!is.infinite(dm)])
dm
leaforder = cba::order.optimal(stats::as.dist(dm),merge)
clpath=greed:::cleanpathopt(pathsol)
clpath
plot(clpath)
clpath=greed:::postprocess(clpath)
clpath=greed:::postprocess(clpath,data)
plot(clpath)
plot(clpath,type='tree')
plot(clpath,type='path')
plot(clpath,type='front')
plot(clpath,type='nodelink')
clpath
pathsol[[5]]
pathsol@path[[5]]
pathsol@path[[6]]
pathsol@path[[8]]
library(greed)
sol=greed(sim$x)
library(greed)
sol=greed(sim$x)
library(greed)
sol=greed(sim$x)
library(greed)
sol=greed(sim$x)
library(greed)
sol=greed(sim$x)
library(greed)
sol=greed(sim$x)
library(greed)
sol=greed(sim$x)
library(greed)
library(greed)
sol=greed(sim$x)
library(greed)
sol=greed(sim$x)
library(greed)
sol=greed(sim$x)
library(greed)
sol=greed(sim$x)
N = 500
K = 10
pi = rep(1/K,K)
mu = diag(rep(1/5,K))+runif(K*K)*0.01
sbm = rsbm(N,pi,mu)
sol=greed(sbm$x,model=new('sbm'))
N = 500
K = 10
pi = rep(1/K,K)
mu = diag(rep(1/5,K))+runif(K*K)*0.01
sbm = rsbm(N,pi,mu)
sol=greed(sbm$x,model=new('dcsbm'))
library(greed)
sim
sol=greed(sim$x)
plot(sol)
library(greed)
sol=greed(sim$x)
plot(sol)
sol@ggtreerow
library(greed)
sol=greed(sim$x)
plot(sol)
mu
image(mu)
cbind(tril(matrix(1,4,4)),triu(matrix(1,4,4)))
cbind(upper.tri(matrix(1,4,4)),lowertri(matrix(1,4,4)))
cbind(upper.tri(matrix(1,4,4)),lower.tri(matrix(1,4,4)))
cbind(upper.tri(matrix(1,4,4)),lower.tri(matrix(1,4,4)))*0.2+0.01
image(cbind(upper.tri(matrix(1,4,4)),lower.tri(matrix(1,4,4)))*0.2+0.01)
mu = cbind(upper.tri(matrix(1,4,4)),lower.tri(matrix(1,4,4)))*0.2+0.01
sim=rlbm(500,1000,rep(1/5,5),rep(1/10,10),mu)
sim=rlbm(500,1000,rep(1/4,4),rep(1/8,8),mu)
sol=greed(sim)
sol=greed(sim$x)
plot(sol)
mu
simu$x[simu$clr==1,simu$clc==1]
sim$x[sim$clr==1,sim$clc==1]
sum(sim$x[sim$clr==1,sim$clc==1])
sim$clc[1]
sum(sim$clc==1)
sum(sim$clc==1)*sum(sim$clr==1)
sum(sim$x[sim$clr==1,sim$clc==1])/(sum(sim$clc==1)*sum(sim$clr==1))
sum(sim$x[sim$clr==1,sim$clc==2])/(sum(sim$clc==)*sum(sim$clr==1))
sum(sim$x[sim$clr==1,sim$clc==2])/(sum(sim$clc==2)*sum(sim$clr==1))
table(sim$clc)
table(sim$clc)/1000
mu
data("FrenchParliament")
library(Future)
library(future)
plan(multisession)
sol=greed(FrenchParliament$X)
plot(sol)
table(sol@clrow,FrenchParliament$labels$groupe_abr)
rownames(FrenchParliament$X)
cbind(rownames(FrenchParliament$X),FrenchParliament$labels$uid)
table(sol@clrow,FrenchParliament$labels$groupe_abr)
table(sol@clrow,FrenchParliament$labels$partie_abr)
able(sol@clrow,FrenchParliament$labels[sol@clrow==3,]
)
FrenchParliament$labels[sol@clrow==3,]
sol=greed(FrenchParliament$X)
sol=greed(FrenchParliament$X)
plot(sol)
data("Xvlegislature")
library(multisession)
plan(multisession)
sol=greed(Xvlegislature$X)
plot(sol)
Xvlegislature$row_meta[sol@clr==3,]
Xvlegislature$row_meta[sol@clrow==3,]
Xvlegislature$row_meta[sol@clrow==4,]
Xvlegislature$row_meta[sol@clrow==5,]
cbind(rownames(Xvlegislature$X),Xvlegislature$row_meta$uid)
table(sol@clrow,Xvlegislature$row_meta$partie_abr)
table(sol@clrow,Xvlegislature$row_meta$groupe_abr)
sol
sol=greed(Xvlegislature$X,alg=new("hybrid",pop_size=40))
plot(sol)
dim(Xvlegislature$X)
plot(sol,type='tree')
devtools::test()
sol=greed(Xvlegislature$X,alg=new("seed"))
sol=greed(Xvlegislature$X,alg=new("seed"),K=20)
library(greed)
sol=greed(Xvlegislature$X,alg=new("seed"),K=20)
plot(sol)
sol
sol=greed(Xvlegislature$X,alg=new("multistarts"),K=20)
library(greed)
sol=greed(Xvlegislature$X,alg=new("multistarts"),K=20)
sol
devtools::test()
mu=cbind(lower.tri(matrix,4,4),upper.tri(matrix,4,4))*0.2+0.05
mu=cbind(lower.tri(matrix(1,4,4)),upper.tri(matrix(1,4,4)))*0.2+0.05
mm=rlbm(400,800,rep(1/4,4),rep(1/8,8),mu)
sol=greed(mm$x,model=new('co_dcsbm'))
plot(sol)
library(future)
plan(multisession)
mu=cbind(lower.tri(matrix(1,4,4)),upper.tri(matrix(1,4,4)))*0.2+0.01
mm=rlbm(400,800,rep(1/4,4),rep(1/8,8),mu)
sol=greed(mm$x,model=new('co_dcsbm'))
library(greed)
library(greed)
library(ggplot2)
set.seed(1234)
library(future)
plan(multisession)
mu=cbind(lower.tri(matrix(1,4,4)),upper.tri(matrix(1,4,4)))*0.2+0.01
mm=rlbm(400,800,rep(1/4,4),rep(1/8,8),mu)
sol=greed(mm$x,model=new('co_dcsbm'))
plot(sol)
dim(mu)
mu
?lower.tri
mu=cbind(lower.tri(matrix(1,4,4),diag=TRUE),upper.tri(matrix(1,4,4),diag=TRUE))*0.2+0.01
image(mu)
mu
mm=rlbm(400,800,rep(1/4,4),rep(1/8,8),mu)
sol=greed(mm$x,model=new('co_dcsbm'))
plot(sol)
mu=cbind(lower.tri(matrix(1,4,4)),upper.tri(matrix(1,4,4)))*0.2+0.01
mu
mu=cbind(lower.tri(matrix(1,4,4)),upper.tri(matrix(1,4,4)))*0.2+0.01
mu[2,4]=0.21
mu[3,5]=0.21
mu
rank(mu)
qr(mu)$rank
qr(t(mu))$rank
image(mu)
mm=rlbm(400,800,rep(1/4,4),rep(1/8,8),mu)
sol=greed(mm$x,model=new('co_dcsbm'))
plot(sol)
sol=greed(mm$x,model=new('co_dcsbm'),alg=new("hybrid",pop_size=30))
plot(sol)
table(sol@clrow,mm$clr)
table(sol@clcol,mm$clc)
model=new("co_dcsbm")
data=greed:::preprocess(model,mm$x)
cl=c(mm$clr,mm$clc+4)
sol=greed:::fit_greed(model,data,cl,type='none')
sol
sol@icl
solh=greed(mm$x,model=new('co_dcsbm'),alg=new("hybrid",pop_size=30))
solh=greed(mm$x,model=new('co_dcsbm'),alg=new("hybrid",pop_size=30),verbose=TRUE)
sol=greed:::fit_greed(model,data,cl,type='swap')
sol
sol=greed:::fit_greed(model,data,cl,type='none')
sol@icl
sol=greed:::fit_greed(model,data,cl,type='swap')
sol@icl
sol=greed:::fit_greed(model,data,cl,type='merge')
sol@icl
library(greed)
sol=greed:::fit_greed(model,data,cl,type='swap')
sol@icl
sol=greed:::fit_greed(model,data,cl,type='swap')
sol=greed:::fit_greed(model,data,cl,type='swap')
library(greed)
library(greed)
sol=greed:::fit_greed(model,data,cl,type='swap')
library(greed)
sol=greed:::fit_greed(model,data,cl,type='swap')
library(greed)
library(greed)
sol=greed:::fit_greed(model,data,cl,type='swap')
library(greed)
sol=greed:::fit_greed(model,data,cl,type='swap')
library(greed)
sol=greed:::fit_greed(model,data,cl,type='swap')
dim(data$X)
X[,988-400]
data$X[,988-400]
sum(data$X[,988-400])
sum(data$X[,989-400])
library(greed)
sol=greed:::fit_greed(model,data,cl,type='swap')
sum(data$X[,87])
sum(data$X[,413])
library(greed)
sol=greed:::fit_greed(model,data,cl,type='swap')
unique(sol@cl[401:1200])
library(greed)
sol=greed:::fit_greed(model,data,cl,type='swap')
library(greed)
sol=greed:::fit_greed(model,data,cl,type='swap')
sol=greed:::fit_greed(model,data,cl,type='swap')
library(greed)
sol=greed:::fit_greed(model,data,cl,type='swap')
sol=greed:::fit_greed(model,data,sample_cl(model,data,20),type='swap')
sol=greed:::fit_greed(model,data,greed:::sample_cl(model,data,20),type='swap')
library(greed)
library(greed)
sol=greed:::fit_greed(model,data,greed:::sample_cl(model,data,20),type='swap')
plot(sol)
sol=greed(mm$x)
plot(sol)
mu=cbind(lower.tri(matrix(1,4,4)),upper.tri(matrix(1,4,4)))*0.2+0.01
mu[2,4]=0.21
mu[3,5]=0.21
mm=rlbm(400,800,rep(1/4,4),rep(1/8,8),mu)
sol=greed(mm$x,model=new('co_dcsbm'))
expect_equal(sol@Krow, 4)
expect_equal(sol@Kcol, 8)
solc = cut(sol,8)
expect_true(is.ggplot(plot(solc,type='tree')))
expect_true(is.ggplot(plot(solc,type='path')))
expect_true(is.ggplot(plot(solc,type='front')))
expect_true(is.ggplot(plot(solc,type='blocks')))
expect_true(is.ggplot(plot(solc,type='nodelink')))
sol=greed(mm$x,model=new("co_dcsbm"),alg=new("seed"),K=40)
plot(sol)
devtools::test()
mu=cbind(lower.tri(matrix(1,4,4)),upper.tri(matrix(1,4,4)))*0.2+0.01
mu[2,4]=0.21
mu[3,5]=0.21
mm=rlbm(400,800,rep(1/4,4),rep(1/8,8),mu)
sol=greed(mm$x,model=new('co_dcsbm'))
expect_equal(sol@Krow, 4)
expect_equal(sol@Kcol, 8)
solc = cut(sol,8)
expect_true(is.ggplot(plot(solc,type='tree')))
expect_true(is.ggplot(plot(solc,type='path')))
expect_true(is.ggplot(plot(solc,type='front')))
expect_true(is.ggplot(plot(solc,type='blocks')))
expect_true(is.ggplot(plot(solc,type='nodelink')))
library(devtools)
library(testthat)
mu=cbind(lower.tri(matrix(1,4,4)),upper.tri(matrix(1,4,4)))*0.2+0.01
mu[2,4]=0.21
mu[3,5]=0.21
mm=rlbm(400,800,rep(1/4,4),rep(1/8,8),mu)
sol=greed(mm$x,model=new('co_dcsbm'))
expect_equal(sol@Krow, 4)
expect_equal(sol@Kcol, 8)
solc = cut(sol,8)
expect_true(is.ggplot(plot(solc,type='tree')))
expect_true(is.ggplot(plot(solc,type='path')))
expect_true(is.ggplot(plot(solc,type='front')))
expect_true(is.ggplot(plot(solc,type='blocks')))
expect_true(is.ggplot(plot(solc,type='nodelink')))
library(greed)
library(ggplot2)
set.seed(1234)
library(future)
plan(multisession)
mu=cbind(lower.tri(matrix(1,4,4)),upper.tri(matrix(1,4,4)))*0.2+0.01
mu[2,4]=0.21
mu[3,5]=0.21
mm=rlbm(400,800,rep(1/4,4),rep(1/8,8),mu)
sol=greed(mm$x,model=new('co_dcsbm'))
expect_equal(sol@Krow, 4)
expect_equal(sol@Kcol, 8)
solc = cut(sol,8)
expect_true(is.ggplot(plot(solc,type='tree')))
expect_true(is.ggplot(plot(solc,type='path')))
expect_true(is.ggplot(plot(solc,type='front')))
expect_true(is.ggplot(plot(solc,type='blocks')))
expect_true(is.ggplot(plot(solc,type='nodelink')))
mu=cbind(lower.tri(matrix(1,4,4)),upper.tri(matrix(1,4,4)))*0.2+0.01
mu[2,4]=0.21
mu[3,5]=0.21
mm=rlbm(400,800,rep(1/4,4),rep(1/8,8),mu)
sol=greed(mm$x,model=new("co_dcsbm"),alg=new("seed"),K=40)
expect_gte(sol@K, 12-2)
expect_lte(sol@K, 12+2)
solc = cut(sol,8)
expect_true(is.ggplot(plot(solc,type='tree')))
expect_true(is.ggplot(plot(solc,type='path')))
expect_true(is.ggplot(plot(solc,type='front')))
expect_true(is.ggplot(plot(solc,type='blocks')))
expect_true(is.ggplot(plot(solc,type='nodelink')))
mu=cbind(lower.tri(matrix(1,4,4)),upper.tri(matrix(1,4,4)))*0.2+0.01
mu[2,4]=0.21
mu[3,5]=0.21
mm=rlbm(400,800,rep(1/4,4),rep(1/8,8),mu)
sol=greed(mm$x,model=new('co_dcsbm'),alg=new("multistarts"),K=40)
expect_gte(sol@K, 12-2)
expect_lte(sol@K, 12+2)
solc = cut(sol,8)
expect_true(is.ggplot(plot(sol,type='tree')))
expect_true(is.ggplot(plot(sol,type='path')))
expect_true(is.ggplot(plot(sol,type='front')))
expect_true(is.ggplot(plot(sol,type='blocks')))
expect_true(is.ggplot(plot(sol,type='nodelink')))
library(greed)
library(future)
N=200
X1 = MASS::mvrnorm(N/2,c(-5,0),diag(2))
X2 = MASS::mvrnorm(N/2,c(0,5),diag(2))
R1 = greed:::gmm_marginal(X1,0.1,3,diag(2),c(0,0))
R2 = greed:::gmm_marginal(X2,0.1,3,diag(2),c(0,0))
Rm = greed:::gmm_marginal_merge(R1,R2,0.1,3,diag(2),c(0,0))
R = greed:::gmm_marginal(rbind(X1,X2),0.1,3,diag(2),c(0,0))
expect_true(Rm$log_evidence==R$log_evidence)
Rm$log_evidence
R$log_evidence
expect_lte(abs(Rm$log_evidence-R$log_evidence),10^-6)
R1m = greed:::gmm_marginal(X1[1:(N/2-1),],0.1,3,diag(2),c(0,0))
R1mo = greed:::gmm_marginal_del1(R1,X1[N/2,],0.1,3,diag(2),c(0,0))
expect_true(all(R1m$S==R1mo$S))
R1m$S
R1mo$S
expect_lte(sum(abs(R1m$S-R1mo$S)),10^-6)
expect_lte(sum(abs(R1m$m-R1mo$m)),10^-6)
expect_true(R1m$log_evidence==R1mo$log_evidence)
expect_lte(abs(R1m$log_evidence-R1mo$log_evidence),10^-6)
R1a = greed:::gmm_marginal_add1(R1m,X1[N/2,],0.1,3,diag(2),c(0,0))
expect_lte(sum(abs(R1a$S-R1$S)),10^-6)
expect_lte(sum(abs(R1a$m-R1$m)),10^-6)
expect_lte(abs(R1a$log_evidence-R1$log_evidence),10^-6)
N=600
X = rbind(MASS::mvrnorm(N/3,c(-5,0),diag(2)),MASS::mvrnorm(N/3,c(0,5),diag(2)),MASS::mvrnorm(N/3,c(5,0),diag(2)))
sol=greed(X)
library(greed)
sol=greed(X)
plot(X,col=sol@cl)
sol=greed(X,alg=new("seed"))
expect_equal(sol@K, 3)
solc = cut(sol,2)
expect_true(is.ggplot(plot(solc,type='tree')))
expect_true(is.ggplot(plot(solc,type='path')))
expect_true(is.ggplot(plot(solc,type='front')))
N=600
X = rbind(MASS::mvrnorm(N/3,c(-5,0),diag(2)),MASS::mvrnorm(N/3,c(0,5),diag(2)),MASS::mvrnorm(N/3,c(5,0),diag(2)))
sol=greed(X,alg=new("multistarts"))
expect_equal(sol@K, 3)
devtools::test()
library(greed)
devtools::test()
N = 500
K = 10
pi = rep(1/K,K)
mu = cbind(diag(rep(5,K)),matrix(0,K,20))+matrix(runif(K*(20+K)),K,20+K)
mm = rmm(N,pi,mu,15)
sol=greed(mm)
sol=greed(mm$x)
plot(sol)
data("Xvlegislature")
sol=greed(Xvlegislature$X)
library()
library(future)
plan(multisession)
sol=greed(Xvlegislature$X)
